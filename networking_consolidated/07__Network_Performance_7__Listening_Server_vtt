WEBVTT

00:00.030 --> 00:05.310
Here's another lecture that I thought it will be very fascinating to add in.

00:07.350 --> 00:08.160
Here's another lecture.

00:08.160 --> 00:10.950
I thought it very, very useful to add in this section.

00:11.460 --> 00:11.790
Right.

00:12.060 --> 00:12.870
Listening server.

00:13.440 --> 00:15.240
We listen all the time, right?

00:15.330 --> 00:20.820
When we create a server, whether in Python or Node.js on C, C++, C sharp.

00:21.090 --> 00:23.550
We listen on an interface and listen on import RAM.

00:24.530 --> 00:27.680
But we really understand what we're listening to.

00:27.710 --> 00:31.760
So that lecture kind of demystifies that, if you will.

00:33.350 --> 00:34.070
Let's jump into it.

00:35.150 --> 00:35.780
So listening.

00:35.780 --> 00:36.440
What is listening?

00:36.440 --> 00:40.910
You create a server by listening on a port, on a specific IP address.

00:41.300 --> 00:43.970
You have to specify an IP address to listen to.

00:44.170 --> 00:48.410
And you might say why I'm listening on my machine.

00:48.410 --> 00:50.730
And my machine should have only one IP address.

00:50.750 --> 00:55.280
No, no, no, no, no, no.

00:55.550 --> 00:58.220
Your machine will have multiple IP addresses.

00:58.700 --> 01:05.030
It already have multiple libraries as just the low loopback, which is the local host is an IP address.

01:05.540 --> 01:13.190
Another IP address is 0000, which is literally tells that tell the host that I want to listen to everything.

01:13.520 --> 01:20.900
And the third one, which is the actual network IP address, which is whatever it is that connects you

01:20.900 --> 01:21.500
to the Internet.

01:21.500 --> 01:21.770
Right.

01:22.500 --> 01:23.210
Could be wi fi.

01:23.780 --> 01:25.730
You could have a plug in Ethernet.

01:25.880 --> 01:27.050
That's another IP address.

01:27.290 --> 01:30.620
You could have Docker installed and that's a bridged network adapter.

01:30.920 --> 01:32.960
So you can have many IP addresses.

01:33.170 --> 01:39.800
So when you listen, you better know what you're listening on because, boy, this is dangerous stuff.

01:39.800 --> 01:41.090
Dangerous stuff.

01:42.170 --> 01:49.250
Let me explain to you one bug that I read that costs really cause a lot of disaster.

01:49.740 --> 01:56.000
There's an admin interface and one tool that I'm not going to mention, and those guys that built the

01:56.000 --> 02:00.500
admin tool listened on 000 this 1000 that.

02:01.760 --> 02:04.910
And they just shoved the tool, you know?

02:05.900 --> 02:11.900
And this tool was deployed on a public server and the admin doesn't have any password or credential.

02:13.100 --> 02:17.990
Because you listen on all sports that include you're listening on a public IP address.

02:18.260 --> 02:21.770
That means that port is open for business.

02:22.160 --> 02:29.930
Anyone from the wild, wild, dangerous, scary internet can connect to your admin API and cause harm.

02:30.500 --> 02:39.350
So when you have an admin interface that no admin API or admin page that should nobody ever has business

02:39.350 --> 02:41.030
connected to from the internet.

02:41.430 --> 02:49.790
Look, listen on the loop back host or listen on a private IP address that you know you can only access

02:49.790 --> 02:50.690
from the private.

02:51.680 --> 02:55.880
Because guess what if you listen on 000 is going to listen on the public.

02:56.360 --> 02:56.870
Private.

02:57.230 --> 02:57.920
Private here.

02:57.920 --> 02:59.690
Private here is going to listen on everything.

03:00.380 --> 03:05.420
And it will accept any connections from anywhere because servers are dumb.

03:06.800 --> 03:07.430
Let's continue on.

03:07.910 --> 03:10.880
Your machine might have multiple interfaces with multiple libraries.

03:10.880 --> 03:11.600
We're talk about that.

03:11.840 --> 03:13.080
You can read one lesson.

03:13.100 --> 03:14.930
What does let's explain all this stuff.

03:15.110 --> 03:16.880
We're going to go through an example in a minute.

03:17.270 --> 03:20.000
I made a video a while back and I want to reshare it here.

03:20.180 --> 03:21.770
I think it's a good idea to share it here.

03:22.490 --> 03:25.540
So we're going to listen on 1 to 7 .0.0.1.

03:26.420 --> 03:26.830
Right.

03:28.520 --> 03:30.320
And on port 88, what does that mean?

03:30.350 --> 03:39.950
It means listen on the local host IPV four interface on Port 88, IPV four, this this is the IPV four

03:39.950 --> 03:41.180
local host Ray.

03:42.390 --> 03:49.230
That then if you go to SDP, call in 127001 call in 88.

03:49.790 --> 03:52.760
That will establish a connection to this guy.

03:52.790 --> 03:53.090
Right.

03:53.600 --> 03:59.960
But if you go to the IP address, 192168, it won't because you only listen to the local host.

04:00.260 --> 04:05.330
If you go to try to go to the IPV six version, it wants to connect because you're listening to the

04:05.330 --> 04:06.410
IPV four version.

04:06.650 --> 04:12.500
And if you listen on this string local host, it's all over the place because it depends what local

04:12.500 --> 04:13.760
host is actually pointing to.

04:13.760 --> 04:15.530
A local host is just there DNS entry, right?

04:15.890 --> 04:20.270
Local host can point to this guy or this guy, by the way, call and call.

04:20.270 --> 04:24.080
And one is the IPV six version of a local host.

04:24.080 --> 04:26.000
If you want to listen, call in.

04:26.000 --> 04:27.020
CALLER 188.

04:27.110 --> 04:30.650
This listens on the local host IPV six interface imported data.

04:30.980 --> 04:38.480
That means if I connect to you, that immediately connects to that IPV six, right?

04:38.930 --> 04:39.800
That's on that.

04:39.830 --> 04:42.380
That will only happen when you do that.

04:42.620 --> 04:48.620
So when you try to connect to 1270011 happen because there is no one listening here.

04:49.370 --> 04:49.970
Same thing here.

04:49.970 --> 04:51.650
19.68.122.

04:52.610 --> 04:54.050
You can only access from this.

04:54.050 --> 04:55.700
You cannot access from localhost.

04:55.700 --> 04:56.750
You cannot access from here.

04:57.080 --> 04:59.270
Maybe you might get away with localhost.

04:59.270 --> 05:01.460
I think actually, I'm not quite sure.

05:01.490 --> 05:02.800
I think we need to test that.

05:03.680 --> 05:07.550
If you listen on that, will localhost be allowed?

05:07.580 --> 05:08.660
Probably, I guess.

05:10.460 --> 05:13.220
And here's the most dangerous 10000.

05:13.230 --> 05:15.470
I believe it's all the default if you don't specify.

05:15.470 --> 05:16.910
It's also lesson 000.

05:16.920 --> 05:18.770
I don't know is the default that's just dangerous.

05:19.280 --> 05:21.500
You know, this is what all interfaces.

05:22.820 --> 05:27.530
So if this is the code that you have, wherever you run, it is going to listen on any interface that

05:27.530 --> 05:28.130
it finds there.

05:28.160 --> 05:29.660
Hey, oh, this is an iPad.

05:29.660 --> 05:31.700
Let's listen, listen, let's listen on that.

05:32.900 --> 05:33.770
Very dangerous.

05:34.580 --> 05:42.230
So you can only have one process in that host listening on a IP port pair because that's the error you

05:42.230 --> 05:43.160
always get, right.

05:43.430 --> 05:48.200
If you have two processes, one process tries to listen to 80, 80, and another process tries to listen

05:48.200 --> 05:48.800
to the same port.

05:48.800 --> 05:51.780
Remember, you get this letter right through our port already in use.

05:53.330 --> 05:55.880
However, there is always an exception for everything.

05:55.910 --> 05:58.820
Rain and this is called the socket option.

05:58.820 --> 05:59.530
Port reuse.

06:00.090 --> 06:00.290
Right.

06:00.620 --> 06:01.550
The operating system.

06:02.610 --> 06:08.610
At some point in his life, Diane introduced the ability to listen on the same port by different processes.

06:09.090 --> 06:16.470
And what the operating system will do is load balance that segments, not segment the actual connections

06:16.980 --> 06:20.130
to the right process.

06:20.700 --> 06:23.340
So it will do actually a load balancing, which is fascinating.

06:23.910 --> 06:27.180
Most always all proxies use this concept now.

06:27.450 --> 06:35.460
I saw that because it will give you huge yet a bandwidth bandwidth in a baton that is the wrong way.

06:35.730 --> 06:39.370
It will give you a huge, you know, throughput.

06:39.390 --> 06:40.350
That's the word I'm looking for.

06:40.770 --> 06:43.980
So there's a conversion that allows more than one process to listen on the same port.

06:43.990 --> 06:47.490
This is the socket option port reuse of resistance bands.

06:47.490 --> 06:50.520
The segments among the processors does not entirely true.

06:50.730 --> 06:54.060
Not all segments will be balanced to all processors, right?

06:54.390 --> 06:55.080
It will.

06:55.290 --> 06:56.670
It will hash.

06:57.090 --> 07:02.700
And based on that hash, it will go through that particular process, you know.

07:03.000 --> 07:10.110
So in this case, the hash will be the four pairs that we talked about and that will go to a specific,

07:10.380 --> 07:11.760
you know, application.

07:11.760 --> 07:12.120
No.

07:12.390 --> 07:14.940
So it's it's effectively, let's say this.

07:15.210 --> 07:19.230
So this is going so app x oh.

07:21.380 --> 07:21.620
Let's.

07:21.650 --> 07:23.690
Let's remove my face so we can see it.

07:23.690 --> 07:23.930
Right.

07:24.590 --> 07:29.940
So app x here is listening on board 8080 and our boy is also listening on port 88.

07:30.380 --> 07:34.100
So this guy is coming from five, five by five.

07:34.100 --> 07:38.930
This guy's got five, seven, one, one, two, and they're both going to 88 on the same host.

07:39.530 --> 07:42.650
What they'll system will do is that OC ten 002 88.

07:42.870 --> 07:45.410
Sure, I have that, but where are you coming from?

07:45.500 --> 07:46.830
One five, five, five.

07:46.850 --> 07:47.870
Okay, let's hash that.

07:48.320 --> 07:48.710
Okay.

07:48.860 --> 07:50.630
Hash that goes to app X.

07:51.590 --> 07:55.520
That same thing at 80 717712.

07:57.110 --> 07:58.070
IPA one.

07:59.300 --> 08:00.080
Different hash.

08:00.260 --> 08:04.700
Go to the other one, right to the other app, although they are going to the same port.

08:05.240 --> 08:07.940
The operating system will take care of the load balancing of this.

08:08.660 --> 08:17.990
There are bugs that were reported in Linux where the if the if the process stops right, then the hash

08:17.990 --> 08:19.010
table changes.

08:19.490 --> 08:21.320
This causes real bad.

08:22.520 --> 08:25.610
This causes real bad problems when it comes on the table.

08:25.670 --> 08:26.780
The hash table changes.

08:26.780 --> 08:28.910
We know about the hashes right at the table.

08:29.240 --> 08:35.270
If the hash table changes, you have to rehash and remap things that can get really nasty.

08:35.420 --> 08:37.940
Right on to the next lecture, guys.

08:42.720 --> 08:50.040
Today I'm going to talk about the HTTP server, listening and Node.js and then just take it apart.

08:50.040 --> 08:51.840
What is it doing actually?

08:52.080 --> 08:52.320
Right.

08:52.560 --> 08:54.990
How about we actually just jump into it, guys?

08:55.080 --> 08:58.710
I'm going to create a brand new JavaScript file.

08:59.040 --> 09:05.130
Called Listen to Jess and we'll just go ahead and create a new

09:08.760 --> 09:09.800
variable here.

09:09.810 --> 09:20.800
We're going to require the FTP server and we'll create an DTP server object by calling it DTP to create

09:20.810 --> 09:22.650
server and nothing more.

09:23.340 --> 09:25.230
Just just that.

09:26.850 --> 09:35.190
And we're used to really just calling listen and providing import, but.

09:36.300 --> 09:36.840
I want to.

09:38.650 --> 09:43.930
You know, explore what other options we have here and what do they mean, really?

09:44.710 --> 09:48.970
And when we actually provide a pour, we're going to listen on that board.

09:49.210 --> 09:51.040
Obviously, you're going to tell us that.

09:52.050 --> 09:59.040
But I don't know if many of you know that even the poor there is a question mark next to it, which

09:59.040 --> 10:00.840
means it's actually optional.

10:01.500 --> 10:03.870
So technically this works.

10:04.290 --> 10:13.680
And the first question that you might have is Hussein, or if it's going to listen, where is it going

10:13.680 --> 10:14.740
to listen to which board?

10:14.760 --> 10:19.800
Well, everything is an event almost in the logs.

10:19.800 --> 10:29.730
So you can effectively have an on listening and like a video studio could actually autocomplete for

10:29.730 --> 10:36.120
you and it tells you hey an on listening call this function right.

10:36.660 --> 10:45.450
This is very similar to when you provide the callback in the listen argument.

10:46.110 --> 10:53.790
But what we're going to do here is effectively, hey, when, when I am listening, we can just literally

10:53.790 --> 10:58.450
just print, hey, listening on port.

10:58.800 --> 11:00.060
And here is the beauty.

11:00.540 --> 11:03.930
You can get the port from the piece of our new.

11:04.380 --> 11:13.500
We need to be really careful here because this will only be called when the Listen event is successful.

11:14.040 --> 11:19.050
And basically, if you don't provide a poor or you provided zero as a value for the port.

11:19.800 --> 11:21.360
So the zero is not a valid port.

11:21.750 --> 11:24.240
It will pick a random pour and listen to it.

11:25.200 --> 11:33.980
And here's how you get the port, that random port that has been picked for you and you can do a STB

11:33.990 --> 11:34.500
server.

11:34.500 --> 11:39.930
I just found out this really recently, to be honest, while I was exploring and making the other video

11:42.480 --> 11:49.110
you can do to Deep Server, that address and address is a function, right synchronous function that

11:49.110 --> 11:52.920
you can call and it's going to give you a lot of useful information.

11:53.700 --> 11:54.840
A rhythm is a port.

11:56.310 --> 11:58.530
And if I do that now.

12:00.210 --> 12:06.240
And that's just that's just the sense this is a really use useless app.

12:06.240 --> 12:10.350
So let's add an actual event here on request.

12:10.920 --> 12:15.870
If someone make any requests to us, I wonder if you can do an end and write something.

12:15.870 --> 12:16.590
I'm not quite sure.

12:16.590 --> 12:17.250
Let's try that.

12:18.780 --> 12:19.290
Let's just do.

12:19.290 --> 12:21.660
Okay, okay.

12:22.920 --> 12:23.760
Okay.

12:24.510 --> 12:26.130
Let's just do a run.

12:26.700 --> 12:28.180
All right?

12:28.290 --> 12:29.040
It's good.

12:29.040 --> 12:29.790
And run.

12:31.240 --> 12:34.020
You can see that we were picked the port.

12:34.020 --> 12:37.620
Five, seven, five, six, five.

12:37.890 --> 12:50.100
That means if I go to if I go to a browser type in just deep localhost you can see at our server is

12:50.130 --> 12:58.380
beautifully running and you can do tricks like that in your app says like on a localhost then you can

12:58.380 --> 13:06.000
put the port here and what's his name which was to decode will actually give you almost a link when

13:06.000 --> 13:09.960
you can do command click and it will open for you.

13:10.680 --> 13:10.980
Right.

13:11.010 --> 13:14.310
It will all different definitely port pick a different port.

13:14.610 --> 13:21.150
This is this is useful specifically if you if you don't know that environment you're running in and

13:21.150 --> 13:25.920
you have no idea what ports are going to be reserved.

13:26.310 --> 13:26.610
Right.

13:26.640 --> 13:31.440
And other apps or listening to you can use this approach, but this is not really the fascinating part

13:31.440 --> 13:31.800
to me.

13:33.480 --> 13:41.940
What what is really interesting here is there is another parameter here is like on I'm going to type

13:41.940 --> 13:52.380
in this here like what are we listening to is the other question that is actually the most dangerous

13:52.380 --> 13:53.190
question here.

13:53.280 --> 13:57.460
Sometimes there is an address, right?

13:57.740 --> 13:57.910
Right.

13:57.930 --> 13:59.610
So say now you're listening on your machine.

13:59.610 --> 14:02.280
Of course you can also in your address, you know your address.

14:02.400 --> 14:03.600
Not really.

14:04.200 --> 14:07.020
It's not as clean cut and dry.

14:07.190 --> 14:10.110
I really wanted to I wanted to show you this.

14:10.110 --> 14:13.500
Most of you some of you might know what this your colon.

14:13.500 --> 14:19.020
Colon is the short hand writing for the IPV six

14:22.290 --> 14:22.790
right here.

14:23.190 --> 14:25.890
Calling Colon is equal to 000.

14:26.280 --> 14:35.310
And IPV four, this is the IPV six and I believe which this this is an invalid.

14:35.400 --> 14:46.680
It's called, I think, an unspecified, unspecified address, which means that really it's an invalid

14:46.680 --> 14:47.100
address.

14:47.100 --> 14:52.320
You cannot use this physically on the network, but software can.

14:52.590 --> 14:57.630
And usually what it means, it means every interface.

14:58.020 --> 15:10.050
So like if my if I had a Wi-Fi and I have a 5G network and I have another public LAN Ethernet, my code

15:10.050 --> 15:12.000
by default listens to all of them.

15:12.930 --> 15:18.900
And you really need to be very critical and very, very careful with this.

15:18.900 --> 15:23.400
So technically I am running it through a local host.

15:23.640 --> 15:33.630
But so if I opened this again and I opened a new one and I did Hosain Mac Dot Local, this is my DNS

15:33.630 --> 15:36.180
which technically points to my IP address.

15:36.510 --> 15:36.800
Right.

15:37.320 --> 15:38.550
That also works.

15:38.850 --> 15:41.670
My IP address is this.

15:42.360 --> 15:43.770
That works.

15:44.370 --> 15:47.100
So I was able to go through a local host.

15:47.100 --> 15:55.650
I was able to go through my DNS hostname and I was able to go through my IPv4 and I'm pretty sure if

15:55.650 --> 15:58.980
I have an IPV six, I can do that too.

15:59.340 --> 16:05.610
I just couldn't figure out how to actually paste the IPV six here and then have it work from the browser.

16:08.220 --> 16:16.830
So that means that if I have my phone and I'm going to show you right now, if I type in on my phone

16:16.830 --> 16:24.300
here, I was saying, Mac, the local call and five, seven, five.

16:26.560 --> 16:27.460
89.

16:28.000 --> 16:35.680
That works from my phone on the same network, you might say, seen and duh.

16:36.010 --> 16:42.310
So yeah, we've shown that it works on my phone and works everywhere.

16:43.120 --> 16:46.420
But just just the defaults.

16:46.780 --> 16:47.830
There's listening in everywhere.

16:47.830 --> 16:51.850
And I've seen some apps incorrectly do that.

16:51.850 --> 17:02.620
And the danger of this is if your app is supposed to be like an administrator of only that is only should

17:02.620 --> 17:08.080
be accessible from local host and not any other interfaces.

17:09.160 --> 17:12.010
You really should only access from the same machine.

17:12.460 --> 17:18.310
Then you only want to listen on the loopback or certain IP addresses, right?

17:18.580 --> 17:23.320
If you accidentally deployed your node g-sap.

17:23.680 --> 17:25.510
And that goes for any application.

17:25.510 --> 17:32.110
Really, this is almost always the default if you accidentally deploy this on the cloud, on an and

17:33.070 --> 17:42.070
on some on something that has a public IP address, then anyone scanning the Internet for this open

17:42.070 --> 17:44.950
port, they will be able to access to you.

17:45.400 --> 17:52.870
Why do you think we have all these data leaks that is happening with Elasticsearch and MongoDB?

17:53.260 --> 18:00.670
Because people just listen on all interfaces, even though they don't necessarily want to do that.

18:00.670 --> 18:06.070
You only want to listen to the interfaces that you absolutely are only needing to connect to.

18:06.280 --> 18:15.130
Like in a development environment, if you're the only one here, you don't want anyone in, in, in

18:15.130 --> 18:22.630
the vicinity in the same network at be able to access your stuff, the app that you just throw out because

18:22.630 --> 18:23.590
it could be dangerous.

18:23.590 --> 18:26.440
You might say I don't care and that's fine.

18:26.440 --> 18:30.230
Just understanding this is actually I think I think it's important, right?

18:30.360 --> 18:34.840
If I say it again, zero for the port and you can specify the hostname.

18:34.840 --> 18:42.010
So they are really not only interested in 1 to 7 .0.0.1,

18:45.160 --> 18:53.200
I only want to be listening on the loopback and not any loop, but I want to listen on the IPV four

18:53.200 --> 18:55.270
loopback which is one day 7001.

18:55.900 --> 18:58.030
That means let's run again.

18:58.300 --> 19:05.050
Boom, this works because the localhost and this also works.

19:06.610 --> 19:08.470
But this right.

19:08.980 --> 19:10.000
What's my IP address again?

19:12.130 --> 19:16.660
192168.254. ten.

19:18.690 --> 19:29.070
Doesn't work when your client, which is the browser, tried to establish a TCP connection to this IP

19:29.070 --> 19:29.730
address.

19:30.540 --> 19:33.840
The operating systems passed that scene.

19:34.500 --> 19:39.270
Try to parse this into this interface and this is what is like a nobody is listening on this port,

19:39.270 --> 19:41.550
on this particular IP address.

19:42.300 --> 19:42.630
Right.

19:42.900 --> 19:44.580
That's why that connection was refused.

19:44.640 --> 19:46.590
You didn't get any snack as a result.

19:47.730 --> 19:52.620
And sometimes this is a good thing if you don't want anyone, especially like I don't know if you are

19:52.620 --> 19:54.840
like in a public Wi-Fi, right.

19:56.070 --> 19:58.230
Building those the apps you are near.

19:58.230 --> 20:00.840
Listen, you only want to listen on this.

20:00.840 --> 20:02.130
Things that you absolutely need.

20:02.400 --> 20:02.700
Yeah.

20:03.570 --> 20:05.280
Just another another thing.

20:05.400 --> 20:14.100
And then I'll add that there is some other useful information which is here tells you what family right

20:14.110 --> 20:17.490
ear which is the family of the IP address does.

20:17.490 --> 20:19.980
Look, IPV four.

20:19.980 --> 20:22.230
We know that 127 is IPV forum.

20:23.070 --> 20:29.430
If you want to listen to the like, let's say you have an IPV six configuration.

20:29.430 --> 20:31.770
I believe it's this, right?

20:31.860 --> 20:34.350
This is the local host version of IPV six.

20:34.350 --> 20:35.070
I might be wrong.

20:35.340 --> 20:36.570
We're going to look it up, if that's wrong.

20:37.020 --> 20:37.490
There you go.

20:37.500 --> 20:38.460
That's actually correct.

20:39.000 --> 20:39.780
001.

20:40.380 --> 20:46.710
And now I have no clue, to be honest, how to actually browse this right here.

20:47.070 --> 20:48.420
Is it just pasting this?

20:48.420 --> 20:52.110
I really I don't think this will work exactly.

20:53.400 --> 20:54.570
So it doesn't work.

20:54.690 --> 20:58.290
I don't know how to navigate the IPV six.

20:58.290 --> 20:59.780
Let's, let's, let's actually look it up.

20:59.790 --> 21:00.390
Thank you.

21:00.390 --> 21:01.110
Internet.

21:02.070 --> 21:03.280
It's a square bracket.

21:03.280 --> 21:08.190
Do you have to add a square bracket and then you put your IP v6 and then you can connect to it.

21:08.490 --> 21:11.280
So that's how you connect to an IPV six, right?

21:11.730 --> 21:16.710
A See if actually 127.0.01 works and this is what I expected.

21:17.190 --> 21:24.360
127.0.01 doesn't work because well, you only listen to the IPV six, you clearly listen to only the

21:24.360 --> 21:25.920
IPV six version.

21:26.280 --> 21:26.550
All right.

21:27.900 --> 21:35.490
So I wonder what local host will do, to be honest, would listen to both IPV six and IPV four.

21:36.030 --> 21:39.600
It sounds like a defaulted to IPV four by him.

21:39.630 --> 21:49.080
Must find out wrong and wrong port probably is not convenient to generate to run a port every time.

21:49.080 --> 21:49.340
Huh.

21:50.730 --> 21:53.460
Now just realize that it's convenient to listen to the same.

21:53.460 --> 21:56.130
But it's just something new, guys.

21:56.140 --> 21:56.490
All right.

21:57.450 --> 22:01.650
Okay, now IPv4 is listening, but IPV six is not.

22:01.980 --> 22:02.220
It's.

22:02.400 --> 22:06.390
It's interesting to kind of pick up all these small things and.

22:06.480 --> 22:06.900
All right.

22:08.620 --> 22:10.030
Do some more fancy stuff.

22:10.900 --> 22:20.080
What I'm going to do is I am going to listen to a random port, but I'm going to listen to the loop

22:20.080 --> 22:25.870
back IPv4 and then I'm going to create a brand new server.

22:26.860 --> 22:39.800
I'm going to call it IPV six now called a six year based, based based waste waste based app.

22:40.600 --> 22:44.920
And here I am going to listen to that one.

22:46.240 --> 22:51.070
So now I'm going to get two different ports, right?

22:51.460 --> 22:53.500
And I'm listening on two different interfaces.

22:54.190 --> 22:56.320
All right, let's do that.

22:57.010 --> 22:58.770
So to figure out the six here.

22:59.920 --> 23:02.810
Now I'm going to just like listening server two.

23:02.890 --> 23:04.570
I'm going to server six.

23:04.570 --> 23:10.990
Call it here on server four, which means, look, IPV four, what was going to do now?

23:10.990 --> 23:11.680
What happens?

23:11.890 --> 23:14.340
We're experiment because we're playing look at that.

23:14.890 --> 23:18.460
We got obviously two different ports there after the other.

23:19.070 --> 23:23.360
But just let us fix this, do this.

23:23.390 --> 23:28.540
Then we know how to connect to IPV six now.

23:28.810 --> 23:29.530
So let's do that.

23:30.670 --> 23:31.920
So now this is boom.

23:31.930 --> 23:34.750
Let's open that up and then let's boom, let's open that up.

23:35.410 --> 23:37.570
So technically, well, tomorrow working.

23:38.620 --> 23:41.530
But both them are completely different servers.

23:41.830 --> 23:51.790
So now instead of say, Hey, okay, you are hitting the IPV six server and this guy, okay, you are

23:51.790 --> 23:53.680
hitting IPV four server.

23:55.270 --> 23:59.820
Look at all this stuff that we're seeing here.

23:59.830 --> 24:00.520
Refresh.

24:01.360 --> 24:02.830
And now I'm going to do this.

24:03.100 --> 24:03.550
Boom.

24:04.880 --> 24:05.870
And then boom.

24:07.490 --> 24:13.220
Look at that IPV four server or IPV six.

24:14.120 --> 24:15.410
Now I'm going to ask you a question.

24:16.850 --> 24:19.520
If I did randomize this thing.

24:19.880 --> 24:21.380
Eight, eight, eight, eight.

24:23.340 --> 24:24.860
88, 88.

24:26.040 --> 24:28.230
What do you think is going to happen?

24:28.680 --> 24:30.630
Who can make a guess?

24:31.170 --> 24:33.000
Am I going to get an error?

24:35.120 --> 24:35.810
Or not.

24:38.990 --> 24:39.560
Take your guess.

24:41.240 --> 24:43.010
No errors, guys.

24:43.220 --> 24:44.270
Of course.

24:44.540 --> 24:44.850
Why?

24:44.870 --> 24:52.150
Because the uniqueness of the port is address port pair.

24:52.460 --> 24:54.760
Okay, it's not just the port.

24:54.800 --> 24:55.150
Right.

24:55.640 --> 24:57.020
You're listening on the local host.

24:57.260 --> 25:04.310
So technically, you can also listen on eight, eight, eight, eight on the IPv4 public public private

25:04.310 --> 25:05.510
IP address, 192.

25:05.780 --> 25:10.580
That's that gives you another interface if you want to scroll someone.

25:11.360 --> 25:12.500
You can definitely do that.

25:13.160 --> 25:14.240
So let's see what happened, though.

25:14.330 --> 25:14.730
Boom.

25:14.750 --> 25:15.470
Open that guy.

25:15.470 --> 25:17.240
Up to six.

25:18.320 --> 25:18.800
That up.

25:19.370 --> 25:21.590
Oh, localhost.

25:21.590 --> 25:22.910
Localhost is pointing.

25:23.600 --> 25:24.080
Look at that.

25:24.110 --> 25:25.970
Look, I was actually pointing to V6.

25:26.240 --> 25:30.880
So we actually need to do bom bom one, right?

25:31.310 --> 25:40.040
We have to do 127.0.0.1 because the local host, the DNS is effectively pointing by default to the IPv6.

25:40.460 --> 25:43.100
You know, that's another thing you need to understand.

25:43.490 --> 25:46.640
Local host is just a DNS label.

25:47.420 --> 25:47.780
Right.

25:48.080 --> 25:53.540
I don't know if that's actually a correct thing to say, but that label point has to be a point to the

25:53.540 --> 25:54.910
IP address by default.

25:55.020 --> 25:57.200
Sounds like it's pointing to the IPV six.

25:58.010 --> 25:58.340
Right.

25:58.730 --> 26:06.140
So technically, to be more accurate, this thing has to be 1270.0.1

26:09.530 --> 26:10.020
copies.

26:10.760 --> 26:11.600
Good stuff.

26:12.350 --> 26:13.100
Open that up.

26:13.340 --> 26:13.760
Look at that.

26:14.240 --> 26:15.560
It's a completely different server.

26:17.090 --> 26:18.860
Let's close all this taps.

26:22.010 --> 26:31.130
So now, if I actually forced an error as far as I know by doing this, this is a no no.

26:31.370 --> 26:37.160
Because now you're listening to this guy and you're listening in the same interface, right?

26:38.260 --> 26:39.220
If you're a fresh.

26:41.460 --> 26:44.460
Process exited with code one and we have no idea why.

26:46.290 --> 26:54.600
So now this is when we actually need to somehow capture the errors, which we didn't, by the way.

26:55.650 --> 26:59.550
That's why when you need, that's not on at all effectively.

26:59.550 --> 27:00.960
And I love Visual Studio code.

27:00.960 --> 27:01.380
Look at that.

27:02.040 --> 27:07.860
The people behind this Visual Studio code are heroes.

27:09.780 --> 27:10.890
So we're going to do a console.

27:10.890 --> 27:13.920
Lord God is going to do it.

27:13.920 --> 27:15.210
And what am I doing?

27:15.680 --> 27:16.200
Error.

27:17.790 --> 27:18.300
Error.

27:19.620 --> 27:21.180
And I have no idea what I think.

27:21.180 --> 27:23.880
This is just a string, but it might have been an object.

27:24.420 --> 27:26.010
And we do, boy.

27:28.050 --> 27:37.740
And then I go capital p wrong undo still figuring out them although I converted everything to them here.

27:38.370 --> 27:41.040
Still trying to learn them.

27:42.470 --> 27:49.660
Learn and just like force myself to, you know, I'm getting used to it, but I only know very few commands

27:49.670 --> 27:58.880
that, you know, get me up and running, but I'm no expert now.

27:58.880 --> 28:10.100
Let's go ahead and you run this thing and we're not getting any air or why hurt you are non e server

28:10.100 --> 28:15.080
for listening so we listened successfully on this guy.

28:17.810 --> 28:18.440
What?

28:18.800 --> 28:19.100
Oh.

28:19.450 --> 28:20.050
Oh.

28:21.230 --> 28:22.790
I'm going to do an error.

28:23.000 --> 28:23.900
I forgot the.

28:24.440 --> 28:25.460
How did I forget this?

28:26.570 --> 28:29.150
But even though we should have gotten something right.

28:29.510 --> 28:30.050
That's odd.

28:33.360 --> 28:33.780
They got.

28:33.790 --> 28:36.270
We got an error or error error.

28:36.530 --> 28:39.930
And listen address enus address.

28:39.930 --> 28:40.770
Already in use.

28:41.970 --> 28:47.180
By address they mean the pair of IP port.

28:47.190 --> 28:47.470
Right.

28:48.220 --> 28:51.840
And you can get the same error if you like.

28:53.040 --> 28:53.970
Stop this.

28:56.670 --> 29:01.020
If you do like 0000, which means all interfaces.

29:01.020 --> 29:04.440
And if you do the same thing here, you're going to get the same error.

29:05.430 --> 29:13.950
And probably it's better to do an actual at or higher so we can see it and read see it and read log

29:13.950 --> 29:14.340
of that.

29:15.180 --> 29:18.930
Although 000 means all interfaces, right?

29:19.880 --> 29:26.470
But it also means that you already listened on this particular IP address, which means all interfaces.

29:26.810 --> 29:27.200
It means.

29:27.290 --> 29:28.850
Sorry, I can't do that ever.

29:28.850 --> 29:31.010
And already someone else is listening.

29:32.150 --> 29:33.650
So that guys, I think.

29:33.890 --> 29:36.170
I think I'm going to stop here and let's.

29:36.170 --> 29:47.120
Let's get back to just do this, have this undo, let's do this to be back to the IPV six

29:49.820 --> 29:55.480
and this guy to be to be IP if you fall under refresh.

29:56.400 --> 29:56.660
Yeah.

29:56.960 --> 30:05.330
The stop here I think, I think it's fun to kind of understand these basic fundamentals and this just

30:05.480 --> 30:10.730
from one command, you know, there is so much we can scratch the surface and learn.

30:11.510 --> 30:13.970
And I don't know, I personally find it fascinating.

30:13.970 --> 30:18.980
I don't know if you do, but I just like to talk about this low level stuff I'm going to see in the

30:18.980 --> 30:19.340
next one.

30:19.340 --> 30:20.380
You guys, the awesome goodbye.
