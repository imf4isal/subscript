WEBVTT

00:00.060 --> 00:00.450
All right.

00:00.540 --> 00:05.550
Here is Nigel's algorithm cousin delayed acknowledgement.

00:05.970 --> 00:09.060
Those two were developed at the same time.

00:09.420 --> 00:15.510
Back in whatever the 1970s or eighties, actually, they were developed at the same time, and they

00:15.510 --> 00:16.740
will implement at the same time.

00:17.430 --> 00:22.950
And boy, if both are enabled the same time, this is a disaster.

00:23.010 --> 00:23.730
Let's get into it.

00:24.090 --> 00:26.490
Less packets are good, but performance is better.

00:27.090 --> 00:28.320
These are my thoughts, by the way.

00:28.320 --> 00:31.140
I make this up so that let me know if they are cringe.

00:33.650 --> 00:35.390
All right, let's disappear again.

00:35.570 --> 00:39.300
This is one of the slides that I couldn't cram in screen on.

00:40.220 --> 00:43.220
So delay technology, algorithm waste.

00:43.430 --> 00:46.400
It is waste directed all segments right away.

00:46.790 --> 00:52.790
Maybe it's very wasteful to acknowledge a segment, get a segment, acknowledge the president, acknowledge.

00:52.850 --> 00:54.050
Let's wait a little bit.

00:54.380 --> 00:57.050
Let's wait to receive a lot of segment and then acknowledge one.

00:57.180 --> 00:57.420
Right.

00:57.820 --> 00:59.510
Because here's an example.

00:59.510 --> 00:59.780
Right.

01:01.530 --> 01:05.280
I sent ACE and segment one, two and three, four.

01:05.430 --> 01:05.760
Right.

01:05.880 --> 01:06.690
And then five.

01:07.140 --> 01:10.200
If I waited, I can lose them all at once.

01:10.590 --> 01:15.180
I can send one beautiful back, one back to rule them all.

01:16.020 --> 01:17.580
This is the ah Lord of the Rings now.

01:19.050 --> 01:22.260
Okay, so one actor, all of them all to acknowledge them all.

01:22.650 --> 01:23.940
Isn't that great?

01:24.330 --> 01:30.210
So why waste bandwidth and and garbage packets that are empty?

01:31.520 --> 01:34.460
When I can delay the acknowledgement.

01:36.040 --> 01:40.870
The problem with delayed acknowledgment like this beautiful thing.

01:41.500 --> 01:41.800
All right.

01:41.800 --> 01:45.370
Let's combine this with major algorithm A, let's see what will happen.

01:45.700 --> 01:52.810
Cause delays in some clients that may lead to time out and retransmission because now you're delaying.

01:53.140 --> 01:58.510
Some clients will think I did my ah my packets.

01:58.720 --> 02:00.120
Did my packet arrive or not.

02:00.130 --> 02:01.540
I don't know let me retransmit.

02:02.230 --> 02:08.770
So you're you're doing empty retransmission on nothing really there is noticeable performance degradation

02:08.770 --> 02:12.760
with both of them are going to explain that a man and that is combined with major algorithm you can

02:12.760 --> 02:16.000
lead up to 400 millisecond.

02:16.020 --> 02:17.950
That is brutal, man.

02:18.610 --> 02:20.860
Each body's just waiting on each other.

02:21.160 --> 02:21.580
Let's.

02:21.880 --> 02:24.160
Let's get into this example that I rolled up, guys.

02:24.910 --> 02:28.480
Here's here's the same example from before 5000 byte.

02:28.630 --> 02:28.990
Both.

02:28.990 --> 02:30.760
Both, Wolf, send these three segments.

02:30.760 --> 02:31.000
Right.

02:32.050 --> 02:32.600
Here's the thing.

02:33.340 --> 02:35.490
The fourth segment is just 620.

02:35.800 --> 02:42.070
So I need to send it, but I can't because Nigel right now just says, wait, wait, man.

02:42.760 --> 02:43.840
And be.

02:44.820 --> 02:45.900
Why y I'm waiting.

02:45.910 --> 02:50.310
I'm waiting for an acknowledgement for these before I can send your half a segment.

02:50.370 --> 02:50.700
Right.

02:51.150 --> 02:51.480
So.

02:51.630 --> 02:54.840
So, B, in this case, guess what?

02:55.280 --> 02:56.640
Delayed acknowledgement.

02:56.640 --> 02:58.020
I'll go to them on the server side.

02:58.470 --> 02:59.730
So we are delaying.

02:59.730 --> 03:00.660
We're waiting.

03:01.020 --> 03:02.400
So this guy is waiting.

03:02.940 --> 03:04.140
This guy's waiting.

03:05.610 --> 03:08.070
And nobody's just talking to each other anymore.

03:08.310 --> 03:10.450
So this is waiting and this is waiting.

03:10.710 --> 03:15.060
And this gap can increase up to 400 millisecond in some cases.

03:15.060 --> 03:17.150
You know, and all of a sudden, you know what?

03:17.160 --> 03:24.750
I think I waited enough and this wait is I don't I don't know if it's defined or not, but if this goes

03:24.750 --> 03:26.190
along, is this okay?

03:26.700 --> 03:27.350
I give up.

03:27.360 --> 03:28.860
Let's acknowledge it's been a while.

03:29.010 --> 03:31.410
It's been a second already acknowledged this.

03:31.620 --> 03:34.680
And the ones we acknowledge these three guys as obviously act three.

03:34.860 --> 03:42.750
So I could acknowledge all these guys and then we can obviously send my segment only then.

03:42.750 --> 03:43.890
So look at this delay.

03:43.890 --> 03:52.170
So there is a delay right here and here to this law that I'm still you and then we can send.

03:52.650 --> 03:53.220
Yikes.

03:53.940 --> 03:58.620
That is absolutely brutal, if you think about it.

03:59.800 --> 04:00.520
Really brutal.

04:01.470 --> 04:01.740
So yeah.

04:02.830 --> 04:05.380
Disabling, disabling, delayed acknowledgement.

04:05.380 --> 04:05.650
Go them.

04:05.650 --> 04:08.400
You can do it by setting the TCP quick ach.

04:08.890 --> 04:10.030
So there is a delay.

04:10.450 --> 04:11.230
No delay.

04:11.950 --> 04:14.350
And there is quick ach quick ach option.

04:15.400 --> 04:18.400
Disabling delay technologies can be done with the TCP quick act.

04:18.410 --> 04:21.160
So this is a low level socket options they are called.

04:21.580 --> 04:21.940
So.

04:23.250 --> 04:27.010
Some apps like Node.js exposes some of this stuff, right?

04:27.210 --> 04:33.240
Node.js is working on exposing certain things like their algorithms, but Python, I believe also.

04:33.390 --> 04:39.630
But if you have if you have a CE client like low level CE, glad you have access to all this stuff.

04:39.630 --> 04:43.800
You know, that's one one advantage of writing low level code, right?

04:43.810 --> 04:50.490
I guess segments will be acknowledged quicker when you disable delayed acknowledgement.

04:51.420 --> 05:00.420
So it's a it's really a lot of people think really hard about this and experiment and taste, you know,

05:00.590 --> 05:07.470
to to see the difference about this combined with acknowledgement, you have to try and and taste all

05:07.470 --> 05:12.810
these things and see what is the impact on your back end and your front end in this case.

05:12.810 --> 05:13.050
Right.

05:13.350 --> 05:19.900
But just understand, especially this combination of Nigel and DeLay deaths is just a disaster.

05:19.920 --> 05:22.770
You know, it can really kill your performance.

05:23.130 --> 05:30.420
So if you ever experience a performance now, you know why you're this is lower than you.

05:30.430 --> 05:31.710
You know, it's this way.

05:31.890 --> 05:35.160
You're at the higher level and this is a low in the network stack.

05:35.160 --> 05:38.510
But now, you know, on to the next lecture.
