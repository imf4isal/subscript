WEBVTT

00:00.090 --> 00:01.310
What's going on, guys?

00:01.320 --> 00:04.530
My name is Hassan and welcome to another episode of Wireshark.

00:04.530 --> 00:12.420
Them all we we where we Wireshark every single protocol in existence and look at every single packet

00:12.630 --> 00:17.700
and understand what's going on in the back end because we are back in engineers and we need to understand

00:17.700 --> 00:18.720
everything is going on.

00:18.720 --> 00:26.070
So today we're going to Wireshark http two and guys http two is secure by default because of protocol

00:26.070 --> 00:33.870
ossification, because we have a lot of dumb routers on the internet and those routers try to be too

00:33.870 --> 00:39.900
clever by half those boxes, try to be too clever by half and try to intercept the traffic and do stuff.

00:39.900 --> 00:44.670
If it's unencrypted, if it's port 80 specifically, should it be so?

00:44.700 --> 00:45.420
It should be too.

00:45.450 --> 00:46.620
Has to be an encrypted.

00:46.620 --> 00:47.640
Encrypted for that reason.

00:47.850 --> 00:51.300
And because it's an encrypted, we can't really.

00:51.300 --> 00:54.930
WIRESHARK It can we now we cannot.

00:54.930 --> 01:03.690
So thanks to Daniel Stenberg, the creator of Curl, he created a blog on how to decrypt stuff with

01:03.690 --> 01:04.650
Wireshark.

01:04.650 --> 01:05.160
Right.

01:05.160 --> 01:06.510
By giving providing the keys.

01:07.140 --> 01:08.190
How about we jump into it, guys?

01:08.190 --> 01:13.770
Let's show you how HTTP two looks like while it's encrypted in Wireshark.

01:13.770 --> 01:15.000
So this is Wireshark.

01:15.660 --> 01:21.690
This will be my destination CDB to server node and then obviously the source IP address.

01:22.500 --> 01:23.610
I guess I didn't put it the source.

01:23.610 --> 01:24.360
We don't really care.

01:24.360 --> 01:30.210
But then if the destination and the port is four for three, this is the Raspberry Pi that is running

01:30.210 --> 01:36.660
a node node actually a node server running a CDB two and let's go ahead and do a curl.

01:37.080 --> 01:42.750
And since it's insecure because I have a self signed certificate, I had to do this and then do setups.

01:42.750 --> 01:44.070
They do 192.

01:44.430 --> 01:47.070
I think it's just Raspberry Pi one.

01:47.340 --> 01:48.240
I think that's it.

01:48.660 --> 01:50.460
Boom, just like that.

01:50.460 --> 01:55.200
If we do that and go back to this, look at this.

01:57.040 --> 01:58.390
This is what happened.

01:58.750 --> 02:05.470
We opened a brand new connection DHCP and there is the TLS and I'm using TLS 1.2 because my Raspberry

02:05.470 --> 02:13.210
Pi have an old version of whatever open SSL, Libra, whatever, and that doesn't have TLS 1.3.

02:13.210 --> 02:18.160
So it uses TLS 1.2 for communication that does hello, all that stuff.

02:18.160 --> 02:22.060
And then everything is just application data, application data, application data which is encrypted

02:22.960 --> 02:23.920
pretty bad ish.

02:23.920 --> 02:24.490
Right.

02:24.580 --> 02:26.860
Otherwise we cannot see stuff, right?

02:27.400 --> 02:29.470
We cannot see the HTTP two protocol.

02:29.470 --> 02:33.250
It's everything is encrypted and until the end that's the only thing we can see.

02:33.280 --> 02:33.730
Right?

02:34.120 --> 02:44.200
So what we want to do is do the following, go to curl and there is a key that curl and also most browsers

02:44.200 --> 02:53.350
listen to and a little bit dangerous, but it will spit out all the keys it used in the communication

02:53.350 --> 02:57.850
that if Hellman symmetric keys and all that stuff that generated by different helmet and spit up in

02:57.850 --> 02:58.480
that directory.

02:58.480 --> 03:07.210
So all you need to do is just do export and I think it's called SSL key log file and you say equal that

03:07.210 --> 03:14.260
you do export in in Linux and Mac and Windows, it's set path right or you go from right to click this

03:14.260 --> 03:18.100
PC and go to environment variable global and set that key.

03:18.100 --> 03:20.500
And then you say where's the where do you want the key?

03:20.500 --> 03:21.460
I'm going to put it here.

03:21.460 --> 03:22.420
Users.

03:22.840 --> 03:29.650
Hussain Nasser I think I have a folder called Tim Keys and I'll call it at Key, literally just just

03:29.650 --> 03:30.190
like that.

03:30.790 --> 03:32.110
So now this is the path.

03:32.110 --> 03:35.530
And now if I do a crawl.

03:38.030 --> 03:46.610
Daniel will read that and we'll spit out the keys that we use for symmetric encryption in that file

03:46.610 --> 03:47.600
in the puppy.

03:48.470 --> 03:51.830
So now if I copy that puppy and.

03:52.540 --> 04:02.710
I go to Wireshark, play this stuff and go to I believe it's Wireshark preferences, protocols and then

04:02.710 --> 04:06.610
go all the way, find TLS, find TLS boom.

04:06.610 --> 04:10.630
And then there is a pre master secret log file, right?

04:10.630 --> 04:16.660
And then you just say, yo, go directly to the path and then just go poof.

04:16.690 --> 04:17.800
Select that key file.

04:17.800 --> 04:17.980
See?

04:18.010 --> 04:18.640
Did you see that?

04:18.640 --> 04:23.170
This is there is the key file that got generated and called generated at for us.

04:23.170 --> 04:23.620
Right.

04:23.620 --> 04:26.680
And then we do okay.

04:27.490 --> 04:35.740
And now if I go back every time basically we generate we we make this call curl will always write the

04:35.740 --> 04:37.180
new keys for us.

04:37.210 --> 04:45.280
And when it does, Wireshark will actually read those keys and like this beautiful thing.

04:45.430 --> 04:45.820
Look at that.

04:45.820 --> 04:46.870
HTTP two.

04:46.870 --> 04:47.620
Beautiful.

04:47.620 --> 04:48.600
Let's go through that now.

04:48.640 --> 04:54.970
Now that we had decrypted Wireshark, we can actually look at this stuff and explain everything.

04:54.970 --> 04:56.170
How about we jump into it, guys?

04:56.170 --> 04:57.250
All right, so what do we did?

04:57.280 --> 05:00.640
We made a get request to the index page.

05:01.090 --> 05:03.370
So this technically is just a single request.

05:03.370 --> 05:05.500
So what do we do is beautiful?

05:05.500 --> 05:06.980
Send ach.

05:07.000 --> 05:07.330
All right.

05:07.330 --> 05:08.890
And then client Hellotel is 1.2.

05:08.890 --> 05:10.480
So it's going to be longer, right?

05:10.480 --> 05:13.570
It's going to be 241.2 because basically.

05:13.570 --> 05:13.760
Right.

05:13.780 --> 05:17.200
Because we say, hey, I support this, I support that, I support everything.

05:17.200 --> 05:18.490
Let's use this for key exchange.

05:18.490 --> 05:21.880
Let's use this for is just so, so much madness.

05:21.910 --> 05:22.870
Get to the point.

05:22.900 --> 05:23.980
Get to the point.

05:23.980 --> 05:24.400
Right.

05:24.400 --> 05:25.810
It's just get to the point.

05:25.840 --> 05:27.850
TLS 1.3 gets to the point immediately.

05:27.880 --> 05:29.270
The US 1.2 is this okay?

05:29.320 --> 05:29.710
A server.

05:29.710 --> 05:34.660
Hello, here's my certificate and then let's agree on symmetric key for this algorithm.

05:34.660 --> 05:37.690
Let's agree on on on key exchange.

05:37.690 --> 05:42.360
All these are I go to them and says, okay, we'll use development or RSA publish.

05:42.610 --> 05:50.200
Hopefully we're not using RSA for a key exchange because just a bad idea not perfectly forward you that

05:50.200 --> 05:56.380
key exchange change over stick and finally the first packet of data look at this beautiful thing the

05:56.380 --> 05:58.780
client now this is the server actually.

05:58.960 --> 06:01.150
Oh the server since the first packet.

06:01.390 --> 06:02.740
Interesting.

06:02.950 --> 06:06.790
The server which is a one sends the client which is moi.

06:06.820 --> 06:15.310
This is ten, it sends an entity packet and thanks to Ms. you Wireshark, we can now actually look at

06:15.310 --> 06:18.070
the packet and look at this.

06:18.070 --> 06:25.720
This is the most important piece stream ID so stream it reserved apparently from my my initial research

06:25.720 --> 06:33.100
for settings and windows update and and and things window update that the packet sizes and things like

06:33.100 --> 06:40.510
that for system management so stream zero right so now server says okay here's me, this is stream zero.

06:40.510 --> 06:42.280
Let's start using this channel.

06:42.280 --> 06:42.820
Right.

06:42.820 --> 06:48.640
And then we talked about V two that that single TCP connection have multiple streams.

06:48.640 --> 06:52.480
So, so obviously the client says ACH and I'm going to ACH.

06:52.490 --> 06:58.600
It's probably this ACH is, is for a previous TLS thing and like, like this magic.

06:59.620 --> 07:04.360
I'm going to explain that the client sends a magic bytes.

07:04.360 --> 07:05.320
It's called magic bytes.

07:05.320 --> 07:08.560
Sometimes magic numbers, sometimes called connection prefix.

07:08.560 --> 07:13.690
And the main reason of this is to confuse every single HTTP server out there.

07:14.020 --> 07:21.790
The main reason we're sending that is that if there is if the back end server supports STB one, right,

07:21.790 --> 07:28.480
we we will confuse them by saying, okay, so let's send some random number so that all bad clients

07:28.900 --> 07:34.480
write bad servers that are receiving this stuff will freak out and disconnect immediately.

07:34.500 --> 07:35.050
Right.

07:35.380 --> 07:41.140
So this is the kind of of a cleaning the pipe, the clogged pipe kind of a thing.

07:41.170 --> 07:41.450
Okay.

07:41.590 --> 07:42.790
Just send it over.

07:42.790 --> 07:46.660
So we know that SDB two, is it required?

07:46.660 --> 07:47.980
I don't believe so.

07:47.980 --> 07:51.490
Because during TLS.

07:51.490 --> 07:57.100
Hello, by the way, guys, we in the during the handshake, I hope it's somewhere here.

07:57.100 --> 08:05.710
It's called the application layer protocol negotiation and we say hey during TLS hello I support H two

08:05.710 --> 08:08.470
server if you support H to let's connect to this too.

08:08.470 --> 08:14.890
And when the server hello starts they say okay, I agree on edge too and they will communicate with

08:14.890 --> 08:15.430
edge to it.

08:15.460 --> 08:16.060
There you go.

08:16.270 --> 08:20.830
So Server says, hey, let's talk too because I understand issue two.

08:20.830 --> 08:23.380
So I don't believe we need the magic.

08:23.380 --> 08:23.950
Right?

08:23.950 --> 08:25.180
I might be wrong.

08:25.690 --> 08:27.580
The magic number here.

08:27.730 --> 08:34.660
The magic packet is sent because of another method that is basically the HTTP upgrade.

08:34.660 --> 08:39.790
So I don't think personally we need that to be honest because we just agreed.

08:39.790 --> 08:41.980
Why are you sending me an extra dump package?

08:41.980 --> 08:42.260
Right.

08:42.970 --> 08:47.200
That might not be the case in case of like proxies.

08:47.230 --> 08:47.500
Right.

08:47.500 --> 08:50.380
But if a proxy supports the B two is going to respond.

08:50.380 --> 08:51.040
Well, it should be two.

08:51.070 --> 08:51.670
So I still.

08:51.710 --> 08:53.060
I don't think we need the magic.

08:53.060 --> 08:53.530
Right.

08:53.660 --> 08:54.950
Which is that number.

08:54.980 --> 08:55.910
I might be wrong, though.

08:56.360 --> 08:57.770
The servers now.

08:58.890 --> 09:00.310
But look at the stream, guys.

09:00.330 --> 09:02.850
What did what stream did we use to send that stream?

09:03.020 --> 09:04.050
It's its own stream.

09:04.050 --> 09:05.040
It's a magic stream.

09:05.050 --> 09:05.700
How about that?

09:05.700 --> 09:07.440
Oh, if I continue.

09:07.440 --> 09:08.700
Now, look at this.

09:09.860 --> 09:15.230
Now the sitting is also on stream zero.

09:15.230 --> 09:21.130
Now, this is now the client saying, hey, I support maximum of 100 streams.

09:21.140 --> 09:22.130
You can put.

09:22.370 --> 09:23.190
You can send.

09:23.240 --> 09:24.260
You can establish.

09:24.260 --> 09:25.340
Maximum 100 stream.

09:25.430 --> 09:25.970
Who is this?

09:25.970 --> 09:26.930
This is the client.

09:26.960 --> 09:29.270
The client supports up to 100 streams.

09:29.270 --> 09:36.440
So that's curl send saying, hey, I can create 100 streams at a point and send it all over to you.

09:36.440 --> 09:36.910
Right.

09:36.920 --> 09:38.570
More than that, I don't support.

09:38.570 --> 09:38.800
Right.

09:38.900 --> 09:42.350
This is obviously a logical thing that the client and the server agree to.

09:42.380 --> 09:47.810
That's part of the setting and we send it to stream zero and the server sends back.

09:47.810 --> 09:48.860
This is the server right now.

09:48.860 --> 09:49.730
This is still the client.

09:49.730 --> 09:54.290
This the client send on the stream zero, which is the same channel, send some more information.

09:54.290 --> 09:58.910
The Windows update is like this is the my size, this is the stream identifier.

09:58.910 --> 10:03.710
This is the it's like the TCP agreeing on the window size.

10:03.710 --> 10:06.170
But at the at the higher level, a higher layer.

10:06.170 --> 10:15.350
And the first beautiful piece of data we're sending the headers and guess what, the headers are sent

10:15.620 --> 10:20.870
on a different packet then the data self and we know why guys.

10:20.870 --> 10:21.020
Right.

10:21.020 --> 10:27.530
Because we need to send the headers first so the server can, can make the decision before we actually

10:27.530 --> 10:28.460
send the data.

10:28.460 --> 10:30.830
And that's very, very, very important.

10:30.830 --> 10:31.140
Right.

10:31.190 --> 10:33.470
So look at that actually.

10:34.700 --> 10:36.560
What, what stream did we use?

10:36.560 --> 10:40.280
We use a brand new stream because now we're sending actual data.

10:40.280 --> 10:43.530
When I say data, I'm talking about the logical part of it, right?

10:43.550 --> 10:46.310
Stream zero is reserved for setting and system stuff.

10:46.310 --> 10:54.260
Stream one is the first request that we sent, which is the get request and we sent as part of it what

10:54.260 --> 11:00.080
we sent the data, which is the headers right as part of it, OC headers length, we send the get request.

11:00.080 --> 11:01.640
Obviously this is what we talked about.

11:01.640 --> 11:05.810
Path slash squeamish DPS authority.

11:05.810 --> 11:06.740
That's the server.

11:06.770 --> 11:08.720
Raspberry Pi one user agent.

11:08.720 --> 11:15.890
Look at that curl I'm using 770 everything basically the headers and beautiful Wireshark just shows

11:15.890 --> 11:19.040
us everything because we decrypt it right settings.

11:19.040 --> 11:24.890
What is this the server uses still anything settings has to go stream zero right.

11:24.890 --> 11:29.210
And now now TCP takes action because we send a lot of stuff from the client.

11:29.210 --> 11:36.950
So the servers just say, okay, aq, i aq and then it sends some more setting stuff just to agree on

11:36.950 --> 11:38.690
the streams and agree on stuff.

11:38.690 --> 11:39.170
Right.

11:39.680 --> 11:41.000
Still on stream zero.

11:41.000 --> 11:41.420
Right.

11:41.420 --> 11:45.200
But did it receive the headers yet?

11:45.230 --> 11:46.340
We still don't know.

11:46.940 --> 11:48.980
The client acknowledges the settings.

11:48.980 --> 11:49.490
Right.

11:49.490 --> 11:53.240
So there is a lot of chatter going in this in the stream zero.

11:53.270 --> 11:54.230
The system stream.

11:54.230 --> 11:55.220
Right, whatever is called.

11:55.220 --> 11:56.630
I just made up this name by the way.

11:57.290 --> 12:01.820
And now the server 81.

12:01.820 --> 12:02.960
No, there's a client.

12:02.960 --> 12:03.860
No this is the server.

12:03.860 --> 12:04.640
The server.

12:05.210 --> 12:05.990
Look at that.

12:06.020 --> 12:10.160
The server actually starts sending the data because what is the get.

12:10.160 --> 12:11.570
The request doesn't have anything.

12:11.720 --> 12:13.820
It has only headers most of the time.

12:13.820 --> 12:20.060
Sometimes the URL parameter, if you have that, it's going to be snuck out as part of that the data

12:20.060 --> 12:24.530
packet but header the data, the records don't have body, right.

12:24.710 --> 12:27.830
If it was a post request then we might send another request.

12:27.830 --> 12:30.440
But look at this in stream ID one.

12:30.710 --> 12:36.380
We know that I'm using the same stream for request and reply and response.

12:36.530 --> 12:41.570
So you don't have this problem of TB smuggling or silly stuff like that.

12:41.570 --> 12:47.120
Feel free to send as many stuff as we want because we tag every request with a stream ID.

12:47.120 --> 12:47.600
Right.

12:47.780 --> 12:48.170
All right.

12:48.170 --> 12:53.930
So now we're sending back I'm sending back my headers application dot JSON data.

12:53.930 --> 12:55.430
This is all my headers.

12:56.000 --> 13:03.650
And obviously what what Wireshark does here is it group stuff together as much as possible.

13:03.650 --> 13:09.050
I see it says reassembles two TLS segments into one just for us for convenience.

13:09.050 --> 13:11.750
So this was probably two segments coming.

13:11.750 --> 13:15.680
But Wireshark just group them together so he can show us to us, right?

13:15.680 --> 13:16.100
Yeah.

13:16.100 --> 13:20.840
So hypertext transfer protocol number two.

13:20.840 --> 13:21.770
And this is the data.

13:21.770 --> 13:22.940
What do we send?

13:23.150 --> 13:24.500
What did we send, guys?

13:24.650 --> 13:26.090
We send the actual data.

13:26.090 --> 13:30.590
And if we looked at this part like that, that's the complete part of the data.

13:30.830 --> 13:32.750
That's a beautiful JSON that we get.

13:32.750 --> 13:33.740
I guess I didn't show it.

13:33.740 --> 13:34.190
Huh.

13:34.220 --> 13:37.640
It's it was that's that's basically the result.

13:37.640 --> 13:38.900
It's the JSON object.

13:39.710 --> 13:40.190
All right.

13:40.190 --> 13:42.650
Again, on watch stream a stream one.

13:42.650 --> 13:43.490
All right.

13:43.490 --> 13:46.400
And the client says, yo, I acknowledge it.

13:46.400 --> 13:49.940
And here's some alert that says, okay, we're about to close.

13:49.940 --> 13:55.610
I think this is a TLS 1.2 things because Curl just closes the stuff because it sends all the data,

13:55.610 --> 13:56.030
right?

13:56.030 --> 14:03.380
So the client says Fin Finnick and the server say Fin V-neck and then we exit.

14:03.380 --> 14:07.460
And there is one packet there which is out of order and that's it.

14:07.700 --> 14:08.750
So that's.

14:08.990 --> 14:10.130
One request.

14:10.430 --> 14:12.140
So we got two streams.

14:12.140 --> 14:17.150
One stream is the system stream stream zero and then stream one, which has our first request.

14:17.300 --> 14:22.740
What if I send to request guys in the same TCP connection in parallel?

14:22.760 --> 14:23.480
Can I do that?

14:23.510 --> 14:25.270
Of course you can, my friend.

14:25.280 --> 14:26.000
Let's do it.

14:27.030 --> 14:28.790
Boom, boom, boom, boom, boom, boom, boom.

14:28.820 --> 14:34.760
We do curl insecure, and then all we do is add a space and do the same thing.

14:34.790 --> 14:40.220
Raspberry or raspberry berry pie one.

14:40.340 --> 14:47.810
If we do that, curl is smart enough to know that step two is going to establish a TCP connection.

14:47.810 --> 14:53.270
It's going to create one stream for this request and another thing for this request.

14:53.270 --> 14:53.530
Right.

14:53.540 --> 14:56.600
So can you get the stream numbers exactly one and two?

14:56.600 --> 14:58.160
Because zero is system.

14:58.280 --> 14:59.420
Let's try this out.

14:59.990 --> 15:01.940
Clear this out and let's do it again.

15:02.090 --> 15:05.960
Boom, boom, boom.

15:06.620 --> 15:07.310
Let's do it.

15:08.750 --> 15:09.890
Three way handshake.

15:10.370 --> 15:10.670
Hi.

15:10.670 --> 15:10.850
Hi.

15:10.850 --> 15:12.140
Hi, client.

15:12.140 --> 15:12.650
Hello.

15:12.650 --> 15:16.820
All that jazz skipping setting server sends.

15:16.820 --> 15:18.590
Hey, let's start the settings again.

15:18.600 --> 15:19.430
Stream zero.

15:20.540 --> 15:22.610
Magic stream zero.

15:22.850 --> 15:25.640
Right settings one does.

15:25.730 --> 15:27.020
I just show the magic.

15:27.140 --> 15:28.730
Is it like it's own stream?

15:28.730 --> 15:29.110
I'm.

15:29.240 --> 15:30.830
I think it's own stream, huh.

15:31.250 --> 15:32.960
Because it didn't say stream zero.

15:33.410 --> 15:34.310
Might be wrong there.

15:34.670 --> 15:35.180
All right.

15:35.570 --> 15:39.110
Setting zero Windows Update all that stuff.

15:39.920 --> 15:41.000
And here's the thing.

15:41.000 --> 15:47.270
First request, first request on stream ID one, setting the data get.

15:47.420 --> 15:48.050
Look at that.

15:48.440 --> 15:51.200
If I go, that's just part of the settings.

15:51.200 --> 15:55.460
I'm going to ignore this and the data responds back on stream one.

15:55.460 --> 16:01.640
So we send the get request and that's the response of the get request on the same stream stream ID one.

16:02.300 --> 16:04.460
And that's just this JSON data, right?

16:04.790 --> 16:05.720
That's the application data.

16:05.720 --> 16:08.900
Look at that and look at this thing, guys.

16:09.590 --> 16:11.810
Stream ID three.

16:12.110 --> 16:13.490
Why is it three?

16:13.520 --> 16:14.990
Okay, that's interesting.

16:14.990 --> 16:18.080
We skipped stream ID two for some reason.

16:18.080 --> 16:18.590
Right.

16:19.130 --> 16:20.240
I'll, I'll take a look.

16:20.330 --> 16:22.040
I think it's a bug to be honest.

16:22.700 --> 16:24.440
Oh, my b I'm missing something.

16:24.440 --> 16:25.820
All right, so that's the second request.

16:25.820 --> 16:28.460
So stream ID three, the connection is still open.

16:28.460 --> 16:30.350
We're just sending streams, right.

16:30.530 --> 16:34.070
And then we go there and receive the data back.

16:34.070 --> 16:34.370
Right.

16:34.370 --> 16:35.390
That's the data.

16:35.660 --> 16:36.470
Awesome.

16:37.040 --> 16:39.590
Got back on the stream three.

16:39.590 --> 16:40.070
Right.

16:41.340 --> 16:43.620
Get the BAC data stream three.

16:44.650 --> 16:47.470
Acknowledge alert and then we close the connection.

16:47.500 --> 16:48.340
Can to see in the next one.

16:48.340 --> 16:49.240
You guys stay awesome.

16:49.270 --> 16:49.630
Goodbye.
