WEBVTT

00:00.150 --> 00:06.540
So we talked about the congestion control in general, but I wanted to make another lecture detailing

00:06.540 --> 00:13.410
the slow start and congestion avoidance algorithm and when do they kick in and how does the transmission

00:13.410 --> 00:14.820
look like in the charts?

00:14.820 --> 00:15.000
Right.

00:15.000 --> 00:17.580
So this is a little bit of an advance lecture.

00:17.610 --> 00:21.810
People ask about it, so I thought, I'll make a video detailing that part.

00:21.840 --> 00:23.520
Let's jump into it and discuss.

00:23.850 --> 00:29.070
So there are two conjunction algorithm basically, and they're actually more than that.

00:29.070 --> 00:34.170
But I'm sticking to this explaining those two, the slow start and the congestion avoidance.

00:34.170 --> 00:41.340
The slow start is called slow start because we start from one where the congestion window is one one

00:41.340 --> 00:43.650
MSC's maximum segment size, basically.

00:43.650 --> 00:44.160
Right.

00:44.280 --> 00:45.450
And then we start from there.

00:45.450 --> 00:46.830
So we start very slow.

00:46.830 --> 00:55.560
But also the slow start algorithm is actually increases aggressively increases the window size exponentially.

00:55.560 --> 00:56.910
And how is that work?

00:56.910 --> 01:02.790
Basically, every acknowledgement we receive, we add one.

01:02.790 --> 01:06.000
So every acknowledgement, focus on that, every acknowledgement.

01:06.000 --> 01:13.380
So if you send ten packets and you got ten acknowledgment, you're going to get ten added ten worth

01:13.380 --> 01:17.070
of RMS sizes, add it to your congestion window.

01:17.280 --> 01:17.640
Right?

01:17.640 --> 01:19.950
So that's how basically the slow start algorithm.

01:19.950 --> 01:21.270
So it's very aggressive.

01:21.300 --> 01:27.330
Compare that to the congestion avoidance, which is the second phase of the algorithm, the second phase

01:27.330 --> 01:33.360
of the congestion control, where we flip from the slow start to the congestion avoidance because there

01:33.360 --> 01:39.690
is a threshold that slow start have and once we reach that threshold flip become more conservative.

01:39.690 --> 01:40.620
What does that mean?

01:40.650 --> 01:43.980
It means once the slow start reaches a threshold, this kicks in.

01:43.980 --> 01:44.850
What does that mean?

01:44.910 --> 01:51.900
It means you're going to increase the you can continue to increase the congestion window, but only

01:51.900 --> 01:56.010
for the entire roundtrip, not every acknowledgement.

01:56.040 --> 01:57.060
What does that mean?

01:57.090 --> 02:01.740
A roundtrip is basically you send a whole roundtrip to us, like back end engineers.

02:01.740 --> 02:08.040
When you send an HTTP request, when you get back that response from the activity course, that's a

02:08.040 --> 02:10.440
roundtrip at the application layer, right?

02:10.440 --> 02:13.740
You send one request and you get back a response.

02:13.740 --> 02:14.580
That's one router.

02:14.610 --> 02:16.740
But what does that mean to the TCP?

02:16.740 --> 02:17.180
Right.

02:19.130 --> 02:21.770
A request might have 30 packets.

02:21.770 --> 02:22.160
Right.

02:22.160 --> 02:24.410
But what if only one?

02:24.440 --> 02:26.840
You got a response for one of those packets?

02:27.050 --> 02:27.860
That's not a response.

02:27.860 --> 02:29.270
That's not a whole round trip.

02:29.270 --> 02:29.730
Right.

02:29.750 --> 02:34.550
A whole round table is like when you acknowledge and receive the entire response.

02:34.550 --> 02:34.900
Right.

02:34.910 --> 02:41.810
So for the TCP, if you have a conduction window, let's say, of four packets, that's the size and

02:41.810 --> 02:43.850
you send four forth packets.

02:44.150 --> 02:48.080
A round trip is when you receive acknowledgement for the entire fourth packet.

02:48.080 --> 02:54.230
A roundtrip in this case is if you receive a an acknowledgement for the four packets, that's a roundtrip

02:54.230 --> 02:59.120
and only then you're going to get an additional one MSG size to a congestion window.

02:59.120 --> 03:02.180
So it's a little bit more conservative obviously if you think about it.

03:02.180 --> 03:05.750
So it adds slower if you think about it, right.

03:06.350 --> 03:11.690
So obviously congestion when talking must not increase the receiver window, otherwise the flow control

03:11.690 --> 03:14.000
will basically be useless in this case.

03:14.000 --> 03:14.360
Right.

03:14.360 --> 03:15.800
So we cannot exceed that.

03:16.730 --> 03:21.200
So congestion detection, what happens when we actually detect congestion?

03:21.200 --> 03:28.340
And that's basically a question that being trying to redefine what that means.

03:28.340 --> 03:34.850
There is a paper out there called the Homer paper that tries to reinvent TCP for the data center entirely.

03:34.940 --> 03:40.940
And this is one of the big things they are redefining the concept of a congestion you see in TCP.

03:42.550 --> 03:48.070
When you detect a dropped packet, that means there is a transmission timer, you send it.

03:48.070 --> 03:54.550
And if that timer ran out before we got an acknowledgement, that's a dropped packet, we consider that

03:54.550 --> 03:55.180
lost.

03:55.180 --> 04:00.070
And when that packet is lost, we detect, we assume there is a congestion.

04:00.070 --> 04:07.300
So routers in the middle, their buffer sizes have have exceeded their limit and my package was dropped.

04:07.300 --> 04:11.500
So that's what the congestion here, the home paper redefines what all that means.

04:11.530 --> 04:13.780
Go watch my coverage on my YouTube channel.

04:13.780 --> 04:17.140
If you are interested in that and if you can read the paper, you can read the paper.

04:17.140 --> 04:22.240
And if you finish this course, you can easily read that paper and understand everything in it.

04:22.240 --> 04:26.650
And that because you have the fundamentals by the by the end of this course, you should be able to.

04:27.340 --> 04:32.110
And that's that's my goal with this with these courses basically lay down the fundamentals.

04:32.290 --> 04:37.390
So so what happens when we detect conduction?

04:37.540 --> 04:38.610
Two things happen.

04:38.620 --> 04:41.950
The first thing you remember, we talked about the slow start threshold.

04:41.950 --> 04:43.870
There is a threshold where we hit.

04:44.110 --> 04:50.290
When we hit the threshold for the congestion window, we flip to the congestion avoidance, we reduce

04:50.290 --> 04:51.280
that threshold.

04:51.280 --> 04:59.560
We make it even less by how much, by whatever the number of packets that are unacknowledged that we

04:59.590 --> 05:02.470
send and we lost and we didn't get acknowledgement.

05:02.590 --> 05:07.210
However, a number of bytes is called the flight size divided by two.

05:07.240 --> 05:14.920
So I know a lot of people and some some implementation and talking about that they do just add whatever

05:14.920 --> 05:16.060
the congestion one divided by two.

05:16.060 --> 05:22.570
That's not entirely correct because the congestion window is actually greater than whatever is the flight

05:22.570 --> 05:30.100
size because you might have one segment in flight and that was detected a congestion, right.

05:30.130 --> 05:35.410
So you divide the flight size of that segment by two, not the whole congestion window.

05:35.440 --> 05:35.770
Right.

05:35.800 --> 05:40.150
Because you're going to get a larger value in this case and you can get into errors and bugs.

05:40.540 --> 05:45.700
So it's actually whatever the flight size, this number is less than this, but it can be equal.

05:45.700 --> 05:52.750
Of course, you might have your entire worth of CW and D might be lost.

05:52.750 --> 05:57.370
And that's in this case, you might be right, but most of the times you will be wrong.

05:57.670 --> 06:04.750
The second we think we do is after reducing the slow start threshold, we also reset the value back

06:04.750 --> 06:06.760
to 11s.

06:07.000 --> 06:09.220
So we essentially start over.

06:09.220 --> 06:17.450
But now when we start over, we're going to kick back the slow start algorithm Y because the CW and

06:17.450 --> 06:19.000
D is less than the threshold.

06:19.000 --> 06:26.740
So we start with the slow start, and this way we're going to reach this slow start threshold quicker

06:26.770 --> 06:28.450
than before.

06:28.450 --> 06:34.540
So it's slightly faster, but still it's going to ramp up back, right?

06:34.540 --> 06:36.340
So that's that's what we're doing.

06:36.340 --> 06:41.170
So you might say, okay, we're reducing the slow start, but isn't it eventually going to hit zero?

06:41.170 --> 06:42.040
That's bad.

06:42.040 --> 06:43.390
Well, there is a limit.

06:43.390 --> 06:47.080
The minimum slow start threshold is actually two times the maximum segment size.

06:47.410 --> 06:49.030
And this is all defined in the RFC.

06:49.030 --> 06:51.880
I'm going to reference it and it's attached to this lecture.

06:51.880 --> 06:52.720
You can look at it.

06:52.720 --> 06:55.930
I highlighted the part that is important, at least in my opinion.

06:55.930 --> 06:56.950
So take a look at that.

06:56.950 --> 06:57.400
It's cool.

06:57.400 --> 06:58.360
Pretty cool stuff.

06:59.110 --> 07:05.650
Here's the chart for the slow start versus the congestion avoidance algorithm.

07:05.650 --> 07:07.060
What exactly happened?

07:07.060 --> 07:12.310
So in the Y axis here we have the number of bytes for the congestion window.

07:12.730 --> 07:16.240
You can see we start from one segment, maximum segment size.

07:16.470 --> 07:16.840
Right.

07:16.840 --> 07:18.100
Why did I add another s?

07:18.130 --> 07:19.840
Just one maximum segment size.

07:19.840 --> 07:26.200
And then we in the in the x axis, this is the time and this is the algorithm.

07:26.200 --> 07:28.300
I copied it from the ref.

07:28.300 --> 07:29.470
See page seven.

07:29.770 --> 07:30.730
Take a look at it.

07:30.730 --> 07:32.830
But the orange thing is slow.

07:32.830 --> 07:33.090
Start.

07:33.100 --> 07:33.610
Go to them.

07:33.610 --> 07:35.650
The white is the congestion avoiders.

07:35.650 --> 07:38.200
You can see this is linear, this is exponential.

07:38.200 --> 07:39.340
So let's take an example.

07:39.850 --> 07:43.210
And obviously one thing is this slow start threshold.

07:43.210 --> 07:49.270
See the dotted lines, these are the slow start thresholds and you can see they are decreasing every

07:49.270 --> 07:49.660
time.

07:50.050 --> 07:54.850
So we start with them says we increase the increase increasing curves as we get more acknowledgment

07:54.880 --> 07:56.050
up until we hit the threshold.

07:56.050 --> 08:01.990
Once we had a threshold flip the algorithm, congestion triggered the data and then once once we hit

08:02.230 --> 08:04.990
a congestion, we detected a congestion.

08:04.990 --> 08:09.370
That means some of the packets are doing drop and my transmission timer has been expired.

08:09.700 --> 08:12.970
Go down to one that really hits.

08:12.970 --> 08:19.180
If you hit this, that really hits hard, you're on your application, you're going to feel it because

08:19.180 --> 08:23.200
now you're your transmission slows down to back to one.

08:23.200 --> 08:28.450
So now your window size reduced back to one RMS, which is, what, 1500 bytes?

08:29.050 --> 08:30.130
It's actually less than that.

08:30.130 --> 08:37.990
But you get the point based on your MTU, right, the maximum transmission unit and then we start over.

08:38.200 --> 08:39.280
But look what we did.

08:39.280 --> 08:44.440
We also reduce the threshold by how much in this particular case, this much.

08:44.440 --> 08:44.650
Right.

08:44.710 --> 08:51.070
And this is basically however many in-flight packets were there that are an engine.

08:51.070 --> 08:53.380
We divide it by two and that's how we reduce them.

08:53.410 --> 08:54.760
And now we start over.

08:54.790 --> 08:56.650
De de de de de de de de de de de de de de.

08:56.950 --> 08:58.000
Had that again.

08:58.450 --> 08:59.620
Right almost there.

08:59.620 --> 09:00.790
I need to fix that chart.

09:00.790 --> 09:07.630
But yeah, once we had that threshold, we flipped to the congestion control and then we hit it again.

09:07.630 --> 09:12.640
We reduce back to one, reduce the threshold, and then we do it again.

09:12.640 --> 09:17.620
This low start, we hit that threshold, flip to the congestion and then we detected a congestion.

09:17.620 --> 09:19.900
We go down.

09:19.900 --> 09:20.830
But look at that.

09:20.830 --> 09:26.230
We already reached the two M's, which is this basically.

09:26.230 --> 09:26.680
So this is.

09:27.240 --> 09:28.020
This is what, two?

09:28.470 --> 09:33.960
We can't go lower than that based on this algorithm because we're taking the max of the flight size

09:34.080 --> 09:36.690
and then the two MSAs.

09:36.690 --> 09:37.110
Right.

09:37.110 --> 09:39.780
So that's the the maximum we can get here.

09:39.780 --> 09:40.890
The minimum, I guess.

09:40.890 --> 09:41.310
Right.

09:41.310 --> 09:44.820
So then we move on and then you can see the chart will remain this.

09:44.820 --> 09:51.120
There are a different chart based on another algorithm called the fast retransmission.

09:51.120 --> 09:52.650
That's another algorithm.

09:52.650 --> 09:57.030
I'm not going to cover it in this lecture, but maybe in the future lecture, if you're interested,

09:57.180 --> 10:02.880
drop me a question or a comment and then the course and I'll be happy to cover it.

10:02.880 --> 10:03.240
Yeah.

10:03.240 --> 10:07.350
So I try to keep it simple and not boring as much as possible.

10:07.350 --> 10:10.050
So that was the slow start versus the congestion avoidance.

10:10.080 --> 10:11.460
Hope you enjoy this lecture.

10:11.460 --> 10:12.510
I'm going to see you in the next one.

10:12.510 --> 10:13.770
Enjoy the course, guys.

10:13.770 --> 10:14.430
Thank you so much.
