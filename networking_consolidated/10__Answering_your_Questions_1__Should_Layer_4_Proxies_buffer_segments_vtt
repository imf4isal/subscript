WEBVTT

00:00.060 --> 00:01.070
Hey, guys, what's going on?

00:01.080 --> 00:05.360
And welcome to our first Q&amp;A session.

00:06.320 --> 00:09.170
For the network fundamentals course.

00:09.440 --> 00:17.690
So I do this usually on almost all my courses where every month I would pick some of your questions

00:17.690 --> 00:21.890
in the Ultimi course and then elaborate on an answer.

00:21.890 --> 00:24.830
So I try to answer them in writing as much as I could.

00:25.160 --> 00:31.430
But some of the questions really deserve more attention, you know, more time, more elaborate answer.

00:32.090 --> 00:35.120
So that's was this show, if you want to call it about, right?

00:35.120 --> 00:37.460
So there's a can you name it, so you get it monthly.

00:37.650 --> 00:46.520
I try as much as possible, but this is one for the April 20, 22 for the networking course.

00:47.180 --> 00:52.040
So let's just get a started for this particular question today.

00:52.400 --> 00:56.400
This question comes from Fano.

00:57.220 --> 00:57.810
Fano.

00:58.010 --> 01:03.140
So this is on the OSA model lecture at 528.

01:03.150 --> 01:11.620
Does the layer for proxy transport layer weight all for all the segments of the TV request or to track

01:11.630 --> 01:13.550
it transmitted one by one.

01:13.550 --> 01:15.410
So I all I answered here.

01:15.890 --> 01:16.130
All right.

01:16.130 --> 01:21.080
But I want to own kind of clarify what that question is or a little bit here.

01:21.660 --> 01:25.660
So we're talking about proxy ing, right?

01:25.670 --> 01:27.800
And proxy can happen in many, many layers.

01:27.800 --> 01:28.070
Right?

01:28.550 --> 01:33.910
So at layer four, we see TCP segments and vitamins.

01:34.010 --> 01:37.630
And you should really watch this after you've finished the course.

01:37.640 --> 01:42.130
So you have a whole idea about kind of the basic fundamentals, right?

01:42.860 --> 01:48.910
So in layer four, we have access to the ports, we have access to the IP addresses, right?

01:48.920 --> 01:49.850
And that's pretty much it.

01:50.510 --> 01:54.920
We can't really access the content because the counter could be encrypted by higher layers, the application

01:54.920 --> 01:55.170
layers.

01:55.190 --> 01:55.360
Right.

01:55.550 --> 01:58.460
So that's that's the only thing we have access to.

01:59.180 --> 02:04.340
You know, if we go a little bit higher, we can have access to the connections and the metrics and

02:04.340 --> 02:10.580
the counters of the file descriptors and and how long the connection was alive, all that stuff.

02:10.580 --> 02:10.760
Right.

02:10.760 --> 02:11.840
But we don't.

02:12.050 --> 02:14.210
So I layer four segments and port.

02:14.990 --> 02:22.790
So the question is should I wait when I receive these proxies, when I receive these segments, right.

02:23.030 --> 02:27.590
I need to take this segment and for them to do the actual destination.

02:27.890 --> 02:28.190
Right.

02:28.880 --> 02:29.150
Yeah.

02:29.330 --> 02:31.070
So I like waiting to see that question anymore.

02:31.400 --> 02:31.700
So.

02:32.730 --> 02:40.440
When there is a layer for proxy or a reverse proxy or a load balancer, the IP address that.

02:41.390 --> 02:43.590
It receives is itself.

02:43.820 --> 02:46.820
So it's like you're talking to the load balancer directly.

02:47.210 --> 02:47.540
Right.

02:48.170 --> 02:55.520
But the load balancer itself need to turn around and send whatever you did to the back end, to the

02:55.520 --> 02:57.140
actual real back it.

02:57.710 --> 02:59.570
Now in layer seven.

03:01.190 --> 03:11.720
We need to literally read all the data that we receive and buffer it in order to make sense of it.

03:12.440 --> 03:18.110
Because an FTP application layer could get requests.

03:18.110 --> 03:19.010
Could be.

03:19.980 --> 03:21.690
Composed into multiple segments.

03:21.870 --> 03:30.090
So we need to read all the segments, buffer it up in the proxy, in the load balancer and move up to

03:30.090 --> 03:30.660
the layer.

03:30.870 --> 03:31.860
So, so that's layer four.

03:31.860 --> 03:36.210
So now move up layer five and there's the connection, terminate the connection because it's a brand

03:36.210 --> 03:42.300
new connection and then move up all the way up the move to layer six, do the decentralization move

03:42.300 --> 03:45.420
all the way through the layer seven, layer six.

03:45.750 --> 03:50.460
The character can describe the tiles because you have to you need to look at the data.

03:50.830 --> 03:55.590
Okay, so layer seven and then you move all the way through the layers of application and then make

03:55.590 --> 03:56.280
sense of that.

03:56.280 --> 04:05.850
And then only then you can route the request and rewrite a completely new connection to the backend,

04:06.180 --> 04:08.880
new segments, everything is brand new.

04:09.060 --> 04:11.130
You just write it to the back end, right?

04:11.430 --> 04:13.500
So there is a new connection, nothing else new.

04:13.500 --> 04:13.920
Everything.

04:14.400 --> 04:14.880
And then.

04:15.970 --> 04:23.050
You can choose based on the higher level protocol if it's stateless or not, to load balance these requests.

04:23.830 --> 04:27.910
So if you receive one request, you can go to this back end if you're safe.

04:27.920 --> 04:29.140
And that, of course, you can go to this back.

04:29.500 --> 04:29.950
That's fine.

04:30.400 --> 04:34.150
But in layer four, you can't do that.

04:35.210 --> 04:40.610
If you establish a connection with the load balancer, a layer four, Lloyd Bentsen, layer seven,

04:41.060 --> 04:47.390
then it becomes the final destination when it comes to layer four and layer five.

04:47.630 --> 04:47.920
Right?

04:47.930 --> 04:52.070
It is defined as the initial when it comes to the connection that your connection ends here.

04:52.730 --> 04:53.330
That's true.

04:54.380 --> 05:00.080
But the layer four load balancer need to turn around and talk to an actual back into.

05:01.550 --> 05:01.910
Right.

05:02.450 --> 05:06.890
So it needs to re-establish a brand new connection on the back end.

05:08.130 --> 05:08.880
And here is the thing.

05:11.010 --> 05:15.870
Because it doesn't know the content of that connection.

05:16.380 --> 05:19.920
It is responsible to make that connection sticky.

05:20.610 --> 05:22.980
That means any segment you receive.

05:24.020 --> 05:30.200
To the load bands are on connection one and this connection is uniquely identified by the source partners

05:30.200 --> 05:35.690
IP Destination Port Destination IP Destination port is the load balancer port destination IP is the

05:35.690 --> 05:36.590
load balancer IP.

05:36.940 --> 05:43.370
Then this unique connection mustache to one and only one.

05:44.690 --> 05:49.070
Back end you cannot send when you receive a segment on this connection.

05:49.730 --> 05:50.130
Right.

05:50.690 --> 05:54.320
It has to go to one, two as a certain connection to the back end.

05:54.620 --> 06:00.860
And if you send another segment on the same connection, it always has to go to the same backend and

06:00.890 --> 06:02.420
same connection to the back end.

06:02.690 --> 06:07.460
So there is a path that is sticky that you have to follow it all the time.

06:08.550 --> 06:08.750
Right.

06:08.760 --> 06:10.280
So that's that's the difference here.

06:10.850 --> 06:14.660
Now it's up to you as a designer of this load balancer.

06:15.170 --> 06:17.120
And let's go back to Thanos question.

06:17.990 --> 06:22.670
Should we buffer all the segments in layer four?

06:23.650 --> 06:27.880
And send all of them right to the back end?

06:28.360 --> 06:29.050
Or should we?

06:29.050 --> 06:33.790
When we receive a segment, whenever we deliver a segment, we write it to that to the back in connection.

06:34.690 --> 06:35.890
It really depends.

06:36.550 --> 06:37.120
One.

06:38.420 --> 06:44.630
Implementation can be just, hey, whenever you whenever you receive a segment decided that's the fastest

06:44.660 --> 06:45.560
if you think about it, right?

06:45.980 --> 06:49.970
Because if you buffer there is a latency, you're buffering, you're waiting.

06:50.780 --> 06:52.640
But sometimes sometimes we need to wait.

06:54.320 --> 06:54.590
All right.

06:56.660 --> 07:01.820
And the only thing I think I can think of when it comes to this, because there are maybe use cases

07:01.820 --> 07:08.090
I'm not aware of, but one use case is if you empty you on the front end, which is the loud bands that

07:08.090 --> 07:14.720
a client side is different than the MTU on the back end, which is the load balancer back end.

07:15.350 --> 07:20.030
And in this particular case, you need to buffer those segments.

07:20.060 --> 07:22.070
Wait, wait, wait, wait, wait.

07:22.490 --> 07:25.730
And then once you have enough for that.

07:26.730 --> 07:28.050
Destination empty you.

07:28.080 --> 07:31.980
You can write one big segment that fits the back end.

07:31.980 --> 07:33.370
Empty you write.

07:33.690 --> 07:34.890
So this way you buffer.

07:35.160 --> 07:37.410
So you like, let's say three segments or five segments.

07:37.410 --> 07:38.430
You can wait for them.

07:38.760 --> 07:42.060
And then you write one segment that represent the five, right?

07:42.480 --> 07:46.140
Assuming the back end to use larger than the front and empty you.

07:46.440 --> 07:48.270
So that's one use case that I can think of.

07:48.960 --> 07:53.880
There might be other use cases where you need to read and wait for certain information.

07:53.880 --> 08:00.720
One comes to mind is as IP or fragmentation, like when there is a lot of IPS that's coming right.

08:00.720 --> 08:05.280
All IP packets and these IP packets are fragmented and belong to one.

08:05.580 --> 08:10.050
Then you really need to buffer it up because your back might not support fragmentation and you don't

08:10.050 --> 08:16.120
want to really support back fragmentation on your back and you let the load balance or do it, for example,

08:16.120 --> 08:17.190
or the reverse proxy.

08:17.520 --> 08:18.600
So that's done a lot of use case.

08:18.600 --> 08:24.120
You just wait, wait, wait, wait for all the IP packets and just write them in a single if possible

08:24.360 --> 08:25.440
in a single segment.

08:25.440 --> 08:27.800
So that's a fantastic question.

08:28.320 --> 08:37.260
As you design these kind of back end, these fundamental networking really comes in handy.

08:37.800 --> 08:42.360
Once you understand all these kind of things, it becomes really interesting.

08:43.300 --> 08:43.560
Uh.

08:44.940 --> 08:47.730
To design a proxy from scratch.

08:47.940 --> 08:56.430
Knowing these fundamentals, because you can optimize, you can be more performant, right?

08:56.580 --> 09:03.630
You can you can write your application in a way that is more performant and and avoid any latency that

09:03.660 --> 09:04.380
might be there.

09:04.710 --> 09:09.600
Or if you run into a problem, you kind of understand what is happening here.

09:09.870 --> 09:16.500
So if you're using engine X as a layer for app, understand that sometimes index Baidu does buffer.

09:16.560 --> 09:17.820
I don't know what are the cases.

09:17.820 --> 09:23.640
We can look it up easily in the dark red, but if it's buffer, that means there is a time delay here.

09:23.970 --> 09:25.590
And can you configure this or not?

09:25.830 --> 09:30.120
All these questions really becomes in the advance section.

09:30.120 --> 09:37.760
You really in the tuning and the advance building proxies, which is which is really very lucrative.

09:37.840 --> 09:45.330
You might see with them Kubernetes and microservices, architecture proxies is really, really big things

09:45.330 --> 09:46.110
now these days.

09:46.290 --> 09:53.520
So if you know these building fundamental and those building proxies is really huge and this is not

09:53.610 --> 09:58.230
what the course is about, this is its own course, just proxies and load balancer.

09:58.260 --> 09:59.360
That's why I didn't mention here.

09:59.370 --> 10:02.760
I'll be going to talk about it obviously when you ago was asking a question.

10:03.000 --> 10:05.230
But this is not the intent of this part.

10:05.370 --> 10:09.750
Of course, this is this is a networking course to understand these backends.

10:09.750 --> 10:15.510
But feel free again, ask these fantastic questions because we're going to keep this show going every

10:15.510 --> 10:15.870
month.

10:16.290 --> 10:21.660
You're going to get a new lecture and a brand new section talking about that.

10:22.690 --> 10:23.470
Enjoy the course.

10:23.560 --> 10:24.250
See you in the next one.
