WEBVTT

00:00.120 --> 00:07.110
Now that we have an idea about the UDP protocol, how about we actually see it in action, your guys?

00:07.120 --> 00:12.150
So for this lecture, we're going to use this fantastic tool that's called TCP dump.

00:12.150 --> 00:21.180
And if you haven't already watched the IP section section lectures, you would have seen this tool already.

00:21.180 --> 00:24.930
We used it to capture IP packets, ICMP and ARP.

00:24.930 --> 00:27.690
Now we're going to use it to capture UDP packets.

00:27.690 --> 00:32.640
And the most popular UDP protocol is actually DNS.

00:32.640 --> 00:39.840
So how about we actually do a DNS query and then capture it using TCP DOM because yeah, TCP done while

00:39.840 --> 00:41.640
it was called TCP.

00:41.670 --> 00:42.120
Right.

00:42.120 --> 00:44.460
It actually can capture almost all protocols.

00:44.820 --> 00:45.750
Let's get started.

00:46.170 --> 00:52.830
So what are we going to do here is I want dash end, which means give me all the only the numbers I'm

00:52.830 --> 00:56.970
interested in the numbers do in the verbose mode.

00:56.970 --> 00:59.160
So I need as much details as possible.

00:59.160 --> 01:00.960
Capture on end zero.

01:00.960 --> 01:06.840
Again, if you want to find your interface, do an if config or just remove that altogether, it will

01:06.840 --> 01:08.490
capture more stuff.

01:08.710 --> 01:09.090
Right.

01:09.510 --> 01:13.560
And what we the next thing we're going to do is actually do a filter.

01:13.560 --> 01:13.980
Right?

01:13.980 --> 01:25.680
And since I'll be using Google's DNS server to find out the IP address of my domain hosting also dot

01:25.680 --> 01:26.030
com.

01:26.040 --> 01:31.320
So in order in this case, what we're going to do is actually I want to filter on eight, eight, eight,

01:31.320 --> 01:35.850
eight, whether it's the source or if it's the destination.

01:36.300 --> 01:45.030
So if I'm sending a DNS datagram, a UDP datagram to eight, eight, eight, eight or if I'm receiving

01:45.030 --> 01:48.090
a reply DNS reply, I want to capture both.

01:48.450 --> 01:55.080
So with that being captured, let is let us have a capture and now I'm going to do a DNS query.

01:55.110 --> 01:56.370
How do we do DNS?

01:56.880 --> 02:01.740
There's this beautiful command that's called DNS lookup and I know it's a little bit early in the course

02:01.740 --> 02:02.360
right there.

02:02.370 --> 02:03.450
Talk about DNS.

02:03.450 --> 02:12.390
I have a dedicated DNS lecture that you're going to see in the later in the course that's in the protocol

02:12.390 --> 02:12.930
section.

02:12.930 --> 02:16.410
So make sure to check that out for more details about the.

02:16.740 --> 02:18.240
But we know DNS, right?

02:18.780 --> 02:23.880
DNS is the protocol that allows us to given a domain.

02:24.090 --> 02:30.930
Give me the IP address so I can connect to it right through TCP or, you know, UDP.

02:30.930 --> 02:34.680
And what I'm going to look up is hosting also dotcom, which is my website.

02:34.680 --> 02:41.310
And in this lookup, this tool takes two parameters actually more than that, right?

02:41.610 --> 02:48.090
It takes what do you whatever you want to look up and what resolver you want to use, which is pretty

02:48.090 --> 02:48.960
cool, right?

02:49.290 --> 02:52.980
Eight, eight, eight is the popular Google result DNS resolver.

02:52.980 --> 02:56.430
So I'm going to go ahead and do boom and immediately we get an answer.

02:56.430 --> 03:00.240
So I used eight, eight, eight, eight and I got this is my IP address.

03:00.240 --> 03:04.920
And actually I have multiple ones because technically I'm hosted on Google my website.

03:04.920 --> 03:07.620
So I have like four different IP addresses.

03:07.620 --> 03:09.720
Pretty cool load balancing there.

03:09.720 --> 03:10.710
Thank you, Google.

03:11.670 --> 03:13.950
So now I want to go back and see what we captured.

03:14.640 --> 03:20.370
So this is the first IP packet that we captured, right?

03:20.670 --> 03:22.890
This IP IP packet.

03:23.100 --> 03:29.790
Remember, DNS keeps saying it is UDP sits inside of IP.

03:29.790 --> 03:30.330
Right.

03:31.080 --> 03:31.830
And.

03:32.650 --> 03:34.150
This IP packet.

03:34.150 --> 03:37.150
This is the time that it was issued.

03:37.390 --> 03:47.140
This is the differentiated services zero total time to live 64 The ID, I'm not sure what this is.

03:47.140 --> 03:47.830
I keep forgetting.

03:47.830 --> 03:48.880
What is this I.D.?

03:48.880 --> 03:55.690
I believe this is the I.D. of the fragment, but I would expect it this to be zero because I don't have

03:55.690 --> 03:56.410
any fragments.

03:56.410 --> 04:02.680
But I guess every every IP packet is fragmented by default.

04:02.680 --> 04:05.380
If it's not fragmented, it has a zero offset.

04:05.380 --> 04:06.910
And that's the ID maybe.

04:07.600 --> 04:09.130
And there is no flag.

04:09.130 --> 04:11.290
So it's not fragmented or anything like that.

04:11.950 --> 04:14.590
This is the IP header.

04:14.590 --> 04:16.360
Again, we're still looking at the IP header.

04:16.360 --> 04:24.160
So the protocol version in the IP header that is 17 which correspond to UDP.

04:24.160 --> 04:32.650
So now TCP dump actually detected that the I am the content inside it actually UDP and the length of

04:32.650 --> 04:35.950
that IP packet is around 63 bytes.

04:36.040 --> 04:36.340
Right.

04:36.340 --> 04:43.810
That includes obviously the content which is the UDP datagram plus the IP hitters which is that on 20.

04:44.830 --> 04:46.570
And now we go deeper a little bit.

04:46.570 --> 04:48.970
Now we're inside, right?

04:49.270 --> 04:52.930
This is still these two pieces right, that I'm highlighting.

04:52.930 --> 04:56.770
These are the IP, the destination IP, the source IP.

04:56.770 --> 05:01.360
So they are in the IP packet, but I want you to pay attention to the last dot.

05:01.600 --> 05:01.810
Right.

05:01.810 --> 05:03.490
This is obviously not an IP address.

05:03.490 --> 05:05.620
If you look at it this way, it's an invalid run, right?

05:05.620 --> 05:09.550
But the TCP dump adds another dot and that's the port.

05:09.910 --> 05:12.170
Now that we know what ports are, right?

05:12.610 --> 05:15.940
UDP right and TCP uses the console of ports.

05:15.940 --> 05:17.950
It's a layer four concept.

05:18.460 --> 05:28.720
So now .58 63 five is my source port because I'm sending a packet from my machine, which is this IP

05:28.720 --> 05:30.580
address, 144.

05:30.670 --> 05:34.630
This is my source port, which is a randomly generated right.

05:34.990 --> 05:38.470
And then I am going to eight, eight, eight, eight.

05:38.650 --> 05:39.040
Right.

05:39.040 --> 05:43.660
Which is the Google DNS server and this is the port I'm going to.

05:43.660 --> 05:46.750
So that's the four pairs that we keep talking about.

05:46.750 --> 05:47.100
Right.

05:47.350 --> 05:48.820
Why do we need a source port?

05:48.820 --> 05:54.880
Because we need a way for for Google to reply back to us.

05:54.880 --> 06:01.090
And if it just replied using the IP address, it won't know which application to reply to because I

06:01.090 --> 06:05.110
might have thousands of applications and running and processes running on my server.

06:05.110 --> 06:10.990
So it needs this unique identifier to know exactly what to deliver the packet coming back.

06:11.350 --> 06:11.920
Cool.

06:12.790 --> 06:21.250
So the next thing, once we see a colon IP packet is done right and now we're kind of parsing the content

06:21.250 --> 06:22.400
and try TCP.

06:22.480 --> 06:25.510
I'm trying to pass the content and show you more information.

06:25.690 --> 06:26.110
Yeah.

06:26.110 --> 06:29.440
So yeah, again, these are the port.

06:29.440 --> 06:33.000
This port are part of the UDP packet diagram.

06:33.040 --> 06:38.080
So this number is what they call the DNS query ID, right?

06:38.080 --> 06:43.810
Because the UDP is stateless, you need a tag, you need a unique identifier that you send in the UDP

06:43.810 --> 06:47.470
packet so that when they reply back they give you the same number.

06:47.470 --> 06:53.650
This way if you send like 700 DNS queries and you bring them back, you know?

06:53.650 --> 06:54.070
Exactly.

06:54.070 --> 06:57.640
Oh, this query belongs to this query ID, right?

06:57.640 --> 07:02.650
So that's, that's how, you know, basically you might argue that why can't we use the source IP to

07:02.650 --> 07:03.250
source port?

07:03.580 --> 07:11.470
I guess you can, but it might not be reliable if you're in a different in an asset environment And

07:11.500 --> 07:12.190
with Nat.

07:12.220 --> 07:12.490
Right.

07:12.490 --> 07:19.720
So use a query ID saver and this is I'm asking for the record, which means I want the IP address right

07:19.750 --> 07:20.650
of that record.

07:20.650 --> 07:22.180
And this is Hosain also dot com.

07:22.510 --> 07:26.170
And yeah, that was the, that's the request I sent.

07:26.170 --> 07:26.610
Right.

07:26.890 --> 07:35.230
And 35 maybe the length of the actual UDP, I might be wrong here, but then the second IP here packet

07:35.230 --> 07:37.000
and that's a response.

07:37.000 --> 07:37.480
Right.

07:38.140 --> 07:39.590
How do I know right there.

07:39.980 --> 07:41.830
I'm going to find out again.

07:42.540 --> 07:44.720
Doesn't look looks normal.

07:45.310 --> 07:47.940
It's a high it has a higher total for some reason.

07:47.950 --> 07:49.630
It's very interesting if you think about it.

07:49.630 --> 07:50.120
Right.

07:50.170 --> 07:55.810
This IP packet coming back from Google Response, responding to us has a 120.

07:56.050 --> 07:57.850
The one we send has only 64.

07:58.420 --> 08:04.630
So maybe it took it took it was 60, but then it was increased because it didn't reach me.

08:04.630 --> 08:05.110
Right.

08:05.740 --> 08:08.890
That's one theory I guess Then protocol is 17.

08:08.890 --> 08:09.700
We know that.

08:09.700 --> 08:13.750
And the link then that's, that's large, right?

08:14.050 --> 08:18.960
I mean, when 24, it was not that large, but in grand scheme of things it is larger, right.

08:19.000 --> 08:26.920
If you think about it and then we have this is the source IP sending us.

08:26.920 --> 08:27.490
Right.

08:27.490 --> 08:32.260
We're receiving from 8888 port 53 because that's the one we targeted.

08:32.260 --> 08:33.520
Now we're flipping them.

08:33.520 --> 08:34.240
Exactly.

08:34.240 --> 08:40.300
The destination is me, my IP address, and this is the port that I originally sent.

08:40.300 --> 08:48.160
So now my machine knows exactly what process to deliver to which is in this case a the NFS lockup app

08:48.160 --> 08:48.940
that was running.

08:48.940 --> 08:49.360
Right.

08:49.810 --> 08:57.850
And then this is the query ID, This is some numbers for what they mean and this is basically the domain

08:57.850 --> 09:08.200
name right then also the code and then a record to one 621 the second 3820 one third and fourth, and

09:08.200 --> 09:09.640
that's 99.

09:09.640 --> 09:17.710
So I believe 99 if you if you 99 plus the IP headers, that will give you around 127.

09:17.710 --> 09:19.220
Yeah, that's about right.

09:19.610 --> 09:19.850
Right.

09:20.020 --> 09:22.450
So 99 is the UDP length.

09:22.780 --> 09:23.260
Right.

09:23.290 --> 09:27.160
And if you compare the A's is the answers we received.

09:27.460 --> 09:34.780
So that was actually just an investigation using TCP dump to look at the UDP packet.

09:34.780 --> 09:36.400
So see how simple it is.

09:36.400 --> 09:39.940
UDP is so simple there is nothing else except ports.

09:39.940 --> 09:43.240
That's the only thing we we actually see here.

09:44.170 --> 09:49.540
The rest of the stuff is just the content of the DNS protocol specifically.

09:49.540 --> 09:49.960
Right.

09:50.410 --> 09:52.260
This is the UDP.

09:52.560 --> 09:53.890
I hope you enjoy this lecture.

09:54.700 --> 09:55.900
Let's jump to the next one.
