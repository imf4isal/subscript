WEBVTT

00:00.030 --> 00:01.100
Alright guys.

00:01.110 --> 00:06.000
The UDP data grabbed the anatomy of the UDP diagram, guys.

00:06.420 --> 00:13.320
This is the lecture where we're going to actually take a peek in how the data actually looks like.

00:13.890 --> 00:14.160
All right.

00:14.550 --> 00:18.000
The UDP header is only for a88 byte.

00:18.000 --> 00:25.290
Actually, an IPV four is actually different than IPV six data come slides into an IP packet as data.

00:25.650 --> 00:30.690
So that acronym is exactly with its headers with its ports.

00:31.260 --> 00:37.620
Would the data that you sent the DNS request, for example, slides into the IP packets as data.

00:37.710 --> 00:42.810
Now, I probably, probably are bored of hearing this, but I'm going to keep repeating it right as

00:42.810 --> 00:45.720
just layer four slides into layer three as data.

00:45.840 --> 00:48.180
So the IP packet doesn't really care what's in it.

00:48.480 --> 00:50.460
You know, there is a bit that says protocol.

00:50.730 --> 00:59.730
So the protocol IP header now says UDP in this case get it that's that's the power here and ports are

00:59.730 --> 01:03.210
16 bit from 0 to 60 5535.

01:04.200 --> 01:08.010
That's how much ports you can address effectively in your hosts.

01:08.010 --> 01:08.280
Right.

01:08.370 --> 01:09.720
You can address this many applications.

01:09.720 --> 01:13.440
Some of them are reserved, obviously, but this is kind of all the ports.

01:15.240 --> 01:15.780
All right.

01:16.290 --> 01:17.160
I'm not covering anything.

01:17.160 --> 01:18.090
So should be good.

01:18.300 --> 01:20.640
This is how the UDP data looks like.

01:20.640 --> 01:24.120
Again, four bytes here, right?

01:24.120 --> 01:27.180
So eight bits it bits, eight bits, eight bits.

01:27.180 --> 01:31.840
And we have one row and another row and a third row.

01:31.860 --> 01:32.090
Yeah.

01:32.130 --> 01:33.870
Right for the data.

01:33.870 --> 01:37.920
So only literally one, two, three, four, five, six, seven, eight.

01:37.920 --> 01:38.160
Right.

01:38.160 --> 01:40.380
So eight bytes header, that's pretty much it.

01:40.770 --> 01:42.900
Let's talk about the source port and destination port.

01:42.900 --> 01:44.040
Very simple to understand.

01:44.040 --> 01:50.430
You have 16 bit, two by two for each port, the source port and destination port.

01:50.820 --> 01:56.860
We talked about this source port identified where this application is coming from, where this process

01:56.880 --> 01:57.480
coming from.

01:57.630 --> 01:57.870
Right.

01:58.230 --> 02:00.540
And it's unique.

02:00.540 --> 02:07.230
The unique identifier here is E each process has a unique port.

02:08.430 --> 02:10.650
You can do the math if you think about it.

02:11.660 --> 02:15.650
Let's assume all of these guys, right?

02:16.160 --> 02:18.860
Let's assume I'm going to fix the destination port.

02:19.840 --> 02:21.670
This was some little magic here.

02:22.180 --> 02:26.320
I'm going to do a port.

02:27.640 --> 02:28.140
80.

02:28.570 --> 02:30.000
I'm going to what port?

02:30.610 --> 02:34.840
That's wrong because her it is not UDP 53, which is the DNS.

02:36.020 --> 02:38.510
And we have the source board assuming this is fixed.

02:38.840 --> 02:44.780
Assuming the IP address is also fixed, which is the IP is what is the is the layer three, right?

02:45.890 --> 02:51.530
If you fix the destination port, if you fix the destination IP address and if you fix the source IP

02:51.530 --> 02:54.320
address, let's say this host isn't a jet.

02:54.770 --> 03:02.240
How many applications can send DNS packets to the same destination?

03:02.240 --> 03:08.480
Port Asia, which is 53 to the same server, which is whatever the server is fixed and from the same

03:08.480 --> 03:08.900
host.

03:10.000 --> 03:13.540
You can only 65,000.

03:14.680 --> 03:17.590
Apps or processes can uniquely send.

03:17.590 --> 03:22.120
If you spin up more than 65, five, five, three sec, whatever that number.

03:22.930 --> 03:23.560
You will fail.

03:23.890 --> 03:28.810
You cannot because you are going to occupy all your effectively ports.

03:29.620 --> 03:34.180
So that's that's something just to understand it, because I made a video about this, like what is

03:34.180 --> 03:37.150
the maximum connection limit or what is the maximum?

03:37.600 --> 03:38.500
Is there a limit?

03:39.070 --> 03:40.030
Of course there is a limit.

03:40.810 --> 03:41.600
Will you reach it?

03:41.620 --> 03:42.280
I don't know.

03:42.820 --> 03:43.480
Right, but.

03:43.750 --> 03:45.010
But this is it, basically.

03:45.280 --> 03:49.750
If you fix all these, it's all map of end of the day, you fix the destination board, you fix the

03:49.750 --> 03:54.190
destination IP address, you fix that is the source IP address and you change the source port.

03:54.640 --> 03:58.870
You can only have this much applications sending stuff from your host.

03:58.870 --> 03:59.170
Right.

03:59.830 --> 04:01.480
And that's it if you fix it.

04:01.480 --> 04:10.090
But it's almost never the case because you're never fixing things or I'm ready because what how why

04:10.090 --> 04:15.000
are all your applications sending DNS requests like different DNS requests right.

04:15.850 --> 04:16.100
To this.

04:16.100 --> 04:23.200
Say, maybe you if you have like if you built a specific app, right, that sends spin up a process

04:23.200 --> 04:31.630
and sends a DNS request, you will die after 65,000 requests because assuming they will be in parallel

04:32.050 --> 04:36.550
and they will expect there will be the response will be resolved by the operating system.

04:36.550 --> 04:38.880
Right at the end of the day, you're going to reach your limit.

04:38.890 --> 04:40.570
So just think about it here.

04:42.640 --> 04:43.480
Link that you examined.

04:43.480 --> 04:44.350
Very simple, basic.

04:44.350 --> 04:47.920
Think of what's the link of this data and then what's the sum of this whole thing.

04:48.130 --> 04:56.050
So a small checksum that is used to tell you that, hey, did this packet get corrupted or not in the

04:56.050 --> 04:56.500
way?

04:56.800 --> 05:04.480
Because at the end of the day, all of these packets go to the wire and voltage attenuation and electrical

05:04.480 --> 05:10.540
stuff and light stuff, and then a nature happens, you know, so, so a bit can be flipped.

05:11.320 --> 05:14.980
And if the bits can be flipped, one thing can be something else.

05:14.980 --> 05:18.100
So you need to check some to kind of verify the whole thing.

05:18.640 --> 05:23.140
So even if the checksum is bad, right, you still can know that this back at is better.

05:23.290 --> 05:30.010
So it's unlikely that a bit will be flipped and the checks and will be flipped by the powers of nature

05:30.190 --> 05:31.060
that will match.

05:31.060 --> 05:32.350
It's unlikely they will happen.

05:32.350 --> 05:33.810
So this is used to data.

05:34.270 --> 05:36.760
This will be used to check the integrity if that happens.

05:37.060 --> 05:37.360
All right.

05:37.390 --> 05:39.790
How about we jump into the next lecture?

05:40.240 --> 05:43.030
We're going to talk about the pros and cons of UDP.

05:43.810 --> 05:44.590
Let's do it.
