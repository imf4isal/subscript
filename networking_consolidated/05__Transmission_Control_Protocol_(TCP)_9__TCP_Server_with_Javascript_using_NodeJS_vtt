WEBVTT

00:00.030 --> 00:00.740
All right, guys.

00:00.750 --> 00:03.000
So we talked about TCP.

00:03.000 --> 00:05.250
You talked about how TCP server works.

00:05.250 --> 00:08.580
It's very interesting, you know, understanding of these fundamentals.

00:08.580 --> 00:14.760
But how about we actually build a TCP server now and I'm going to use Node.js for that JavaScript.

00:14.760 --> 00:18.180
And as usual, we're going to use a high level language and a low level language.

00:18.750 --> 00:23.670
I know CE is also called high level language, but let's be honest, it's not it's not a high level

00:23.670 --> 00:24.590
language anymore, right?

00:24.630 --> 00:25.690
It's very low level.

00:25.690 --> 00:27.240
It's close to the metal, you know.

00:27.720 --> 00:31.470
So how about we actually go ahead and create a TCP server this time?

00:31.770 --> 00:37.020
So I'm going to go ahead and create open your folder, go to my project's networking.

00:37.020 --> 00:38.070
Networking course.

00:38.370 --> 00:42.960
I'm going to create a new TCP server slash JavaScript here.

00:43.990 --> 00:45.130
Let's go ahead and do that.

00:46.150 --> 00:55.480
So I'm going to do here is create a new file that's called Indexed or MGUS, and we're going to do import

00:55.720 --> 00:56.340
net.

00:56.350 --> 01:00.010
We're going to need a library as usual net from net.

01:01.380 --> 01:06.480
This library is available by default, so we don't really need to install it, I don't believe so.

01:06.480 --> 01:09.060
We're going to do here is to create a server, right?

01:09.060 --> 01:10.110
Just like we did right.

01:10.110 --> 01:13.770
With UDP, we're going to create a server.

01:14.970 --> 01:15.330
Right.

01:15.600 --> 01:21.720
And this server will take a kind of a lesson or function, you know, and a one on a successful is going

01:21.720 --> 01:22.650
to call this function.

01:22.830 --> 01:25.470
And this is basically the end line function that's called the socket.

01:25.770 --> 01:31.470
And it's going to give us a beautiful socket the moment we get here.

01:31.470 --> 01:35.040
That means that VCP handshake has been successful.

01:35.580 --> 01:41.760
You will only get this function called when the TCP handshake is fully successful.

01:41.760 --> 01:44.130
And that means that it has been.

01:45.650 --> 01:49.010
It has been cold, you know, the Cincinnati and all that jazz.

01:49.010 --> 01:49.250
Right.

01:49.310 --> 01:56.500
So I'm going to do a let's do a console message or console log in the message itself in the in the services.

01:56.510 --> 01:56.780
Okay.

01:57.110 --> 02:01.790
TCP handshake successful with with whom exactly.

02:02.090 --> 02:05.240
I guess I can do that other, you know, template on button.

02:06.260 --> 02:06.650
Sure.

02:06.650 --> 02:08.810
Let's do different things so we can do the socket.

02:08.810 --> 02:11.240
Dope was the address actually.

02:11.660 --> 02:13.400
It's called the remote address.

02:13.730 --> 02:14.030
Right.

02:15.740 --> 02:20.180
And then we're going to do this, then we're going to do a socket dot remote port.

02:20.180 --> 02:20.540
Right.

02:20.630 --> 02:22.070
This is the client port.

02:22.070 --> 02:25.400
This is the source port effectively.

02:25.940 --> 02:30.680
But and we can choose to write something to the client back.

02:30.680 --> 02:33.650
This is how you write data to the socket and I'm going to write.

02:33.650 --> 02:34.010
I don't know.

02:34.010 --> 02:36.710
Hello, client, this is me.

02:36.710 --> 02:39.350
The server now sending a hello message.

02:39.530 --> 02:44.240
Hello client to the so this is this will fit into a TCP segment right.

02:44.930 --> 02:52.550
Speaking technically speaking here and we'll send it out if Nigel algorithm is in effect and I have

02:52.550 --> 02:57.890
acknowledgement this won't be sent until as a full segment is basically completed.

02:58.460 --> 03:03.680
So I'm going to create an event here where when we receive data from the clime, I want you to call

03:03.710 --> 03:04.370
this Bobby.

03:04.670 --> 03:05.750
I'm I know.

03:05.780 --> 03:06.620
Just like, okay.

03:06.620 --> 03:12.140
It was a received data that I still receive, right?

03:12.540 --> 03:16.100
I'm not sure we're going to data to string.

03:16.160 --> 03:18.620
I'm going to compare to to estimate because it's a byte array.

03:18.620 --> 03:21.230
I believe that's pretty much it.

03:21.230 --> 03:22.700
I'm going to add a breakpoint here.

03:22.700 --> 03:23.210
Break them out.

03:23.290 --> 03:24.680
We forgot the most important thing.

03:24.680 --> 03:25.610
What did we forget, guys?

03:25.970 --> 03:26.960
We didn't listen to up.

03:26.960 --> 03:27.320
All right.

03:28.100 --> 03:30.710
So I'm going to call it 8800 here.

03:31.490 --> 03:37.880
And again, we always listen to on a specific I just make it a habit to listen on an address that never

03:38.060 --> 03:40.460
listen to all especially if you push this code.

03:40.640 --> 03:41.690
Oh yeah.

03:42.080 --> 03:44.690
It can become really problematic, as they say.

03:45.320 --> 03:47.060
And let's initialize my project.

03:47.390 --> 03:52.160
I don't think I need to install in net, so I'm going to go ahead and run that through without installing.

03:53.420 --> 03:53.660
Yeah.

03:53.660 --> 03:54.290
That's what I thought.

03:54.740 --> 03:59.900
All right, now, what do we use in order to connect to this?

04:00.990 --> 04:01.830
Let's go to the terminal.

04:03.920 --> 04:05.570
This is our UDP stuff.

04:05.810 --> 04:06.620
We don't really need it.

04:06.950 --> 04:11.780
We can use the nets, cats, the same command, but we don't need that -- because default is TB mode.

04:12.150 --> 04:20.840
I'm going to connect you to 001 and then port wide 8800 and immediately the Nets cat will establish

04:20.840 --> 04:25.700
the Send Sinek ec and I am here and I am saying hello.

04:25.730 --> 04:32.610
I printed his anything even tells me the source port 64409 as very close to the end.

04:32.630 --> 04:32.810
Huh?

04:33.380 --> 04:35.410
And then right back to the client.

04:35.750 --> 04:36.350
Hello, client.

04:36.350 --> 04:39.140
We got a message from the client and now we can just chat.

04:39.500 --> 04:44.540
I just hit enter and that is effectively a command.

04:44.930 --> 04:47.060
So that single wide.

04:47.240 --> 04:48.800
How sad is this, if you think about it?

04:49.370 --> 04:56.630
That single inter fits into a single segment, which would be with a 40 byte header from 20 from the

04:56.630 --> 05:00.980
TCP and 20 from the IP is just sad if you think about it.

05:00.980 --> 05:01.880
Just a waste.

05:02.180 --> 05:05.090
But well, we like to waste stuff here.

05:05.290 --> 05:09.100
So here, let's say Edmond on tag.

05:10.870 --> 05:12.370
Did we get it done to data?

05:12.670 --> 05:13.000
Yep.

05:13.240 --> 05:20.530
We get it as a bi array so every bite and then finally operated enter and then obviously this is a boom

05:21.580 --> 05:27.190
and we can play with this weekend establish multiple TCP connections with the same server.

05:27.510 --> 05:31.360
Hey, let's try this as actually new tab.

05:31.660 --> 05:32.290
Can I do this?

05:33.520 --> 05:40.770
So if I do it in c12 7.0.0.1 880 8800.

05:41.380 --> 05:43.140
That is another DC v connection.

05:43.150 --> 05:47.620
Now you have two sockets running right to physical.

05:47.630 --> 05:49.930
So now we're on the session layer, right speaking.

05:50.560 --> 05:55.540
We just received so we have an ATC connection from 64409.

05:55.870 --> 05:58.270
Now that is a progression from 644 28.

05:58.690 --> 06:00.810
So that's what we have today.

06:00.820 --> 06:07.480
And, and this guy can send stuff right now apparently and enter actually in init cat.

06:07.480 --> 06:16.180
It triggers the send command here and we can still the second the first DCP action is also alive.

06:16.180 --> 06:18.850
You know, and basically this is what I want to talk about.

06:19.240 --> 06:22.900
How about we jump into it and do another lecture?

06:22.900 --> 06:27.820
We will talk about a little bit of low level details in the C writing.

06:27.820 --> 06:31.800
Is C little bit intimidating because I'm not comfortable with all the language, see?

06:31.810 --> 06:35.290
So I took this code from GitHub and I'm going to cut it out of everybody who wrote it.

06:35.290 --> 06:38.590
But how about we jump into and hope you enjoy this again.

06:38.590 --> 06:40.840
The code will be available for you guys.

06:41.080 --> 06:41.710
Thank you so much.
