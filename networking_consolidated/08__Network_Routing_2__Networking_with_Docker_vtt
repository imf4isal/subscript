WEBVTT

00:00.180 --> 00:05.940
I've been playing with Dr. Networking for the past week or so, and I thought I'll make a quick tutorial

00:05.970 --> 00:10.590
to show how Docker networking actually works.

00:10.590 --> 00:16.200
So we're going to play with the Custom Network and get a spin up a Docker container, put it in a network,

00:16.200 --> 00:21.810
going to spin up another container, but another network, and we're going to show how we can eventually

00:21.810 --> 00:23.780
make those two talk to each other.

00:23.790 --> 00:29.610
I'm going to kind of demystify some of this stuff behind Docker networking.

00:29.610 --> 00:34.560
If you're interested in this into the details of doing things, this might be for you.

00:35.010 --> 00:35.840
Let's jump into it.

00:35.850 --> 00:36.360
Okay.

00:36.360 --> 00:44.400
Let's start by spinning up a new container Apache Observer and expose it to our hosts through published

00:44.400 --> 00:45.160
Port 80.

00:45.210 --> 00:45.630
Right.

00:45.660 --> 00:47.760
Very simple stuff we use to do this all the time.

00:47.760 --> 00:48.150
Right.

00:48.150 --> 00:57.570
So I'm going to do a Docker run dash p I am going to expose Port 80, which is what is running on my

00:57.570 --> 01:04.980
container to port a T on my host, which is basically running Docker.

01:04.980 --> 01:05.310
Right?

01:05.310 --> 01:12.960
The application that's called Docker, which means any one who tries to access Port 80 on the public

01:12.960 --> 01:20.250
machine, Josie and Mac will be forwarded to this container inside it and that request will go right

01:20.250 --> 01:20.880
there.

01:20.880 --> 01:24.810
And that's basically what publishing really does.

01:24.810 --> 01:34.170
Port Then I'm going to do DD http D That means hey detach so I can do more stuff in my terminal.

01:34.310 --> 01:41.240
CBD is the image that is the official Apache image, which is the HTTP naming.

01:42.150 --> 01:47.670
And when we do that, we're going to get a beautiful new container for Docker.

01:47.670 --> 01:52.320
PS can find This is my container ID, I didn't give it a name.

01:52.320 --> 01:55.130
It was wonderful stuff.

01:55.140 --> 01:58.920
I still so if I do a curl on my machine.

01:59.770 --> 02:00.340
Ryan.

02:01.220 --> 02:02.180
It works.

02:02.180 --> 02:06.500
If I go to the browser and I go Hussein, Mac and Port 80.

02:07.160 --> 02:16.010
It works, and it only worked because there isn't anyone running Port 80 on my machine.

02:16.910 --> 02:22.890
But this when we actually did this, the container was placed in a network.

02:23.010 --> 02:25.460
Technically, what is this network?

02:25.760 --> 02:33.680
If we do inspect this container, you can basically take the first two letters of a container ID, and

02:34.100 --> 02:34.700
it will.

02:34.700 --> 02:35.810
It will take you.

02:35.970 --> 02:36.710
If I can type.

02:36.710 --> 02:37.160
Right.

02:37.670 --> 02:39.740
So that's that's the network.

02:40.290 --> 02:43.820
So notice that it's a network.

02:43.820 --> 02:44.900
It's a Jason.

02:45.050 --> 02:45.530
Right.

02:45.530 --> 02:48.390
And you can be in multiple networks.

02:48.410 --> 02:49.190
Yeah, sure.

02:49.190 --> 02:49.790
Why not?

02:50.390 --> 02:55.550
So in this case, this container that I just spent is in a network called Bridge, and that's the default

02:55.580 --> 02:56.270
network.

02:56.270 --> 03:03.320
And this bridge network that is basically inside this Docker host and on my Docker for Mac.

03:04.350 --> 03:10.200
As a gate recalled one $72.17 zero one And that's the IP address of the container.

03:10.440 --> 03:20.700
Now, what happened if I do a curl is http one 72.17 022 from my host.

03:20.820 --> 03:22.490
You notice that it didn't work.

03:22.500 --> 03:23.220
Why?

03:23.490 --> 03:31.890
And the reason is because there is no at least in Mac Docker for Mac, there is no bridge that takes

03:31.890 --> 03:36.950
you from my Mac, which hosts Docker for Mac down to the container.

03:36.960 --> 03:44.340
What what Docker does is actually spins up a virtual machine and there is where Docker actually live

03:44.370 --> 03:50.880
inside my Mac, and that if I manage to get into that network, then I'll be able to do it.

03:50.880 --> 03:52.980
But from public, my machine, I can do that.

03:53.010 --> 04:00.510
If you have Linux, you can easily access that because it will be native installation of dock, right?

04:00.630 --> 04:02.280
Mac doesn't have that unfortunately.

04:02.280 --> 04:05.100
So that's the bridge network.

04:05.490 --> 04:13.410
It also means that if you go to the container, that container actually is bridged back out the bridge.

04:13.410 --> 04:17.430
The container can go out, but you cannot go into the container.

04:17.580 --> 04:20.130
That's the only difference here when it comes to Mac.

04:21.210 --> 04:29.460
And the reason it can go out is because if you like, for example, you did a Google ping, Google from

04:29.460 --> 04:30.000
the container.

04:30.000 --> 04:31.380
We're going to show how to do that.

04:31.380 --> 04:32.010
We try to ping.

04:32.010 --> 04:36.000
Google is going to do a DNS even before before pinging.

04:36.000 --> 04:41.610
The DNS call will have to go outside to the host.

04:41.610 --> 04:48.840
And to do that, you need to go through the gateway and then you go through through the actual host,

04:48.840 --> 04:49.140
Right.

04:49.140 --> 04:50.370
And then the host will resolve.

04:50.370 --> 04:56.070
The DNS is a this is IP address of Google 14433112, two.

04:56.250 --> 05:04.620
And then that will also the request will go out right to the gateway and then all the way to the Internet,

05:04.620 --> 05:11.340
through my MacBook, through the basically the router, my router and the ISP and goes all the way there.

05:11.340 --> 05:17.220
I need to actually have certain tools to debug my container.

05:17.220 --> 05:17.470
Right.

05:17.490 --> 05:22.020
Like ping and trace it out and it's lookup containers.

05:22.020 --> 05:24.510
Don't have that by default for good reason.

05:24.510 --> 05:28.440
So I don't need to need these utilities, but I actually do.

05:28.440 --> 05:28.770
Right.

05:28.770 --> 05:30.490
Because I'm going to do a debugging, right?

05:30.510 --> 05:33.330
I'm going to say, Hey, where are you now in this thing?

05:33.360 --> 05:41.010
So what we're going to do here is that effectively I'm going to build my own image from a DVD that has

05:41.520 --> 05:42.960
a little bit of a fanciness to it.

05:42.960 --> 05:50.040
So I built up a Docker file here where I'm going to inherit from the HTTP feed image and the moment

05:50.040 --> 05:54.210
we build the image, right at that time we're building this image.

05:54.390 --> 05:56.490
We're going to build a brand new image from this.

05:56.490 --> 05:59.880
We're going to run an apt get update right there.

05:59.880 --> 06:03.060
And then because the feed runs on Debian, right?

06:03.060 --> 06:06.630
So very similar to a ponto, it's going to do an update.

06:06.630 --> 06:09.210
It's going to run another run again.

06:09.210 --> 06:09.990
Run.

06:11.290 --> 06:17.880
What run does is it will execute whatever command this at the time of building the image.

06:17.890 --> 06:18.550
Right.

06:18.910 --> 06:20.920
The other one is called cmd.

06:20.950 --> 06:24.220
CMD will run at the time of running the container.

06:24.250 --> 06:24.610
Right.

06:24.910 --> 06:26.470
So be careful with these too.

06:27.130 --> 06:31.990
So I don't care about anything here when it comes to running the container.

06:32.080 --> 06:36.400
I'm good there, but I want to install IP utils ping.

06:36.400 --> 06:37.690
I want traceroute.

06:37.690 --> 06:39.220
I want IP route.

06:39.220 --> 06:40.600
I want curl.

06:40.600 --> 06:43.960
I want telnet, I want DNS tells for a nice lookup.

06:43.960 --> 06:45.160
I want them to edit.

06:45.550 --> 06:49.420
So all of this stuff, once you build all of that stuff, I'm going to share it with you guys.

06:49.510 --> 06:54.640
You save it and quit and then you do Docker Belt Dot.

06:55.030 --> 06:56.500
I am in this location.

06:56.560 --> 07:00.100
Dashti I'm going to call it PN HTTP.

07:00.460 --> 07:03.130
So that's for networked activity, right?

07:03.190 --> 07:06.310
So it has more tools for me to do stuff.

07:07.360 --> 07:12.070
And now at that time of building all that stuff, everything is cache because I did this before.

07:12.430 --> 07:14.820
Now I have a beautiful new image.

07:14.830 --> 07:19.000
So what we're going to do is I'm going to remove my container.

07:19.000 --> 07:22.210
What was it called, Docker or MX five?

07:22.260 --> 07:24.010
A Let's go ahead and delete that.

07:24.730 --> 07:26.440
Of course we've got to stop it first.

07:26.610 --> 07:27.400
Five a.

07:28.130 --> 07:31.280
And then we're going to remove it.

07:32.700 --> 07:35.790
Now let's go ahead and spin up Addo-carr.

07:35.790 --> 07:37.830
And I'm going to start giving them names now.

07:38.250 --> 07:40.830
We're going to call it s one server one.

07:41.910 --> 07:46.110
I'm not going to publish it right now, and I'm going to spin it up right there because it's one.

07:47.130 --> 07:48.240
I've got to detach it.

07:49.200 --> 07:52.900
And I am going to call it NHT.

07:52.920 --> 07:53.670
TBD.

07:53.700 --> 07:58.500
Now we're going to create the container from this particular image.

07:58.530 --> 08:01.110
Did I explain the difference between an image and a container?

08:01.140 --> 08:02.480
Well, very quick.

08:02.490 --> 08:07.470
An image is basically the template where you can spin up in a number of containers.

08:07.470 --> 08:08.580
Any number of containers.

08:08.910 --> 08:09.540
Think of it.

08:09.540 --> 08:15.340
If you view code and programming and object oriented programming, an image is like a class.

08:15.360 --> 08:22.260
You build a you created a class and then the containers are objects, instances of that those class.

08:22.260 --> 08:25.060
So containers are instances for those images.

08:25.080 --> 08:25.770
Think of it.

08:25.800 --> 08:26.630
Think of it this way.

08:26.700 --> 08:26.880
Right.

08:26.910 --> 08:31.560
So you can build you can spin up many containers and we're going to do this right?

08:31.590 --> 08:37.980
I'm going to spin up one container called s one from n n TBD, which is the one we built.

08:37.980 --> 08:44.070
It's the identical, but with a little bit tooling so that we can test stuff.

08:44.510 --> 08:46.140
And I'm going to spin up another one.

08:46.500 --> 08:47.040
Right.

08:47.370 --> 08:54.240
So now we have two containers as one and it's two and the source is an HD DVD.

08:54.240 --> 08:55.560
So technically.

08:55.590 --> 08:57.360
Now notice what I did.

08:57.360 --> 08:59.370
I did not publish it to the server, right?

08:59.370 --> 09:01.860
I did not publish it, publish any port.

09:01.860 --> 09:05.250
So technically I cannot call anything.

09:05.250 --> 09:05.550
Right.

09:05.550 --> 09:06.570
It doesn't make any sense.

09:06.570 --> 09:08.330
Of course this won't work.

09:08.340 --> 09:09.930
Says, Hey, what are you talking about?

09:10.350 --> 09:13.470
There is no path to access these guys.

09:13.470 --> 09:13.740
Right?

09:14.580 --> 09:14.720
Right.

09:14.940 --> 09:18.510
But what did we say when we spin up a container?

09:18.510 --> 09:20.850
By default, it goes to this bridge network.

09:20.850 --> 09:21.270
Right?

09:21.600 --> 09:24.870
So if I inspect this one now.

09:25.960 --> 09:30.870
Notice that got IP address 172 at 17.02.

09:30.880 --> 09:32.200
It's in the bridge network.

09:32.770 --> 09:35.590
If I inspect is to.

09:36.400 --> 09:37.270
It has.

09:38.050 --> 09:40.450
170 2.73.03.

09:41.350 --> 09:42.280
So we have IP.

09:42.520 --> 09:48.490
IP address two, IP address three and both of them are in this network.

09:48.850 --> 09:56.010
And another way to do this is you can actually inspect the network that's called bridge.

09:56.020 --> 09:57.010
I think that's how you do it.

09:57.010 --> 09:57.330
Right.

09:57.340 --> 09:58.050
Or is it flipped?

09:58.060 --> 09:59.110
No, that's right.

09:59.890 --> 10:03.430
If you expect the network, you can see all your networks.

10:03.430 --> 10:05.740
And this is we have one network current.

10:05.740 --> 10:06.880
It's called Bridge.

10:07.000 --> 10:12.430
And this bridge has the network has two containers as one and it's two.

10:12.430 --> 10:14.980
That's another view to view your containers.

10:15.610 --> 10:24.580
So now you notice that how many people users will be spinning up containers and everyone will go into

10:24.580 --> 10:27.220
this default bridge network?

10:27.550 --> 10:28.170
All right.

10:28.940 --> 10:33.160
Could be bad if you have sensitive containers with sensitive information.

10:33.430 --> 10:38.980
That's why we going to learn how to spin up our own custom network and then put our stuff there.

10:38.980 --> 10:41.350
But still too early for that.

10:42.040 --> 10:45.250
So how about we actually bash into my container here?

10:45.730 --> 10:48.160
An interactive terminal.

10:48.940 --> 10:50.950
It's called S1 and bash into it.

10:50.980 --> 10:53.080
Now, if I do that, I can pink.

10:53.080 --> 10:56.320
I can pink google.com.

10:57.390 --> 10:58.390
Wait a minute.

10:58.410 --> 11:00.550
How can I ping google.com?

11:00.570 --> 11:02.280
That's actually interesting, right?

11:02.910 --> 11:06.510
I am inside the network that's called bridge.

11:06.660 --> 11:08.430
I am my IP address.

11:08.550 --> 11:09.630
This is my host name.

11:10.140 --> 11:11.730
It's gibberish.

11:11.760 --> 11:16.080
849 And this is my IP address.

11:16.080 --> 11:17.910
170 2.27.02.

11:18.000 --> 11:21.930
That means the reason we got access to the internet is because of our gateway.

11:22.080 --> 11:30.810
Our gateway is dot one, and our gateway in itself has another interface that exposes it to our my network,

11:30.810 --> 11:32.640
which is my MacBook right here.

11:32.640 --> 11:37.410
And then my MacBook is connected to my wi fi, which is connected to my router, which connected to

11:37.410 --> 11:38.120
my ISP.

11:38.130 --> 11:38.460
Right.

11:38.460 --> 11:41.550
So that is like a line that takes me right out there.

11:41.910 --> 11:46.050
And the way it works is just the default gateway concept, right?

11:46.920 --> 11:51.420
If you're going to Google.com, this is the IP address.

11:51.810 --> 11:54.250
How does networking work?

11:54.270 --> 11:58.560
Says, Hey, every network has very simple logic, at least locally.

11:58.560 --> 11:59.060
Right?

11:59.370 --> 12:03.480
I'm going I want to go to 142 to 2, 52 to 1, 7142.

12:03.510 --> 12:04.730
It will ask this question.

12:04.740 --> 12:09.390
It will do a subnet mask on itself says, okay, is this guy in my subnet?

12:09.960 --> 12:17.610
How does it know that basically does a slash 16 on its own, its own IP?

12:17.670 --> 12:20.140
That's basically where the subnet mask is, right?

12:20.160 --> 12:23.050
So my seven is 255.255.

12:23.070 --> 12:23.340
Right.

12:23.340 --> 12:25.410
Because it's like 16 .0.0.

12:25.410 --> 12:33.450
So we'll do that to 55225 do an end is 142 250 the same as one 72.17.

12:33.450 --> 12:33.810
Nope.

12:34.050 --> 12:34.380
Nope.

12:34.380 --> 12:39.020
That is not definitely the moment says nope, all bets are off.

12:39.030 --> 12:39.840
It's send it.

12:39.870 --> 12:46.500
It sends the IP packet to the gateway and the gateway will just do the same logic over and over again

12:46.500 --> 12:53.250
until eventually the the packet will reach someone who is in its known network.

12:53.280 --> 12:55.530
It's not quite that way in the internet.

12:55.530 --> 13:00.300
It uses something called the BGP border Gateway here, but per protocol.

13:00.300 --> 13:01.830
But that's outside there.

13:02.700 --> 13:04.020
The discussion here for DAO.

13:04.740 --> 13:07.080
But yeah, that's basically the simple logic, right?

13:07.080 --> 13:09.480
So now cool.

13:09.750 --> 13:18.270
I can ping as one which is well like wait a minute, a pinging is one.

13:18.270 --> 13:19.590
I can't ping this one.

13:19.590 --> 13:23.670
How about is two that can't ping is one or S2.

13:24.000 --> 13:24.720
Why.

13:25.830 --> 13:31.020
Well, if you think about it, let's do an endless lookup, you know, and let's look out basically

13:31.020 --> 13:33.300
the way to give me the IP address.

13:33.660 --> 13:37.890
What is the DNS address for Google?

13:38.430 --> 13:39.450
Look what happened.

13:39.540 --> 13:40.710
It gave me the IP address.

13:40.710 --> 13:41.110
Right.

13:41.430 --> 13:42.290
We're going to come back.

13:42.300 --> 13:42.570
Why?

13:42.570 --> 13:47.760
I couldn't ping my containers in a minute when I did an anonymous lookup.

13:47.790 --> 13:51.030
This was the DNS server that hosted me.

13:51.030 --> 13:55.860
I have no idea what's this because that's not my subnet and my host.

13:55.860 --> 14:00.000
My seven is 1922168.255.254.

14:00.890 --> 14:01.360
Right.

14:01.610 --> 14:07.600
So this is what this is is actually this is the VMM that I talked about.

14:07.610 --> 14:16.100
This exists inside my Docker for Mac, and that is basically where Docker is running and, and that

14:16.100 --> 14:21.940
is the DNS server for Docker when it comes to accessing bridging the Internet.

14:21.950 --> 14:24.950
So if you want to do any DNS, it goes to this query.

14:25.520 --> 14:26.230
Why?

14:26.240 --> 14:27.800
Because that's the bridge network.

14:27.830 --> 14:33.500
The bridge network is lives there and as a result, all the data will go to that.

14:33.500 --> 14:42.740
Well, that's why when I do an NS lookup on my own hostname as one you might say Josina and so on is

14:42.740 --> 14:44.000
not really hostname.

14:44.000 --> 14:44.420
Right.

14:44.420 --> 14:45.140
Well.

14:45.950 --> 14:47.090
We can do this right?

14:47.900 --> 14:51.260
Then let's look up and then do this same thing.

14:53.110 --> 14:54.790
Even that will won't work.

14:55.150 --> 14:59.320
And the reason is because that query goes to this.

15:00.800 --> 15:02.750
Well, think about it this way.

15:02.990 --> 15:05.750
This query, this DNS query will go where?

15:05.840 --> 15:07.200
We'll ask the same question.

15:07.220 --> 15:12.050
I need to go to 192168.1.2625.5.

15:12.050 --> 15:12.410
Right.

15:12.440 --> 15:13.490
Where is this?

15:13.730 --> 15:14.960
It's not in my subnet.

15:14.990 --> 15:15.680
Same question.

15:15.680 --> 15:15.950
Right?

15:15.950 --> 15:16.760
It's not only subnet.

15:16.790 --> 15:17.930
Let me set it to the gateway.

15:17.960 --> 15:20.570
The gateway is 170 2.0.1.

15:20.570 --> 15:20.930
Right.

15:21.230 --> 15:24.680
And that will take you out to this.

15:24.680 --> 15:29.540
And until it reaches the host, the Docker host, which is this guy Now this guy is going to ask the

15:29.540 --> 15:31.520
question, what is this DNS?

15:31.550 --> 15:38.140
It doesn't know because that is you're asking someone outside your network for your hosts that are existing

15:38.150 --> 15:38.840
on your network.

15:38.870 --> 15:39.950
They don't know that.

15:39.950 --> 15:47.480
And that's the why you cannot access things by hostname inside the bridge network because the DNS is

15:47.480 --> 15:48.920
just outside.

15:48.920 --> 15:49.340
Right.

15:50.030 --> 15:50.780
That's why.

15:51.050 --> 15:52.670
But but if you want.

15:53.900 --> 15:57.470
You can ping the IP address normally.

15:58.680 --> 15:59.880
Camping yourself.

16:00.060 --> 16:01.200
You camping?

16:01.800 --> 16:03.330
This guy the gateway.

16:03.360 --> 16:04.530
You camping three.

16:04.530 --> 16:05.720
Which is the other container?

16:05.730 --> 16:07.170
That's definitely fine.

16:07.170 --> 16:08.610
You can curl.

16:08.910 --> 16:11.940
170 2.07.03.

16:11.970 --> 16:13.190
Yay.

16:13.230 --> 16:14.520
That is pretty cool, right?

16:14.940 --> 16:16.200
And that's myself.

16:17.200 --> 16:19.690
We're going to change them so they give you a different result.

16:19.690 --> 16:20.790
So we know where are we?

16:20.800 --> 16:21.130
Right.

16:22.060 --> 16:23.110
We're going to do that right now.

16:23.110 --> 16:28.930
I am in S1 right now, so now I can't access anything by hostname, which is very.

16:31.660 --> 16:32.970
Limited, Right?

16:32.980 --> 16:34.150
That's the limitation here.

16:34.480 --> 16:37.420
But we can we can definitely access by IP.

16:37.510 --> 16:38.020
Right.

16:38.200 --> 16:44.170
And the problem here is also you not only you can access by IP, everybody in this network can access

16:44.170 --> 16:44.890
your stuff.

16:45.760 --> 16:46.590
Nope.

16:46.600 --> 16:47.980
We want to limit that.

16:47.980 --> 16:48.370
Right.

16:48.550 --> 16:51.640
So let's go ahead and actually change a little bit here.

16:52.270 --> 16:56.050
I want to go to the what is it called the docks here.

16:56.050 --> 16:59.980
And there is an indexed document and I'm going to change.

16:59.980 --> 17:06.760
It works here to call it Yo, this is S1, right?

17:08.000 --> 17:09.640
And then I'm going to exit here.

17:09.650 --> 17:19.070
I'm going to do the same thing, which is to go to the is to go to PhD docs and then index the HTML,

17:19.100 --> 17:21.500
go to that, and then I'm going to change this to S2.

17:21.500 --> 17:22.550
So we know.

17:22.700 --> 17:23.330
All right.

17:25.880 --> 17:29.780
Now if I curl 172, what was the IP addresses again?

17:29.810 --> 17:31.040
I keep forgetting the subnet.

17:33.090 --> 17:36.870
If I curl 172 to 70 to 73.

17:37.170 --> 17:38.490
This is a stew.

17:39.090 --> 17:40.380
This is this one.

17:40.800 --> 17:41.550
Cool.

17:41.880 --> 17:42.590
That's nice.

17:42.600 --> 17:44.010
I like this touch a little bit.

17:44.400 --> 17:45.180
All right.

17:46.440 --> 17:52.080
Again, these are these are containers that are inside the network, and they can only talk to each

17:52.080 --> 17:57.030
other and very limited by IP address Now by hostname.

17:57.030 --> 17:57.340
Why?

17:57.360 --> 18:02.610
Because DNS is going all the way to the host and trying to figure out things and it can't.

18:02.610 --> 18:03.020
Right.

18:03.030 --> 18:04.680
So how can I fix that?

18:05.640 --> 18:06.840
Let's fix that.

18:07.650 --> 18:09.580
Well, fixing that is not hard.

18:09.600 --> 18:11.370
We can actually create a network.

18:13.050 --> 18:14.670
Let's go to Docker.

18:14.700 --> 18:21.350
Network Create and we call it, I don't know, backend, whatever.

18:21.360 --> 18:21.810
Right.

18:22.320 --> 18:27.990
And when you do that, you can actually do so many fancy things, right?

18:29.160 --> 18:33.600
One of the things you can do is actually specify a subnet subnet.

18:34.470 --> 18:40.980
You can't you can go by the default subnet, so it will generate a subnet for you, but we are fancy

18:40.980 --> 18:41.570
people.

18:41.580 --> 18:46.170
So what I'm going to do is actually generate a subnet and that's my subnet.

18:46.590 --> 18:55.080
So what I'm going to do is how about we generate subnet ten .0.0?

18:55.970 --> 18:58.070
And let's make it slash.

18:59.190 --> 19:01.470
24.

19:02.550 --> 19:04.980
Which means this.

19:04.980 --> 19:05.760
And this.

19:05.760 --> 19:06.230
And this.

19:06.240 --> 19:06.980
Eight, eight, eight.

19:06.990 --> 19:07.210
Right.

19:07.230 --> 19:08.070
This is the network.

19:08.070 --> 19:08.760
This is the host.

19:08.760 --> 19:14.370
So I get to 55 containers per network, plenty more than enough.

19:14.730 --> 19:15.860
And then I'm going to call it.

19:15.870 --> 19:17.370
Did I call it right?

19:17.970 --> 19:18.600
That's it.

19:18.600 --> 19:18.900
I think.

19:18.900 --> 19:19.110
Do it.

19:19.120 --> 19:20.340
Do anything else?

19:20.430 --> 19:22.110
No, I think that's good.

19:22.620 --> 19:24.430
Just like that, we created a network.

19:24.450 --> 19:27.000
Now, this network, if I inspect this network.

19:28.180 --> 19:30.880
It doesn't have anything called it back end, Right.

19:31.760 --> 19:34.400
This is my subnet and it doesn't have any containers.

19:34.400 --> 19:38.570
So how about we actually attach connect my containers?

19:39.340 --> 19:40.750
To this subnet.

19:41.020 --> 19:42.090
Well, how do I do that?

19:42.100 --> 19:43.240
You do Docker.

19:44.000 --> 19:46.340
Network connect.

19:48.490 --> 19:52.150
The network, which is backend and the container is one.

19:52.480 --> 19:56.620
I want to connect this one to this guy and I want to connect S2 to this guy.

19:58.650 --> 20:02.610
I don't know if you noticed this, what's going on here, but we're going to we're going to come to

20:02.610 --> 20:03.150
that now.

20:03.420 --> 20:10.410
If I do Docker inspect Docker network, inspect the backend.

20:11.100 --> 20:12.570
You'll notice that.

20:14.440 --> 20:17.590
My daughter's got an IP address.

20:17.590 --> 20:19.000
Two, three.

20:19.030 --> 20:20.380
You can also.

20:21.770 --> 20:26.540
Set a bed here in the network says, Hey, this network is internal.

20:26.540 --> 20:30.870
That means only the guys inside this network can talk to each other.

20:30.870 --> 20:33.740
And nobody, they cannot leave the network.

20:33.740 --> 20:36.410
Even if there is a route that says, Hey, go to this network.

20:36.410 --> 20:37.790
Nope, they cannot leave it.

20:38.240 --> 20:43.850
So what what we did here, if now, if we inspect this one, for instance, what is what will happen

20:43.850 --> 20:44.230
here?

20:44.240 --> 20:45.140
Look at this.

20:45.410 --> 20:47.090
It belongs It's one now.

20:47.090 --> 20:50.030
Belongs to two networks, right?

20:50.060 --> 20:53.990
This guy and this guy.

20:54.680 --> 20:56.690
No, we don't want that.

20:57.230 --> 21:02.570
And this is a mistake I made a couple of times where I was like, Oh, I connected this network, but

21:02.570 --> 21:07.520
it is still connected to other network because you can absolutely have to network cards in a machine.

21:07.850 --> 21:08.400
Think of it.

21:08.400 --> 21:10.220
The container, very similar like that.

21:10.230 --> 21:10.580
Right.

21:11.030 --> 21:18.530
And if you think about it, the container is just a process that happened to have to be in a in its

21:18.530 --> 21:19.720
own namespace.

21:19.730 --> 21:20.240
Right.

21:20.270 --> 21:26.630
Which means they have limited set of resources and you can add and remove resources so that other containers,

21:26.630 --> 21:32.330
other processes cannot see it and you can add it to a control group to also limit says, okay, you

21:32.330 --> 21:36.520
only get this much of the CPU and you cannot exceed this much memory.

21:36.530 --> 21:38.350
That's basically how containers work.

21:38.360 --> 21:47.180
In a nutshell, container control groups and namespaces just isolate them from the word.

21:49.100 --> 21:53.590
Now I need to really remove those suckers from the network.

21:53.780 --> 22:04.430
So I do a docker in network disconnect is one know the network first back bridge is one remove from

22:04.430 --> 22:04.790
the bridge.

22:04.790 --> 22:05.540
Remove the bridge.

22:05.540 --> 22:11.330
Now the those suckers are alone in this network and let's inspect it.

22:11.330 --> 22:14.090
I suppose you can do a docker, inspect the backend.

22:15.020 --> 22:20.510
It's just better to add in as well to know that, hey, by the way, I'm inspecting I work, but Google

22:20.720 --> 22:30.470
dual docker actually overrode overload that operator to inspect both containers and networks.

22:30.470 --> 22:31.250
Look at this.

22:32.020 --> 22:34.750
Now we are alone, my friend.

22:35.470 --> 22:40.630
OC Docker Execute Dash Interactive Terminal.

22:40.660 --> 22:42.490
I don't know if it stands for internet statement.

22:42.490 --> 22:44.120
This is how I remember stuff, by the way.

22:44.140 --> 22:46.190
Guys, are you going to see weird stuff?

22:46.210 --> 22:47.410
That's how I remember.

22:47.680 --> 22:53.090
By the way, BASH I'm going to bash into the container now.

22:53.110 --> 22:55.180
I do not look up as one.

22:56.020 --> 22:56.990
Boom.

22:57.340 --> 23:01.150
And us look up is to bomb a.

23:01.600 --> 23:02.620
Look what happened.

23:02.650 --> 23:03.460
Look at.

23:03.550 --> 23:04.660
Look at this.

23:05.290 --> 23:12.360
The DNS server now became this local instance in the container.

23:12.370 --> 23:17.980
That's that's 170 2.00.. 11 and that's local.

23:17.980 --> 23:19.690
This is loopback effectively.

23:20.500 --> 23:31.750
So now that is why we were able to resolve that as one which is technically not the hostname even to

23:31.750 --> 23:32.890
the IP address.

23:32.920 --> 23:38.410
Docker knows says, okay, now that we're on your own network, you're going to get your own beautiful

23:38.410 --> 23:39.580
DNS provider.

23:39.580 --> 23:46.150
Actually, every container has its own DNS provider and technically they are all connected to each other.

23:46.150 --> 23:53.530
Somehow they share information or they because if I add another container to this network, automatically

23:53.530 --> 23:55.210
the DNS knows about this.

23:56.050 --> 24:02.470
Alternatively, I can also use this docker and look up.

24:03.400 --> 24:04.030
This guy.

24:04.030 --> 24:07.330
And that also answers me because that's the actual host name, right?

24:07.780 --> 24:13.210
So now I can do curl HTTP as one I can do.

24:13.240 --> 24:13.720
Curl.

24:13.750 --> 24:16.510
It'd be a stew.

24:16.690 --> 24:23.200
And now if you have like engine X or H a proxy running and you spin up a configuration, you put in

24:23.290 --> 24:24.940
an X within the same network.

24:25.510 --> 24:26.140
Beautiful.

24:26.140 --> 24:27.070
They see each other.

24:27.070 --> 24:36.130
You can use hostname inside engine x y because the DNS resolver is that thing is not going outside and

24:36.130 --> 24:37.870
trying to figure out what the DAS is.

24:37.870 --> 24:38.230
Right.

24:38.650 --> 24:46.420
If this was like a public thing, you know you have your own domain server and that's a good idea sometimes

24:46.420 --> 24:51.880
where if you have like in the cloud and you have your own DNS server and so you probably have a DNS

24:51.880 --> 24:57.460
server and that DNS server knows about every single entry that an actual legit DNS server, you know.

24:58.600 --> 25:02.140
And you can add entries there, you can add fancy thing.

25:02.590 --> 25:08.200
It's like fancy, dull, bland C dot com, which doesn't exist in the Internet.

25:08.200 --> 25:09.220
Well, maybe it does.

25:09.430 --> 25:10.900
And that.

25:12.120 --> 25:14.520
Can point to your local container.

25:15.270 --> 25:16.020
Sweet.

25:16.950 --> 25:17.660
So we did that.

25:17.670 --> 25:18.600
We build a bridge.

25:20.730 --> 25:22.170
They can talk to each other right now.

25:22.170 --> 25:22.620
Right.

25:22.950 --> 25:23.690
Beautiful.

25:23.700 --> 25:25.050
They can call each other.

25:25.290 --> 25:26.430
Call each other.

25:26.670 --> 25:29.610
The containers are also have access to the Internet.

25:29.610 --> 25:32.400
This is something that you might not want to.

25:33.180 --> 25:40.200
So if you want to actually disable that, you can create the network with a dash dash internal right

25:40.320 --> 25:44.880
and that will isolated from the bridge.

25:45.240 --> 25:45.990
What does that mean?

25:47.530 --> 25:48.630
ALTER I'll give you an example.

25:48.630 --> 25:51.600
If I do a traceroute to S1 right now.

25:52.880 --> 25:54.790
It goes directly there, right?

25:54.800 --> 25:57.530
If I do a trace out to S2, it goes directly there, right?

25:57.530 --> 25:59.060
Because it's in the same subnet.

25:59.090 --> 26:05.960
If I do a trace route to something above me, write a trace out to my router, my actual physical router

26:05.960 --> 26:06.890
to

26:06.920 --> 26:12.980
2541192168.254.254.

26:13.220 --> 26:18.020
This is my router that is actually sitting on my network, right?

26:18.730 --> 26:20.560
It can find it.

26:20.950 --> 26:21.610
Right.

26:21.610 --> 26:22.840
And the reason is because.

26:22.840 --> 26:24.580
Well, what is this?

26:24.580 --> 26:25.240
I don't know.

26:25.240 --> 26:25.870
It's not a mine.

26:26.560 --> 26:27.490
It's none of my subnet.

26:27.500 --> 26:29.590
So it was like, okay, Gateway, take care of it.

26:29.610 --> 26:30.250
Where's the gateway?

26:30.250 --> 26:31.990
That's the Gateway ten 001.

26:31.990 --> 26:32.920
Who assigned it?

26:32.950 --> 26:34.330
Well, the bridge did right.

26:34.330 --> 26:35.140
The network.

26:35.140 --> 26:37.150
When we created it, it created a bridge.

26:37.150 --> 26:39.040
And the bridge has a default gateway, by the way.

26:39.130 --> 26:43.450
And that's why we started the containers with two and three, because one was reserved for that.

26:43.740 --> 26:49.240
And there was many articles, by the way, I would like to have access to that sucker and I would like

26:49.240 --> 26:50.650
to configure the gateway.

26:50.650 --> 26:54.070
I would like to make a container my own gateway Docker.

26:54.070 --> 26:56.320
Don't let you because Docker do.

26:56.320 --> 27:01.360
It is so restrictive, dude, there's so much restriction when it comes to using even the internal network.

27:01.360 --> 27:02.170
We talked about it.

27:02.530 --> 27:09.700
Well, the moment you do it internally, you will you will not have access to the gateway, right?

27:10.120 --> 27:12.820
But you will also not have access to other networks.

27:12.820 --> 27:13.690
Why?

27:14.560 --> 27:16.960
If I added a rule, follow it.

27:16.990 --> 27:19.060
Just it's just all or nothing.

27:19.060 --> 27:23.230
When it comes to Docker, they don't have like a middle, middle ground.

27:23.230 --> 27:26.860
It's like, okay, dude, all right, I want an internal network.

27:26.860 --> 27:28.540
I want another an internal network.

27:28.540 --> 27:29.800
I don't want a bridge.

27:29.800 --> 27:36.220
I just want this these guys to talk to each other and want to talk to another network, because this

27:36.220 --> 27:39.910
network is a database network and this network is the Web servers.

27:39.910 --> 27:41.650
And then revenue calls the reverse proxy.

27:41.650 --> 27:45.670
And I want certain people networks to talk to each other, but not everyone.

27:45.880 --> 27:47.770
But I don't want them to connect to the Internet.

27:47.770 --> 27:48.610
I couldn't find a way.

27:48.610 --> 27:53.890
Maybe someone will let me know in the comment section, but I couldn't anyway.

27:53.890 --> 27:58.480
So you notice that it goes to the gateway, and the gateway says, Oh, I don't know this.

27:58.910 --> 28:00.580
Let me go to my gateway.

28:00.580 --> 28:01.000
Right?

28:01.000 --> 28:06.880
And that gateway basically will take me to to the default gateway, which is which is where I can do

28:06.880 --> 28:10.330
the same thing with my other machine, which is the same thing.

28:10.960 --> 28:15.760
So we go to this and then this will lend me in the network.

28:15.760 --> 28:19.960
And that network basically will take me to my host.

28:20.230 --> 28:24.730
So this is how it works now and this is what I need to blank things out.

28:24.730 --> 28:31.900
And just so I don't know, I don't show my IP or public IP address if I do dot com.

28:33.640 --> 28:34.450
Same thing.

28:35.560 --> 28:42.700
Goes to my network, goes to the router, goes to my public IP address, which you cannot see.

28:42.730 --> 28:43.270
Right.

28:43.480 --> 28:49.990
And that goes to another public IP address, which my ISP goes there goes there, goes there up until

28:49.990 --> 28:53.630
we find the actual gateway.

28:53.650 --> 28:55.240
How does traceroute work?

28:55.510 --> 28:58.420
Basically a bunch of ICMP messages going back and forth.

28:59.590 --> 29:04.510
You said the TTL and then the shorter the title until you reach the next hop.

29:04.720 --> 29:10.300
Because IP packets, every time you get an IP packet is routed the TTL.

29:10.300 --> 29:12.940
The time to live is the decrement on the IP header.

29:13.270 --> 29:16.630
And that's how there's a nice game you can play with traceroute.

29:17.290 --> 29:19.870
So now that's, that's the path.

29:19.870 --> 29:26.830
So if you cut the path, if you cut that bridge, the gateway, you have no access to the internet and

29:26.830 --> 29:29.200
that's how you basically can do it now.

29:29.650 --> 29:30.820
But we're not going to do that.

29:31.060 --> 29:31.570
All right.

29:31.690 --> 29:35.920
So now I have a do not PS.

29:36.870 --> 29:37.620
Ellis.

29:38.890 --> 29:40.540
Oh, I'm in the wrong thing.

29:40.780 --> 29:44.470
Of course, that that that that image doesn't have to be darker.

29:44.860 --> 29:46.270
If I do a darker.

29:47.840 --> 29:51.350
Network, as you can see that I have now my back end, right?

29:51.350 --> 29:51.680
Right.

29:51.680 --> 29:52.640
My back in network.

29:52.640 --> 30:00.890
What I wanted to do is effectively spin up another network and put S2 there and see what will happen.

30:01.100 --> 30:03.080
So I spend up to network, right?

30:03.320 --> 30:08.030
The other network is going to have a different subnet and I want them to talk to each other eventually.

30:08.600 --> 30:12.890
They're not going to be talking to each other and we're going to talk about why effectively.

30:13.850 --> 30:16.190
But let's do that.

30:16.190 --> 30:17.000
Docker.

30:17.510 --> 30:19.370
Hopefully the command is still there.

30:19.370 --> 30:20.260
I didn't write a lot.

30:20.270 --> 30:21.860
Say, Hey, there you go, Thank you so much.

30:21.860 --> 30:24.350
Backend, I'm going to call it back into right.

30:25.490 --> 30:25.740
Maybe.

30:26.730 --> 30:28.050
We can call the front end.

30:28.050 --> 30:29.160
Front end.

30:29.580 --> 30:32.240
And you might say, Hussein, why are you doing this?

30:32.250 --> 30:33.270
Why are you creating 200?

30:33.540 --> 30:39.150
Well, it's actually a very common thing you do in production where, let's say you have I'm going to

30:39.150 --> 30:40.890
draw a draw up picture here.

30:40.890 --> 30:45.930
You're going to see the picture here where we have let's say you have you have engine X or proxy or

30:45.930 --> 30:50.340
envoy or something that talks an API gateway that talks to the client directly.

30:50.940 --> 30:58.710
And you have maybe five instances of those to load balanced right through the DNS and those talks to

30:58.750 --> 31:02.220
load balance on the back end with a bunch of web servers.

31:02.220 --> 31:02.700
Right.

31:02.700 --> 31:06.900
And those who are observers talk turn around and talk to the database.

31:06.930 --> 31:10.380
One configuration might be put everything in the same network.

31:10.560 --> 31:11.670
You can do that.

31:12.030 --> 31:14.010
But why is that not a good idea?

31:14.010 --> 31:22.950
Generally, it is because in genetics or this, it is very dangerous to expose this publicly.

31:22.950 --> 31:30.690
The attacker, if they compromise Engine X or the the gateway, they got access to your entire network.

31:30.720 --> 31:32.970
There is no other line of defense.

31:32.970 --> 31:35.280
The only line of defense is there.

31:35.280 --> 31:36.150
And that.

31:36.300 --> 31:36.650
Right.

31:36.780 --> 31:43.890
So what do you what we do effectively is put engine X and all load balancer in its own network and put

31:44.490 --> 31:48.270
web servers in their own network and put the databases.

31:48.270 --> 31:52.530
Definitely the precious data in its own separate network.

31:53.040 --> 32:02.070
Why do you see all all the headlines, oh, seven terabytes of Elasticsearch or MongoDB or or Postgres

32:02.070 --> 32:05.370
database has been leaked because people don't do any of that stuff.

32:05.370 --> 32:12.690
What they do is they spin up a podcast instance on Amazon and they make it public and they listen on

32:12.690 --> 32:13.890
on interfaces.

32:13.890 --> 32:18.030
So that's why it's publicly accessible for anyone.

32:18.030 --> 32:19.530
That is a really bad idea.

32:19.530 --> 32:22.290
That's hopefully, of course, that extreme right.

32:22.410 --> 32:26.370
But what you can do as a network administrator, I'm not a network administrator.

32:26.370 --> 32:27.560
I just love this stuff, right?

32:27.720 --> 32:28.980
But I'm a back end engineer.

32:28.980 --> 32:32.370
But what you can do is effectively play with this thing.

32:32.370 --> 32:36.420
So I want to simulate this in Docker by creating multiple network.

32:36.420 --> 32:40.920
Then I want certain rules to be applied so this network can talk to this.

32:41.340 --> 32:42.030
So that's why.

32:42.030 --> 32:42.240
Right.

32:42.240 --> 32:44.640
So let's call this, this is the frontend, that's the back end.

32:45.300 --> 32:48.030
So I'm going to create the frontend network now.

32:49.730 --> 32:50.670
Pull over laps.

32:50.690 --> 32:52.190
Oh, what the heck.

32:53.030 --> 32:53.900
Of course.

32:54.500 --> 32:55.490
I just said enter.

32:55.820 --> 32:57.170
It's the same subnet.

32:57.200 --> 33:00.110
What are we going to do here is actually add one here.

33:00.110 --> 33:04.910
So now this is my subnet ten zero zero.

33:04.940 --> 33:11.240
So that means the first one is ten 00.1.2.2255.

33:11.240 --> 33:11.630
Right.

33:11.660 --> 33:17.120
The second one is ten 0.1.1.2.255.

33:17.120 --> 33:20.030
So you have two different unique subnet effectively.

33:20.060 --> 33:21.590
Now, now it's not yelling at me.

33:21.590 --> 33:22.460
So wait.

33:22.790 --> 33:25.820
Now we're going to take the sucker.

33:26.780 --> 33:28.700
Disconnect is one.

33:29.350 --> 33:32.330
The disconnect is one or two.

33:32.360 --> 33:35.810
Let's remove S2 as two from the back end.

33:36.050 --> 33:36.770
Right?

33:37.220 --> 33:40.940
And then connect S2 to where?

33:42.080 --> 33:44.030
To the front end.

33:45.840 --> 33:47.040
What did I do wrong?

33:49.540 --> 33:51.730
Yeah, I spelt connect with three ends.

33:53.920 --> 33:54.790
Genius.

33:55.180 --> 33:56.500
Nice.

33:56.530 --> 33:59.410
Now, Docker inspect is two.

34:00.100 --> 34:01.360
It has IP address done.

34:01.360 --> 34:03.130
012.

34:03.670 --> 34:06.280
Docker Inspector.

34:07.400 --> 34:09.530
An inspector is sworn.

34:10.410 --> 34:12.690
This one is just this one still the same thing?

34:13.230 --> 34:16.830
Well, let's let's bash into this one.

34:17.940 --> 34:22.050
And say pink as to what?

34:23.870 --> 34:24.380
It.

34:25.270 --> 34:25.900
What do you mean?

34:25.900 --> 34:27.490
I can't ping this one.

34:27.520 --> 34:28.330
It's too.

34:29.430 --> 34:34.710
Well, there is a you can't ping as to it's because it's not in your network.

34:35.070 --> 34:35.550
All right.

34:36.470 --> 34:41.150
Because what happened is, well, in this case, it's a little bit complicated.

34:41.150 --> 34:42.140
So let's do.

34:42.620 --> 34:43.700
What was the IP address?

34:43.730 --> 34:45.170
Ten 002, I think.

34:45.470 --> 34:47.870
Let's exit and and confirm.

34:51.480 --> 34:55.250
Just do a hostname dash i That's the IP address.

34:55.260 --> 34:55.590
All right.

34:55.590 --> 35:00.360
So what we're going to do is the ping ten 002.

35:00.360 --> 35:00.600
Right.

35:00.600 --> 35:02.670
Which is the earlier I'm going to do.

35:02.670 --> 35:03.270
Right.

35:03.600 --> 35:07.020
Which is this IP, I want to ping that that will work either.

35:08.040 --> 35:08.380
Right.

35:08.520 --> 35:13.770
And I get I went to the extreme, I just did the hostname what happened with the hostname is like I

35:13.770 --> 35:16.470
couldn't figure out even what your IP address is.

35:17.160 --> 35:19.350
So the DNS failed here.

35:19.350 --> 35:26.010
Well you don't have DNS, you have the IP, but you couldn't figure out how to get there.

35:26.010 --> 35:26.700
Why?

35:26.730 --> 35:29.910
Because it says, all right, I want to go there.

35:29.910 --> 35:31.080
But what's my gateway?

35:31.080 --> 35:34.140
My gateway is ten 0.1.1.

35:34.140 --> 35:34.590
Right.

35:34.590 --> 35:36.090
And I took it there.

35:36.090 --> 35:36.960
I'll take it there.

35:36.960 --> 35:39.840
But the gateway doesn't know how to forward it.

35:40.110 --> 35:41.460
It says, okay, I'm going to go.

35:41.490 --> 35:43.380
I, I have no idea how to do this.

35:43.380 --> 35:47.580
I have no idea how to reach this network because the gateway doesn't know.

35:47.580 --> 35:58.650
And so we need someone who knows we need a router, we need to create, right, a router.

35:58.650 --> 36:00.150
So we need a router.

36:00.150 --> 36:06.540
So we're going to spend out our router, our own gateway Docker run Dash that name.

36:06.540 --> 36:08.040
I'm going to call it GW.

36:08.070 --> 36:10.080
The Gateway, right?

36:11.530 --> 36:15.670
Router, a router or gateway that's called a gateway.

36:15.910 --> 36:16.630
That's called Gateway.

36:17.110 --> 36:22.480
GW You guys know it's going to link us from the front end to the back end and vice versa.

36:23.410 --> 36:25.450
So now Docker Run does that name.

36:26.920 --> 36:28.300
I don't need to publish anything.

36:28.600 --> 36:30.460
The host has nothing to do with this.

36:30.670 --> 36:31.630
What are we going to do?

36:31.660 --> 36:32.810
I want the gateway.

36:32.830 --> 36:33.910
By the way, you can.

36:33.910 --> 36:36.940
While creating a container, you can assign it to network.

36:37.240 --> 36:44.560
And I want the gateway to be in my back end network for now, because I'm going to add it also to the

36:44.560 --> 36:45.220
front frontend.

36:45.220 --> 36:46.110
Yes.

36:46.120 --> 36:49.360
This router, this gateway is going to belong to both network.

36:49.840 --> 36:50.680
Why?

36:50.770 --> 36:54.130
Because this will be the route.

36:54.160 --> 36:56.920
It will route us from one place to another place.

36:57.730 --> 36:59.380
Very beautiful.

37:00.230 --> 37:01.760
So we're going to there.

37:01.790 --> 37:03.890
We're going to detach it again.

37:03.890 --> 37:08.950
Our HD DVD, which is our beautiful custom image container here.

37:08.960 --> 37:10.940
And I think that's it.

37:10.970 --> 37:13.040
I don't think I need anything old.

37:13.050 --> 37:14.100
So this new.

37:15.650 --> 37:16.850
Again, I.

37:16.880 --> 37:17.690
Okay.

37:19.400 --> 37:20.460
I lost it.

37:21.270 --> 37:22.530
Duncan on that name.

37:22.530 --> 37:29.340
Gateway Dash, Dash Network Back and Dash D and Noise, the DVD Sync Suite.

37:29.520 --> 37:33.840
Now we have the gateway and in the back end network.

37:33.840 --> 37:35.180
But that's not enough.

37:36.170 --> 37:41.540
Docker Network connect the front end to the Gateway.

37:42.320 --> 37:43.380
Can I do it both?

37:43.400 --> 37:49.470
I never tried to add to networks, and I probably can probably can do that slash network back in front

37:49.470 --> 37:53.390
then and I will work, but I never tried it, so you guys feel free to do that.

37:53.960 --> 37:56.930
So now, Now.

37:58.200 --> 37:59.760
That's still not enough for you guys.

38:00.210 --> 38:01.170
We're going to find out.

38:01.200 --> 38:05.190
If I execute, if I bash into the gateway.

38:05.190 --> 38:05.730
Right.

38:05.730 --> 38:08.760
And I say ping, it's one.

38:09.550 --> 38:10.540
If found it.

38:10.570 --> 38:11.800
Pink is too.

38:12.010 --> 38:13.150
If found it, why?

38:13.180 --> 38:14.320
Because if you.

38:14.320 --> 38:15.820
If you look at the graph.

38:15.850 --> 38:19.580
Yeah, it's two and it's one are right there.

38:19.600 --> 38:20.050
Right.

38:20.080 --> 38:21.190
Because they are.

38:22.030 --> 38:23.350
And that's why I found this one.

38:23.350 --> 38:26.440
Because my audience knows about this network is right there.

38:26.440 --> 38:29.710
And I found this too, because my audience knows about it, too.

38:29.710 --> 38:31.510
It's right there in another network.

38:31.540 --> 38:33.170
That's why it knows about it.

38:33.190 --> 38:38.020
But technically speaking, the other guys don't.

38:38.470 --> 38:39.100
Right.

38:39.100 --> 38:48.640
So it's if I if I exit now and I go to S1, it's one still of course cannot ping S2, Right.

38:48.640 --> 38:49.810
And vice versa.

38:50.410 --> 38:51.200
It cannot know.

38:51.210 --> 38:52.720
It doesn't know, right.

38:52.930 --> 38:54.640
It doesn't know the gateway.

38:54.700 --> 38:55.360
Right.

38:56.910 --> 39:03.900
Because it's in its network from this side and the other guy is to it.

39:03.900 --> 39:10.050
Also know it can take the gateway from because it's in the network from the other side, but they can't

39:10.050 --> 39:10.970
talk to each other.

39:10.980 --> 39:14.310
So here is where the final piece.

39:14.490 --> 39:16.590
So do we do we know what we're going to do now?

39:16.890 --> 39:17.930
Hostname dash.

39:17.940 --> 39:19.200
Oh, that's my name.

39:19.230 --> 39:20.610
I am S2, right?

39:22.520 --> 39:23.600
Nats look up.

39:23.690 --> 39:24.970
I can do a gateway.

39:24.980 --> 39:26.090
That's my gateway.

39:26.690 --> 39:27.340
All right.

39:27.350 --> 39:31.670
So what I want to do effectively is I want to add a rule.

39:32.460 --> 39:33.480
Such that.

39:35.120 --> 39:46.730
IP route add I want to add a route in my host as is true, such that if anyone want to visit this network

39:46.850 --> 39:48.800
to slash 24.

39:49.550 --> 39:58.160
They have to go through this gateway because it's a different gateway and that's what we need to do.

39:58.430 --> 40:04.370
This will fail because I forgot something important to do.

40:06.110 --> 40:10.080
The reason this will fail is because this is an administrative operator, right?

40:10.100 --> 40:11.270
And you cannot add it.

40:11.450 --> 40:15.610
You have to start the container with the ability to change administrative setting.

40:15.650 --> 40:18.830
And so I have to restart.

40:18.830 --> 40:24.890
The container is one and is two with the flag that is called dash dash.

40:29.380 --> 40:34.600
Cap, add equal net admin and that would be a good a good thing to do.

40:34.600 --> 40:35.170
Right.

40:35.200 --> 40:36.550
How about we do this again?

40:36.550 --> 40:36.990
Right.

40:38.020 --> 40:45.100
It won't hurt Docker to stop as one Docker stop is too.

40:45.870 --> 40:46.980
Dr..

40:48.090 --> 40:51.570
Our aim is one is to wheelspin them up.

40:51.600 --> 40:52.950
We're not afraid.

40:54.390 --> 41:00.030
All we have to do is just literally Docker run dash, dash, name S-1, and then the network is the

41:00.060 --> 41:00.990
that's the back end, right?

41:00.990 --> 41:02.100
That was in the back end.

41:02.400 --> 41:09.690
And I want the let's spin up with the administrator of option cap add.

41:10.540 --> 41:11.200
Right.

41:11.380 --> 41:13.330
Equal net admin.

41:13.870 --> 41:14.260
Right.

41:14.260 --> 41:14.680
And then.

41:14.680 --> 41:15.860
Dee dee dee dee.

41:15.870 --> 41:16.390
Dee.

41:16.410 --> 41:17.260
Dee.

41:17.350 --> 41:17.770
O.

41:17.770 --> 41:18.360
N.

41:19.060 --> 41:19.610
Right.

41:20.400 --> 41:22.080
So we have a networking access.

41:23.420 --> 41:24.130
Sweet.

41:24.140 --> 41:25.730
So now I'm going to open up my first network.

41:25.760 --> 41:26.780
Did I forget anything?

41:26.810 --> 41:27.350
Nope.

41:27.350 --> 41:31.670
I'm connecting it so this way I'm going to spin it up and then go in and learn something right here.

41:31.700 --> 41:34.130
We're going to spin up and also connect it.

41:34.250 --> 41:35.210
Beautiful.

41:35.240 --> 41:37.580
Do it up.

41:37.700 --> 41:43.190
And now this guy is going to be in the front end, right?

41:43.580 --> 41:44.540
Let's do it this way.

41:44.660 --> 41:47.270
And this got to be a stew.

41:48.540 --> 41:49.590
How about that?

41:50.400 --> 41:51.630
Like nothing happened.

41:52.110 --> 41:52.770
Oh, we did.

41:52.770 --> 41:54.330
We get the same IP addresses.

41:55.000 --> 41:55.620
Probably not.

41:55.630 --> 41:55.900
No.

41:55.900 --> 41:59.830
We get the IP is because it was it was released and then we got it back.

41:59.890 --> 42:00.580
Sweet.

42:00.610 --> 42:02.260
Now let's bash back.

42:03.190 --> 42:04.690
Into the container.

42:05.080 --> 42:08.370
It's one bash now host named I.

42:08.570 --> 42:09.180
Right.

42:09.190 --> 42:11.200
So that's my first.

42:12.160 --> 42:13.900
I want to do a nice look up.

42:14.470 --> 42:15.790
What's your gateway?

42:16.360 --> 42:18.430
And let's add the rule.

42:18.430 --> 42:22.180
So now I say hey in my S-1 if someone.

42:23.230 --> 42:25.210
Well, let's go to the other container.

42:25.240 --> 42:28.330
Docker execute dash it is to bash.

42:28.840 --> 42:30.580
I'm going to do the same thing so I can.

42:30.580 --> 42:33.550
I can see every IP here in this lockup.

42:34.480 --> 42:34.800
Get.

42:35.980 --> 42:38.950
Oh, now I am in a stew.

42:39.460 --> 42:40.070
Right.

42:40.090 --> 42:41.440
That's my gateway.

42:41.440 --> 42:43.330
That's the supposed to be my gateway.

42:43.330 --> 42:45.160
But it's not really in the network.

42:45.160 --> 42:45.970
It's not my gateway.

42:45.970 --> 42:48.530
My gateway is something else I want for cert.

42:48.580 --> 42:55.660
I want to add a route to send packets this way so that it can reach anyone in that network.

42:55.660 --> 42:56.560
How do I do that?

42:56.590 --> 42:59.650
IP add route.

42:59.770 --> 43:00.400
Right?

43:01.470 --> 43:06.840
Also, it's our IP, that IP route add.

43:06.900 --> 43:11.480
If someone is going to 0.00 slash 24.

43:11.940 --> 43:14.670
Any IP address on this network.

43:15.470 --> 43:27.140
Pleas for them to ten 028123 instead of the default, which is ten 011 because that's the default gateway.

43:27.170 --> 43:28.880
Now I'm adding another route.

43:28.880 --> 43:33.770
If you think about it, you can actually change the default gateway so all your traffic goes there.

43:33.770 --> 43:35.150
But no, we don't want that.

43:35.150 --> 43:39.920
Certain traffic still needs to go to the default gateways for internet access, because if you change

43:39.920 --> 43:44.060
the default gateway, this gateway will get in and it will be confused.

43:44.600 --> 43:49.760
It might actually still work because it will be as if it's a very good idea.

43:49.760 --> 43:56.690
So you can you can have a centralized place for all Internet access and you can do logging and monitoring.

43:57.530 --> 43:59.990
Dude, a lot of stuff, man, you can do.

43:59.990 --> 44:05.990
Now, if I do a trace route on ten zero zero, let's do this.

44:05.990 --> 44:07.550
Ten 00.2.

44:10.190 --> 44:10.550
You know.

44:10.550 --> 44:11.280
What is that?

44:11.300 --> 44:12.440
Look what happened.

44:13.430 --> 44:14.420
We went.

44:14.450 --> 44:15.950
We want to go to 002.

44:15.980 --> 44:24.320
We correctly follow the route, says, Hey, I'm going to go to ten 00013, and then we drop dead.

44:24.830 --> 44:25.610
Why?

44:26.620 --> 44:27.030
Right.

44:27.270 --> 44:29.390
If you know how to race or out works.

44:29.760 --> 44:31.080
Penguins do the same thing, by way.

44:33.060 --> 44:35.820
They will just say, Hey, I couldn't do anything.

44:36.360 --> 44:41.760
The reason we couldn't get a result is, yeah, you added a route to take you to the gateway from as

44:41.760 --> 44:43.800
to right network.

44:44.650 --> 44:45.340
But.

44:46.570 --> 44:48.130
It's one has to respond.

44:48.130 --> 44:48.600
Right.

44:48.610 --> 44:56.590
So I would guarantee that Gateway actually took the package all the way to S1 and S1 tried to respond,

44:56.590 --> 44:57.490
but I couldn't.

44:57.760 --> 45:03.030
It says, Hey, I want to respond back to what is it, ten 012.

45:03.040 --> 45:03.240
Right.

45:03.250 --> 45:05.020
That's my that was my IP address.

45:05.050 --> 45:06.730
2.0.1.2.

45:06.730 --> 45:09.580
But I couldn't because I don't know how to follow the message.

45:09.580 --> 45:10.750
It's one couldn't.

45:11.080 --> 45:19.480
So what we can do is go back to this one and add a very similar rule so it can know how to forward the

45:19.480 --> 45:20.560
packets back.

45:20.560 --> 45:23.410
Right network is not magic, my friends.

45:23.410 --> 45:32.020
It's all logic IP route ad now if someone wants to go.

45:33.570 --> 45:36.930
In this network .1.0.

45:37.860 --> 45:42.510
Please go via ten .0.0.

45:43.260 --> 45:44.310
Dot three, right.

45:44.310 --> 45:46.650
That's my my gateway from this side.

45:46.650 --> 45:46.840
Right.

45:46.890 --> 45:52.170
Because remember, everyone sees the gateway as a different IP address based on their network.

45:52.500 --> 45:59.010
And I'm going to draw hopefully the the the pictures and I show them as in the screen, you can pose

45:59.010 --> 46:00.870
the screen as you go there.

46:02.600 --> 46:03.300
Beautiful.

46:03.320 --> 46:05.000
Now let's do ping.

46:05.030 --> 46:11.540
Ten 0.10200 works curl.

46:11.690 --> 46:13.700
Ten 0.01.2.

46:14.510 --> 46:16.010
Nice.

46:16.220 --> 46:16.780
Right.

46:18.380 --> 46:19.780
This is it works.

46:19.790 --> 46:21.770
Why does it say, oh, we didn't change it?

46:22.340 --> 46:25.040
Because remember, we changed it and then we deleted the container.

46:25.040 --> 46:27.040
But remember, just just take my word.

46:27.050 --> 46:28.370
This is S2, right?

46:30.200 --> 46:30.690
Right.

46:31.070 --> 46:34.670
A problem is like we cannot do curls to still.

46:35.390 --> 46:42.920
And the reason is maybe going to make another video because technically, Dad is still not aware of

46:42.920 --> 46:43.700
this thing.

46:43.940 --> 46:44.870
Yeah.

46:45.080 --> 46:48.650
Dennis is a slightly different beast in this scam.

46:48.680 --> 46:50.570
It couldn't figure out.

46:51.350 --> 46:53.720
How to route this traffic.

46:53.870 --> 47:00.440
So there is another route I'm missing, probably to propagate DNS so that everybody knows about everybody.

47:00.440 --> 47:03.920
But yeah, so this is one more limitation of my tutorial.

47:04.040 --> 47:06.410
So we'll figure it out eventually.

47:06.410 --> 47:07.900
Maybe, maybe it's not possible.

47:07.910 --> 47:18.080
So now if I go to S two and I say PINGEL ten 002, it works if I do curl.

47:19.330 --> 47:20.960
Works by the NHS's.

47:21.010 --> 47:21.900
Look up.

47:22.630 --> 47:24.490
002.

47:26.150 --> 47:27.370
And that doesn't make any sense.

47:27.850 --> 47:34.000
If I do a trace Route ten zero zero to look at the path, that's pretty, pretty neat for me.

47:34.870 --> 47:35.600
You go.

47:35.620 --> 47:36.760
You want to go here?

47:37.030 --> 47:38.820
We're going to take you to this gateway.

47:38.830 --> 47:44.230
And then that went it took it took us all the way there successfully.

47:45.250 --> 47:49.610
The only missing thing is the DNS, and I couldn't figure it out how to propagate DNS.

47:49.630 --> 47:50.970
All right, guys, I think we're going to stop here.

47:50.980 --> 47:53.890
This is a huge, large tutorial.

47:53.920 --> 47:54.660
Hope you enjoy it.

47:54.670 --> 47:55.840
I'm going to see you on the next one.

47:56.290 --> 47:58.660
One more one person piece before we end up.

47:58.810 --> 48:04.960
You can also add a script to add these rules every time they contain a restart by adding a script at

48:04.960 --> 48:06.490
the end of the Docker run.

48:06.970 --> 48:07.930
I didn't do that.

48:07.930 --> 48:09.410
But it's possible, right?

48:09.550 --> 48:12.670
Because these IP routing are ephemeral.

48:12.670 --> 48:16.090
The moment you restart the server, the container, they are gone.

48:16.510 --> 48:17.710
And yeah, one more thing.

48:17.710 --> 48:23.260
I know that you can all do most of this stuff with Docker compose, but I thought I'd get a little bit

48:23.260 --> 48:25.480
dirty and do it manually by hand.

48:25.480 --> 48:27.820
It's just I just like to know how things work.

48:28.180 --> 48:28.870
Yeah.

48:29.020 --> 48:30.430
Got to use the docker compose.

48:30.430 --> 48:33.880
I don't like yaml, but yeah, it's just another way.

48:33.880 --> 48:35.680
This way you can actually see exactly.

48:35.680 --> 48:37.150
You're building everything by hand.

48:37.150 --> 48:37.970
I like the building thing.

48:37.990 --> 48:38.440
My hand.

48:38.620 --> 48:39.640
It could be just me.

48:39.640 --> 48:44.680
You can have of course use Docker compose to build everything with one single script and just spin out.

48:44.680 --> 48:45.940
But what is the fun in that?

48:45.940 --> 48:46.720
There is no fun.

48:46.720 --> 48:47.870
There is no joy.

48:47.890 --> 48:49.090
Right back to the video.

48:49.850 --> 48:54.560
So yeah, I thought I had fun doing this stuff, so I thought, I'll share it with you guys.

48:54.590 --> 48:55.910
Hope you enjoy this video.

48:55.970 --> 48:57.170
I'm going to see you in the next one.

48:57.260 --> 48:57.680
You guys stay.

48:57.680 --> 48:58.130
Awesome.

48:58.160 --> 48:58.700
Goodbye.
