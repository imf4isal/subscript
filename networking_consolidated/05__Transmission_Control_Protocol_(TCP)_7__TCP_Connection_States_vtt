WEBVTT

00:00.060 --> 00:05.400
Another very important state when it comes to TCP.

00:07.540 --> 00:08.020
Connection.

00:08.020 --> 00:08.470
States.

00:09.060 --> 00:12.430
States will prove political must have states, right?

00:12.730 --> 00:16.150
By definition, because we have the idea of a connection.

00:16.420 --> 00:16.750
Right.

00:17.590 --> 00:20.200
Then the connection must go into a state diagram.

00:20.200 --> 00:20.410
Right?

00:20.410 --> 00:21.940
As always, that action is now closed.

00:21.940 --> 00:24.340
The connection is now established, the connection is now open.

00:24.340 --> 00:26.710
The connection is now waited.

00:26.710 --> 00:34.090
The connection is now, I don't know, finalized, whatever there is state that goes through the connection.

00:34.090 --> 00:39.400
And this is what we want to talk about some of at least some of these states and how critical they are.

00:39.820 --> 00:40.510
Let's jump into it.

00:41.770 --> 00:43.810
So TCP is therefore for protocol.

00:44.350 --> 00:48.880
By definition, it needs to maintain state and you better get these states right?

00:48.880 --> 00:49.180
Right.

00:49.870 --> 00:53.860
Both client and server need to maintain all sorts of states, right?

00:53.890 --> 01:01.260
Window size sequences, the state of the connection know the the length of the so you when you maintain

01:01.270 --> 01:05.530
all sorts of state windows are the sequence the state of a connection and the connection goes through

01:05.530 --> 01:06.880
many, many states.

01:07.030 --> 01:08.280
Let's hide again.

01:09.160 --> 01:16.240
Here's a diagram explaining the four way handshake to closes that connection.

01:16.420 --> 01:21.370
This time I added the states from left to right here.

01:22.180 --> 01:28.060
So the connection is start established, assuming it establishes the connection or starting technically

01:28.240 --> 01:28.990
closed.

01:28.990 --> 01:29.440
Right.

01:29.770 --> 01:30.670
And you establish it.

01:30.670 --> 01:32.140
But I'm not I don't want to go through that.

01:32.140 --> 01:35.140
I want to talk about this particular for states.

01:36.010 --> 01:40.360
The moment you want one, a client want to close the connection, it will send a fin.

01:40.360 --> 01:41.050
We talked about this.

01:41.260 --> 01:43.570
This is, of course, the fourth four way handshake.

01:44.230 --> 01:46.510
It will send different and it will go to a circle fin.

01:46.510 --> 01:47.080
Wait one.

01:47.920 --> 01:48.640
It has to wait.

01:49.030 --> 01:49.270
Right.

01:50.140 --> 01:55.990
And immediately to a moment the server sees the fin, it will go to a second clause weight and will

01:55.990 --> 01:57.040
send acknowledgement.

01:57.220 --> 01:57.490
Right.

01:58.300 --> 02:00.250
The second state and the server.

02:00.370 --> 02:00.820
Right.

02:03.260 --> 02:04.400
It will send an acknowledgement.

02:04.400 --> 02:06.140
I will go to a state called clause weight.

02:07.160 --> 02:11.450
The client would receive the client who initiated the fen.

02:11.450 --> 02:15.110
Right will go into ethical fin way too because they received an acknowledgement.

02:15.110 --> 02:17.360
Now we will incrementing in a state here.

02:17.930 --> 02:25.700
Meanwhile, the server will send the last that will send the fin its own fin to close the connection

02:25.910 --> 02:29.600
and will go to end to a last acknowledgement state.

02:30.080 --> 02:30.350
Right.

02:30.920 --> 02:36.740
And then the moment this client receives that find, its job is done.

02:37.250 --> 02:43.340
It goes into as they call time weight and is since the final request or the final segment.

02:43.640 --> 02:45.890
And that segment is the acknowledgement of the fin.

02:46.370 --> 02:51.080
The thing is, we don't know because that's the last one will never wait.

02:51.410 --> 02:53.540
The server will never respond to anything else.

02:53.900 --> 02:57.710
So technically we don't know if the EC is received or not.

02:57.740 --> 03:02.370
This is called the two general problem, right to general problem.

03:02.630 --> 03:07.100
You know, the two fighting generals where if I send an EC, how do I know if the actions received?

03:07.100 --> 03:07.730
You don't know.

03:07.910 --> 03:11.300
You have to wait for an approximately 4 minutes.

03:11.300 --> 03:16.550
And this limit is defined by the error of CRC, but the maximum segment length out there, which is

03:16.550 --> 03:17.570
2 minutes times two.

03:18.140 --> 03:18.410
Right.

03:18.590 --> 03:25.310
So let's wait for the whole 2 minutes until we make sure that the segments are all the segments are

03:25.310 --> 03:27.530
expired that are in flight.

03:28.130 --> 03:31.100
And this is the safest way and after which.

03:32.360 --> 03:33.800
That 4 minutes is done.

03:34.070 --> 03:35.120
We're going to close the connection.

03:35.510 --> 03:37.190
That's why when you do a nets state.

03:37.640 --> 03:38.000
Right.

03:38.360 --> 03:40.040
Nets that sorry you can.

03:40.580 --> 03:42.530
You're going to see a lot of connections and time.

03:42.530 --> 03:42.920
Wait.

03:44.280 --> 03:50.070
And yes, those take some memory because you will have to have your file discussed.

03:50.070 --> 03:51.420
They're open effectively, right?

03:52.020 --> 03:54.600
And they take a finite amount of memory effectively.

03:55.110 --> 03:58.650
And those source ports cannot be reused.

03:58.650 --> 03:59.820
They're being used here.

03:59.820 --> 04:02.310
You cannot really use them for anything else you have to wait for.

04:02.310 --> 04:09.480
The connection is closed and you cannot kill the connection immediately because data can't be send during

04:09.480 --> 04:17.130
this time and accidentally you will have an attack called the session resumption attack, which is a

04:17.250 --> 04:18.510
kind of a dangerous attack.

04:18.510 --> 04:18.620
Right.

04:18.630 --> 04:19.440
You don't want to do that.

04:19.860 --> 04:22.530
So that's why you leave the sockets open.

04:22.530 --> 04:28.830
But one trick whoever requested the fin will end up in this state.

04:29.070 --> 04:35.490
So if the client requests that the phone or the server request to defend, they will end up into the

04:35.490 --> 04:36.360
time wait state.

04:36.680 --> 04:36.980
All right.

04:37.680 --> 04:43.920
So if this is in annex, for example, on a chair, proxy or envoy and it close the connection, it

04:43.920 --> 04:46.800
will end up in timeout state so so as a back injury.

04:46.800 --> 04:48.300
June, what can you do here if you think about it?

04:49.230 --> 04:53.640
Well, I don't want my server to be flooded with this time waits right.

04:54.120 --> 04:56.220
And I really want to close some of these connections.

04:56.850 --> 05:05.640
You can if you own the front end and the back end, you can design a protocol such that you send a request,

05:05.640 --> 05:12.630
a normal request that is just normal data that tells the client to close is in a state.

05:12.930 --> 05:19.080
So you send a request and the client will initiate the field for you, and as a result you will clean

05:19.080 --> 05:20.520
yourself up a new close.

05:20.520 --> 05:20.850
Right?

05:21.270 --> 05:24.690
But the time wait will be declined decline because they don't care about client.

05:24.690 --> 05:27.030
You're going to have a lot of clients and you are you are one server.

05:27.270 --> 05:33.330
So that's one trick I found interesting where you can have the sockets time waited on the client side

05:33.330 --> 05:38.370
right and how do you do that if you control both the server and the client which is most full stack

05:39.270 --> 05:44.430
you know implementations don't do you can do this right you can do this trick and instead of actually

05:44.430 --> 05:51.340
you as a server closing these connections, initiating the first no do do the opposite, you know,

05:51.360 --> 05:56.250
send out a normal request, you know, a push notification to the client.

05:57.160 --> 06:00.970
That translates to effectively a clause of a connection, right?

06:01.240 --> 06:04.460
So if you receive this data, that means clause yourself.

06:04.480 --> 06:04.810
Right.

06:05.260 --> 06:09.700
And since the client will be initiating it the time where it will be in the client and you don't care

06:09.700 --> 06:10.780
about the client here.

06:11.050 --> 06:12.870
The most important thing is the sober here, right?

06:13.370 --> 06:13.670
Right.

06:14.320 --> 06:16.300
That's where all a lot of it's.

06:16.610 --> 06:18.370
And that's I find this very useful.

06:18.550 --> 06:18.870
All right.

06:18.880 --> 06:22.090
And with that, let's jump into the next lecture, guys.
