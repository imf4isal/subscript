WEBVTT

00:00.030 --> 00:01.470
Just like we did with the IP packet.

00:01.470 --> 00:07.440
We dive into the anatomy of the IP packet just like we did with the UDP, live into the UDP anatomy

00:08.370 --> 00:09.300
diagram itself.

00:10.020 --> 00:12.000
We're going to do the same thing with the TCP segment.

00:12.540 --> 00:15.000
What is the anatomy of the segment?

00:15.030 --> 00:15.930
How does it look like?

00:16.260 --> 00:17.220
What are the different headers?

00:17.820 --> 00:18.540
Let's jump into it.

00:19.860 --> 00:21.660
So the DCP segment header is 20 bytes.

00:21.660 --> 00:26.040
We talked about that a little bit and it can go up to 60 bytes based on additional options that you

00:26.040 --> 00:26.460
might add.

00:27.060 --> 00:35.730
DCP segment slides into an IP packet as data just takes that segment and it becomes normal IP packet

00:35.730 --> 00:36.120
data.

00:36.870 --> 00:40.800
The ports are 16 bits just like that stuff, but we have all sorts of stuff.

00:40.800 --> 00:45.660
We have sequences we talked about that, we have acknowledgement, we have floor control, we have more

00:45.660 --> 00:46.860
and more and more stuff.

00:47.220 --> 00:53.490
So that 20 bytes is basically fully taken and here's how it looks like.

00:53.580 --> 00:56.520
So there is a there's not much here, right?

00:57.060 --> 01:01.160
I'm going to cover my face, but it's exact I'm not covering anything here.

01:01.170 --> 01:09.360
So this is the DCP segment here because this is how it looks like these are the orifices if you want

01:09.360 --> 01:12.780
to look deep into how it looks like in details.

01:13.050 --> 01:16.110
But let's demystified again.

01:16.110 --> 01:18.150
Four bytes, right?

01:18.180 --> 01:19.080
Four octets.

01:20.790 --> 01:22.440
How many rows do we have in for bytes?

01:22.440 --> 01:25.170
One for bytes to for bytes.

01:25.650 --> 01:27.750
Three, four and.

01:28.770 --> 01:32.940
Five and then the same thing as the IP.

01:33.090 --> 01:35.640
You can go with options and increase that if you want.

01:36.600 --> 01:40.560
That gives you like one, two, three, four, five, five times four.

01:40.560 --> 01:43.500
That gives you 20 bytes by default.

01:44.370 --> 01:44.640
All right.

01:44.640 --> 01:48.850
Just start with the portions of the source port, destination port.

01:48.870 --> 01:49.970
I thought we talked about this.

01:49.980 --> 01:51.090
This is going to clear.

01:51.600 --> 01:52.740
You have 16 bit.

01:52.860 --> 01:53.720
That's pretty much enough.

01:53.730 --> 01:55.170
That's more than enough, actually.

01:55.470 --> 01:56.820
16 bit ports.

01:56.850 --> 02:05.040
On the source side, the 64 bit port on the destinations are enough for us to address most of the applications

02:05.040 --> 02:06.150
that we want to address.

02:06.400 --> 02:06.640
Yeah.

02:07.440 --> 02:08.550
And sequence numbers.

02:08.550 --> 02:09.340
We talked about that.

02:09.360 --> 02:11.420
Remember when I said, okay, go to that, send.

02:11.420 --> 02:15.030
The less sequence is synchronize our sequence numbers.

02:15.420 --> 02:20.160
Every time you send a SIG segment, you include the sequence number for that segment.

02:20.430 --> 02:22.560
And this keeps increasing, increasing, increasing.

02:22.980 --> 02:27.720
And this is what to at the board 23 that means it's a 4 billion something.

02:28.020 --> 02:32.550
It's a lot, but it can't run out easily.

02:32.580 --> 02:34.050
You're sending a lot of transmission.

02:34.530 --> 02:38.470
That's why the sequence will go back, will be will go back to zero.

02:38.490 --> 02:40.220
It will do a roundabout.

02:40.230 --> 02:43.080
But the sequence, at the end of the day, they will run out the 4 billion.

02:43.560 --> 02:44.310
Just like that.

02:44.670 --> 02:44.930
Right.

02:44.940 --> 02:48.120
Well, if you sending a lot of transmission, the same connection.

02:48.120 --> 02:49.590
So they all go back to zero.

02:49.890 --> 02:53.070
And they will be identified as the newest sequences.

02:53.070 --> 03:00.690
And there are all sorts of, you know, remedies to solve these kind of problems in the sequence roundabout,

03:00.690 --> 03:01.290
as they say.

03:01.720 --> 03:01.980
Right.

03:02.190 --> 03:06.390
We had the same problems, Postgres and their transaction, the transactions also 32 bit.

03:06.690 --> 03:11.010
So it means you have you can have up to 32 to the bar.

03:11.010 --> 03:13.680
32 also means only 4 billion transactions.

03:14.430 --> 03:15.540
So you can easily.

03:17.530 --> 03:19.720
Deplete your transactions in and phosphorous.

03:19.720 --> 03:23.850
And we talked about that in my database cause I can always remember exactly the same thing.

03:23.860 --> 03:27.220
So if the ACC flag is set, what is the act like?

03:27.250 --> 03:28.120
There's a ACH flag.

03:28.600 --> 03:33.910
That means what will happen is you're acknowledging that sequence number effectively.

03:34.060 --> 03:35.770
So that's the acknowledgment number of that.

03:36.550 --> 03:38.020
And why do you might say why?

03:38.020 --> 03:41.020
Why am I why do I have sequence number to acknowledge the number?

03:41.050 --> 03:42.010
Can I just have a bit?

03:42.010 --> 03:44.320
And then the sequence number would be like an order number?

03:44.710 --> 03:49.510
No, because you can send data and you're acknowledging you can send data while you're acknowledging

03:49.510 --> 03:50.110
something else.

03:50.560 --> 03:50.710
Right.

03:50.800 --> 03:52.270
So you need its own number.

03:54.680 --> 03:56.090
Flow control, windows, eyes.

03:56.420 --> 04:04.130
How much does the do I effectively as a server can handle?

04:04.640 --> 04:10.520
If I if I had to play back to you with a segment and I specified this window size this is to bar 16.

04:11.060 --> 04:17.390
That means what 65 K that's the maximum default, but it can go higher than that.

04:17.390 --> 04:21.530
We're going to explain how like 65 kilobytes, that's the maximum I can handle.

04:21.530 --> 04:22.400
That's too low.

04:22.400 --> 04:23.810
If you think about it, it was like, what?

04:24.260 --> 04:26.690
You can only have 65 K, that's nothing.

04:27.020 --> 04:30.410
So there isn't a little flag that can make the window size up to one GB.

04:30.950 --> 04:33.000
So talk about flow control, right?

04:33.020 --> 04:41.120
But that's basically you as a responder telling the client that, hey, this is how much I can handle.

04:41.120 --> 04:42.140
That's my window size.

04:42.320 --> 04:43.910
Don't go above that, please.

04:45.950 --> 04:47.480
Nine bit flags.

04:47.630 --> 04:51.260
These this flags are used for all sorts of thing.

04:51.260 --> 04:52.640
So there is a sin flag.

04:52.730 --> 04:53.480
We talked about this.

04:53.480 --> 04:54.980
This is the initial handshake.

04:55.340 --> 04:56.840
That is a fin request.

04:56.840 --> 04:58.940
I say this is how close the connection.

04:58.940 --> 05:00.230
Please reset.

05:00.830 --> 05:02.030
I don't know what happened.

05:02.930 --> 05:04.010
All bets are off.

05:04.640 --> 05:06.380
You're sending me something bad?

05:06.890 --> 05:08.810
Reset the connection Push.

05:08.810 --> 05:13.730
You're pushing data night with some acknowledgement you're acknowledging something argent of this segments.

05:13.730 --> 05:15.860
Argent I never seen this use actually.

05:16.220 --> 05:19.550
I don't know if there is anything on it so easy.

05:20.090 --> 05:26.180
And this is, this is part of the congestion control that we talked about, the flag that says, okay,

05:26.180 --> 05:29.060
this is we we set a flag.

05:29.480 --> 05:35.420
We talked about routers not dropping packets in case of congestion by sitting something called the in

05:35.450 --> 05:36.830
the congestion notification.

05:37.130 --> 05:44.420
That's that kind of fit a bit that says the receiver received that notification.

05:44.420 --> 05:49.340
And now we're telling the sender that, hey, by the way, the road there was about to be a congestion

05:49.340 --> 05:50.780
just through careful, right.

05:51.020 --> 05:55.550
Or the moment you do that you get to reduce your congestion window.

05:55.640 --> 06:03.710
The CW or that means congestion window reduce that's when that's the sender telling the client that's

06:03.710 --> 06:08.960
that's interesting the sort of I by the way I actually listen to you and I reduce the congestion window.

06:08.960 --> 06:10.130
We're going to talk about all that stuff.

06:10.130 --> 06:10.310
Right.

06:10.310 --> 06:12.110
But this is part of that congestion window.

06:12.470 --> 06:20.840
And this is kind of another bid that goes into this whole thing, which is the knowns, the notification

06:20.840 --> 06:23.450
knowns, which is part of the congestion control.

06:23.450 --> 06:26.900
So all these flags, man, as part of the congestion controls.

06:26.900 --> 06:31.820
One of the interesting thing to me that I'm really enjoying learning about.

06:33.300 --> 06:35.280
The maximum segments eyes.

06:36.060 --> 06:43.110
I think this is one of the most critical thing to understand, you know, because when you send a bigger

06:43.110 --> 06:44.790
request or you're uploading a file.

06:45.600 --> 06:45.930
Right.

06:46.850 --> 06:52.340
It's critical to understand what is the maximum segment size.

06:52.910 --> 06:54.980
Again, we're in layer four land here.

06:55.400 --> 07:00.290
So how much data I can send so that it can pack nicely in one segment?

07:01.710 --> 07:08.220
It all comes back to the packet size and it all comes back to what, the maximum transmission unit of

07:08.220 --> 07:11.130
your network, which is fixed in your network.

07:11.470 --> 07:14.520
And so the segments are depends on the empty MTA of the network.

07:15.120 --> 07:20.430
Usually it's 512, but can go up to 146, 14, 60.

07:21.580 --> 07:27.700
And this 1460 is how it is calculated is because the default empty of the internet is really 1500.

07:27.880 --> 07:32.590
Even in my Mac, if you go to the Wi-Fi network, it says 1500.

07:32.590 --> 07:35.370
That's the that's the maximum transmission unit.

07:35.380 --> 07:39.100
That's the maximum frame data that you can send.

07:39.790 --> 07:40.240
That's it.

07:40.240 --> 07:43.900
1500 bytes, 1.5 kilobytes in a single frame.

07:44.350 --> 07:44.560
Right.

07:45.250 --> 07:45.640
So.

07:46.590 --> 07:51.660
That data includes the IP back and include the maximum the segment to sell.

07:51.660 --> 07:51.900
Right.

07:52.170 --> 07:59.040
That means include all the garbage headers that the IP has, ads and the segments that are for TCP ads.

07:59.040 --> 07:59.280
Right.

07:59.610 --> 08:07.990
So 20 byte, remember, 20 bytes in the IP and 20 bytes in what, in TCP?

08:08.580 --> 08:11.970
So we have 100 -40.

08:12.450 --> 08:15.300
It gives you 140 611460.

08:16.500 --> 08:21.660
But are the idea of the jumbo frames as well and to you goes up to 9000, right.

08:21.660 --> 08:22.560
About 9000.

08:22.560 --> 08:24.300
I've never seen anything above that.

08:24.690 --> 08:24.900
Right.

08:24.900 --> 08:30.300
But if you have, you can dust cloud, Amazon Cloud and all these cloud providers.

08:30.300 --> 08:34.890
If they can go beyond that, it's probably a good idea.

08:34.980 --> 08:41.070
I don't know if there are limitations for those jumbo frames, but yeah, and this is that can go beyond

08:41.070 --> 08:43.470
that if your frames can support it.

08:45.000 --> 08:47.130
Now, let's go to the next lecture.

08:47.190 --> 08:48.750
Talk more about flow control.
