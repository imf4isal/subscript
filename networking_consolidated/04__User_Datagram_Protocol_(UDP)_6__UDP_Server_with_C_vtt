WEBVTT

00:00.120 --> 00:06.900
All right, guys, now that we have built a UDP server using JavaScript harbor, we go to the lowest

00:06.900 --> 00:11.160
level and try to see how is it built a UDP server.

00:12.140 --> 00:12.530
Using.

00:12.530 --> 00:12.860
See?

00:14.240 --> 00:17.660
So this is a code I took from Nicole.

00:18.530 --> 00:22.470
This is the GitHub page, if you're interested to see the whole code.

00:22.720 --> 00:33.440
I did a few changes, but in general this is the gist of how to run UDP server to listen on on incoming

00:33.620 --> 00:34.540
data grams.

00:34.550 --> 00:34.760
Right.

00:34.760 --> 00:35.630
So let's go through this.

00:35.930 --> 00:38.900
These are the libraries that we require.

00:38.900 --> 00:43.490
So a studio for printf on this lab string socket.

00:43.490 --> 00:48.320
Definitely, we're going to need the socket working with socket of NetApp and iiNet edge.

00:48.650 --> 00:51.530
So I'm going to create a main page, main function.

00:51.980 --> 00:54.890
This is where the first function that is going to get called by default.

00:55.040 --> 00:55.330
No.

00:55.700 --> 00:57.410
And we're going to hardcoded the port.

00:57.590 --> 01:01.550
I'm going to listen on UDP port 5501 very critically.

01:02.840 --> 01:05.510
I'm going to create a socket file descriptor.

01:05.960 --> 01:07.730
This is the integer that we talked about.

01:07.730 --> 01:08.570
Very critical.

01:08.570 --> 01:08.840
Right.

01:09.200 --> 01:12.590
Talking about like how is this socket file the was created.

01:12.590 --> 01:17.030
It's not created until you actually create a socket.

01:17.360 --> 01:20.030
You know, so this is these are the structures.

01:20.300 --> 01:21.650
So this is for the remote address.

01:21.650 --> 01:23.300
This is for my address.

01:23.300 --> 01:25.880
And effectively, this is the remote address.

01:25.880 --> 01:33.230
There's whoever connects to me, I'm going to allocate a structure of this type structure address because

01:33.710 --> 01:38.180
to us, Node.js, remember, it was it was just literally a string 127001.

01:38.180 --> 01:39.770
But boom, done here.

01:39.770 --> 01:45.350
No, there is a structure that's called address and you had to create two now, one for you and one

01:45.350 --> 01:46.940
for the destination.

01:46.940 --> 01:48.650
Again, this is just the address.

01:48.710 --> 01:52.160
It's not really I think it does have that port as well.

01:53.300 --> 01:55.820
We allocate a buffer of 1024.

01:55.820 --> 01:59.420
So this is an array of 1024 bytes.

02:00.370 --> 02:04.490
And this we were going to use this to receive data from the data columns, right?

02:04.790 --> 02:12.410
So you can allocate that based on different sizes, you know, by the this is how much you can handle

02:12.410 --> 02:13.010
at once.

02:14.260 --> 02:14.500
Derek.

02:14.620 --> 02:21.310
Adam Wise again, this is just a count that this doesn't include the eight byte headers of the UDP write

02:23.020 --> 02:23.830
the circuit length.

02:23.950 --> 02:27.490
Even the length of the address sizes has a structure itself.

02:27.490 --> 02:28.660
So you could define that.

02:28.780 --> 02:34.510
And here's the fun part creating a socket, just like we did that we do UDP with Node.js, we're creating

02:34.510 --> 02:39.550
a socket and we're going to create EFI in it, which is IPV four version, The Family.

02:40.500 --> 02:41.490
And then psychedelic.

02:41.640 --> 02:49.140
I mean I want to UDP and have forgot was that last zero one so once we cleared that I sign it to the

02:49.140 --> 02:54.210
socket file the script that I'm just like that we get I have a file descriptor which is just a number.

02:54.630 --> 03:02.820
This number is used by the operating system to identify when a data gram comes, it will hash all the,

03:03.150 --> 03:10.350
you know, the source destination, blah, blah, blah and find out what is the socket description lives.

03:10.350 --> 03:16.740
It's just a table at the end of the this is a pointer to a table with all the actual information stored

03:16.740 --> 03:17.280
in memory.

03:17.460 --> 03:23.430
And so it's socket file descriptor and you have a certain amount limit and how much, how many you can

03:23.430 --> 03:25.140
open and certain thing.

03:25.140 --> 03:28.500
I believe that defaults 10,000, but you definitely can increase out.

03:29.400 --> 03:35.310
I said memory something we have never have to do with JavaScript because it's dynamically allocated.

03:35.310 --> 03:40.410
This is you have to, you know, do everything yourself here and see.

03:40.440 --> 03:44.960
So I want to set the size of the address in my address.

03:44.960 --> 03:47.520
So I look at specific memory.

03:47.700 --> 03:51.600
This is the size of it, the structure and stuff populating the structure.

03:52.650 --> 03:55.830
The family is a definite name and.

03:58.150 --> 04:03.130
The port this the port specified and the address.

04:03.580 --> 04:07.030
I want only to listen to 127001.

04:08.990 --> 04:13.940
And this is the function that converts a string into an actual address in its address.

04:14.630 --> 04:21.190
And finally, the bind I want to actually listen listen on this socket, which is we created it, right?

04:21.530 --> 04:27.410
So every time you create that, you get a socket for the scatter, but only when you bind things actually

04:27.410 --> 04:27.740
happen.

04:28.670 --> 04:31.010
Because when you bind, what do you want this to?

04:31.040 --> 04:31.490
Who?

04:31.490 --> 04:32.240
Who are you?

04:32.360 --> 04:33.440
I have no idea.

04:34.370 --> 04:36.550
This didn't actually specify anything.

04:36.560 --> 04:39.730
You just tell me this is an IPV four UDP.

04:39.740 --> 04:44.360
But where do you want to bind this socket to or a binding it to this address?

04:44.360 --> 04:47.990
Which address, which board and exactly what would you do?

04:48.290 --> 04:54.170
We specify, hey, I want to bind it to this address and see you have to specify the size for, you

04:54.170 --> 04:55.760
know, that's that's how C works.

04:55.940 --> 04:57.500
You have to tell me everything.

04:57.620 --> 04:59.900
Basically, it's kind of double edged sword.

04:59.900 --> 05:00.800
I kind of like it.

05:00.800 --> 05:02.700
I love I want to go back to C and learn it.

05:02.700 --> 05:05.090
The last time I wrote C card was 2001.

05:05.090 --> 05:06.380
Maybe when I was in uni.

05:07.070 --> 05:07.850
That's pretty much it.

05:08.600 --> 05:12.170
But yeah, this tells you the address size and here is it.

05:12.380 --> 05:18.080
You're binding and now you want to receive data and the moment you receive data you will receive it

05:18.080 --> 05:19.970
on what you tell the operating system.

05:19.970 --> 05:28.430
I want to receive on this socket file descriptor and put the data in this buffer and here's the size

05:28.430 --> 05:29.060
of the buffer.

05:29.720 --> 05:33.260
I don't remember was zero odd, but this is the socket address.

05:33.830 --> 05:38.510
Whoever sent that datagram place their address right here.

05:38.720 --> 05:40.640
And this is the size of that address.

05:41.790 --> 05:44.400
Effectively, and then we're going to print off that buffer.

05:44.700 --> 05:45.870
How about we actually run this?

05:46.350 --> 05:47.670
And I'm like, Telescoped.

05:47.910 --> 05:48.870
You going to have to compile?

05:48.870 --> 05:50.850
Remember those days, guys, when you compose stuff?

05:51.720 --> 05:55.050
It is GTC by default in a stolen everyone in windows.

05:55.050 --> 05:55.820
I don't believe it is.

05:55.830 --> 06:00.540
So you have to install the the GCSE compiler mean let's see.

06:00.660 --> 06:01.800
And that's the file.

06:02.370 --> 06:03.030
That's my file.

06:03.030 --> 06:03.270
Right.

06:03.450 --> 06:09.120
Do you mean the C and Mac in in Mac and Linux.

06:09.120 --> 06:13.320
Are you going to get a executable and in Windows are going to get not E if by which you double click

06:13.770 --> 06:17.190
to execute you do what is the output error out.

06:17.670 --> 06:20.040
I don't know how to to control this name.

06:20.220 --> 06:20.550
Right.

06:21.150 --> 06:23.840
I believe that you can do a space and then specify that.

06:24.390 --> 06:28.830
And just like that, we're ready to listen how to connect to this thing.

06:29.040 --> 06:31.560
Well, beautiful, beautiful notes, cat.

06:31.830 --> 06:36.810
Same thing we did with UDP and C, right?

06:36.810 --> 06:41.610
Dash you udp mode 127.0.01 and I already forgot what the port was.

06:42.210 --> 06:45.810
The port by 501 by 501.

06:47.100 --> 06:53.640
I'm going to hit enter and c i c udp server sub.

06:54.450 --> 06:54.710
And I'm.

06:54.770 --> 06:55.730
Would I enter?

06:57.940 --> 06:59.920
That program is immediately terminated.

06:59.980 --> 07:02.020
There is no loop or anything like that.

07:02.320 --> 07:02.770
Guess what?

07:03.010 --> 07:07.240
When you call, you have to actually continue to receive data.

07:07.270 --> 07:07.600
Right.

07:07.720 --> 07:11.230
But this program was so simple that the receipt of the first data is received.

07:11.260 --> 07:12.250
It just shuts down.

07:12.700 --> 07:12.940
Right.

07:13.360 --> 07:13.960
Got data.

07:14.070 --> 07:14.460
Hi.

07:14.800 --> 07:15.130
So.

07:16.210 --> 07:16.630
And why?

07:16.660 --> 07:17.620
Because there is no loop.

07:18.220 --> 07:21.220
And we see her saying, wow, I don't have to look, but you have to.

07:21.550 --> 07:22.000
Right.

07:22.420 --> 07:26.500
Because your C program is doing exactly what you tell it.

07:26.650 --> 07:28.990
You receive data, you print it and you exit.

07:29.840 --> 07:33.550
So you have to do a loop to continue receiving data if you want.

07:33.780 --> 07:33.930
Right.

07:35.740 --> 07:40.480
So there was the kind of a deep dive, if you will, of what is exactly happening.

07:40.720 --> 07:44.560
And I can choose to print that the not addressed because I have that right here.

07:44.560 --> 07:50.380
I can print that information, you know, and I can print who is the source, you know, port and all

07:50.380 --> 07:51.610
that information as well.

07:51.850 --> 07:52.600
Print it right here.

07:53.120 --> 07:53.560
All right.

07:54.010 --> 07:54.730
But we enjoyed it.

07:55.180 --> 07:56.140
We're going to see on the next one.
