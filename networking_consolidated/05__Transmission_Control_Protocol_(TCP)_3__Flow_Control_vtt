WEBVTT

00:00.060 --> 00:00.600
All right.

00:00.630 --> 00:03.240
The idea of floor control.

00:05.390 --> 00:08.480
You know, this is one of the concerns that confused me the longest.

00:08.480 --> 00:12.770
You know, I always confused the flow control with congestion because they sound the same, but they

00:12.770 --> 00:13.950
are not, believe me.

00:13.970 --> 00:15.500
Flow control was invented first.

00:16.400 --> 00:16.730
Right.

00:16.940 --> 00:18.980
And try to answer this questions.

00:20.350 --> 00:23.000
How much data the receiver can handle.

00:23.410 --> 00:24.150
I'm standing there.

00:24.160 --> 00:24.910
I'm a sender.

00:25.240 --> 00:26.710
Like I can send all data on one.

00:26.710 --> 00:31.540
I have a huge bandwidth in my internet how much that a server can actually handle it.

00:31.540 --> 00:32.800
Because that's not the case, right?

00:32.830 --> 00:41.590
Back in the old days, you have all the bandwidth, but you don't know of the server can actually handle

00:41.590 --> 00:47.470
that or the receiver doesn't have to be a server, you know, and that Flow Control tries to answer

00:47.470 --> 00:47.710
that.

00:47.710 --> 00:52.810
Now I'm going to disappear here because all the slides are really crowded.

00:52.990 --> 00:59.620
Well, so let's go ahead and talk about flow control, how much the servers can handle.

01:00.400 --> 01:05.260
So they want to sentence segments to be less this simplify and say, hey, I want to send ten segments.

01:06.760 --> 01:07.600
You can do it this way.

01:07.600 --> 01:07.810
Right?

01:08.800 --> 01:12.160
Essence Segment one to be send one segment.

01:13.160 --> 01:13.850
And then wait.

01:14.890 --> 01:18.250
You have all the segments ready and the client side.

01:19.090 --> 01:19.420
But.

01:20.660 --> 01:21.880
You're sending in one by one.

01:21.890 --> 01:23.870
You send a segment and you wait.

01:26.300 --> 01:27.710
You are faithful to the acknowledgement.

01:27.710 --> 01:28.830
You receive acknowledgement.

01:28.860 --> 01:29.960
Then you send the second segment.

01:30.630 --> 01:31.730
You wait for the acknowledgement.

01:32.360 --> 01:38.270
So the third segment, then you see for acknowledgement that you are paying for each segment.

01:38.270 --> 01:44.270
What however latency between you and Amby that means all that outers that are in the middle.

01:44.570 --> 01:51.020
That means all the routers, the work that they do, all the switches, all that time to live shenanigans

01:51.020 --> 01:55.610
that the routers do or you know, they they decrement the time will live, they rewrite the packet they

01:55.610 --> 02:05.090
run, they do an acting, all the work, all the latency that is added between and B or your your enforcing

02:05.090 --> 02:09.110
it every segment, you know, it is very slow.

02:09.530 --> 02:10.700
You never do this.

02:10.700 --> 02:12.890
You never send one segment and then wait.

02:12.890 --> 02:16.850
And I made it green because now we're in in layer four land only.

02:16.850 --> 02:19.010
I don't care about layer three that no right.

02:19.070 --> 02:21.260
Or, or playing with this land.

02:21.290 --> 02:23.810
So this is without any floor control that anything like that.

02:24.950 --> 02:31.010
So the idea here, this is what we think thought about is like okay listen to segment it's way bad idea

02:31.040 --> 02:37.820
nobody told us that we need to be able to send multiple segments and then get one ACH because now I

02:37.890 --> 02:43.610
can I can take the latency once with seven segments, for example, and then wait.

02:44.210 --> 02:48.230
The question is how much can I send?

02:48.740 --> 02:52.310
Now we agree I can send multiple segment, but the question is how much?

02:52.970 --> 02:54.100
That's beautiful, right?

02:55.430 --> 02:57.410
I can send one, two or three.

02:58.930 --> 03:00.460
In parallel almost.

03:01.210 --> 03:05.260
And then be will immediately acknowledge all of them with one act, right.

03:05.350 --> 03:09.580
Act three, all of them acknowledged powerful.

03:10.330 --> 03:15.790
But the trick here is you assumed that B can handle three segments.

03:15.790 --> 03:17.470
So you sent them and you were lucky.

03:17.740 --> 03:23.170
The question is how much A can send and the other question is how much beacon handle?

03:23.170 --> 03:23.530
Right.

03:24.010 --> 03:24.880
That's the answer.

03:25.360 --> 03:26.740
Right to the answer.

03:27.160 --> 03:28.570
That's the question that I tried to answer.

03:28.570 --> 03:30.250
And this is called floor control.

03:30.280 --> 03:34.060
The flow controls the window that this guy need to maintain.

03:34.630 --> 03:35.020
Right.

03:35.380 --> 03:40.240
Such that be is not overloaded with packets.

03:40.930 --> 03:44.080
Second example, when do you be segments arrived?

03:44.080 --> 03:46.300
They are put in something called the receivers buffer.

03:46.570 --> 03:51.040
You know, they don't just put in the air, you know, be or receive them.

03:51.160 --> 03:52.120
They put it in the buffer.

03:52.420 --> 03:52.720
No.

03:53.170 --> 03:56.530
And this buffer has a limit like that outers we talked about.

03:56.530 --> 03:56.830
Right.

03:57.310 --> 03:58.720
There are a limit to these buffers.

03:59.410 --> 03:59.890
And then.

04:01.580 --> 04:08.240
If you send so much data, so much segments, if the buffer is full, those packets will be dropped,

04:08.720 --> 04:09.500
no question.

04:10.540 --> 04:10.780
Right.

04:11.140 --> 04:17.800
So the solution here is we need to let the sender know how much you can handle as be.

04:18.400 --> 04:18.730
Right.

04:19.210 --> 04:19.580
You can.

04:19.600 --> 04:21.550
You have to send to this window.

04:22.180 --> 04:22.690
Right.

04:22.720 --> 04:26.370
In this case, that buffer need to be notified to a.

04:26.410 --> 04:26.620
So.

04:26.620 --> 04:30.220
Hey, dude, I can handle only this much segment.

04:30.880 --> 04:31.260
What?

04:31.640 --> 04:32.030
What?

04:32.320 --> 04:37.420
There's not a number of segments per se, because each segment has the maximum segment size, but it's

04:37.420 --> 04:38.740
actually a number of bytes.

04:38.980 --> 04:39.330
Okay.

04:39.330 --> 04:41.670
Hey, I can handle 8000 bytes.

04:41.680 --> 04:42.620
Whatever I.

04:44.370 --> 04:45.570
And back to those them.

04:45.780 --> 04:46.320
Back to us.

04:46.320 --> 04:46.630
Right.

04:46.650 --> 04:47.370
We talked about this.

04:47.370 --> 04:48.810
This is called the receiver window.

04:49.200 --> 04:53.070
It's called the flow controls, all window size and also called the receiver window.

04:53.460 --> 04:53.760
Right.

04:53.760 --> 04:55.770
And this is basically it.

04:55.800 --> 04:56.100
Right.

04:56.370 --> 05:03.300
So the receiver sends a segment replying or an acknowledgement, for example, or something, and it

05:03.300 --> 05:09.950
can include its window size in the acknowledgement or in the date it has since they zone, which I know

05:10.440 --> 05:16.410
both actually both guys do not just the receiver because everyone is this in done or receiver and TCB

05:16.410 --> 05:18.180
because it's a bidirectional protocol, right.

05:18.360 --> 05:21.960
So whenever you see RW and that's the receiver window.

05:22.440 --> 05:22.770
Right.

05:23.070 --> 05:25.260
And that's just the short.

05:28.140 --> 05:29.160
Way of saying it.

05:30.270 --> 05:31.500
So it's 16 bit.

05:32.190 --> 05:35.370
So it can go up to 65, 55, whatever, right?

05:35.670 --> 05:40.590
64 kilobyte and it is updated with each acknowledgement.

05:40.590 --> 05:45.830
It will tell you that, hey, my receiver windows this, my receiver windows this, my receiver and

05:45.840 --> 05:46.590
does actually this.

05:46.830 --> 05:47.580
And guess what?

05:48.990 --> 05:50.910
Why is with the window size change?

05:51.390 --> 05:57.060
Because technically, if you think about it, it can calculate based on the acknowledgement how much

05:57.060 --> 05:59.310
the current window is.

05:59.880 --> 06:00.540
But guess what?

06:01.140 --> 06:03.300
You're not the only one talking to me, son.

06:03.780 --> 06:06.990
I have thousands of other clients and thousands of other connections.

06:06.990 --> 06:13.650
So I'll tell you if I'm full, if I decided halfway through that, hey, other applications are taking

06:13.650 --> 06:16.230
a lot of memory so I can already use this or I am.

06:16.230 --> 06:16.920
Hey, I'm going.

06:17.000 --> 06:19.200
I have a lot of little more buffer now.

06:19.800 --> 06:20.760
Send more data.

06:21.540 --> 06:28.980
So this or receiver windows are always changing and the client is always notified of this new change.

06:29.250 --> 06:30.330
So let's take an example.

06:30.600 --> 06:35.240
I send segment one, get it there, and then window size is okay.

06:35.260 --> 06:40.290
Hey, I can handle up to three acknowledged and it can send three segments.

06:41.240 --> 06:42.930
Yeah, you can send more.

06:43.230 --> 06:44.070
Don't be shy.

06:44.130 --> 06:45.090
Sending just one.

06:45.090 --> 06:45.660
Send more.

06:45.660 --> 06:46.290
Said two more.

06:46.740 --> 06:47.720
So Athens three.

06:47.790 --> 06:48.480
Boom, boom, boom.

06:48.870 --> 06:50.280
And it's felt and wait.

06:50.400 --> 06:51.380
I acknowledge four.

06:52.170 --> 06:52.530
Right.

06:52.530 --> 06:55.800
And it tells you, hey, I still I still have room for three.

06:55.800 --> 06:56.450
Don't send more.

06:57.230 --> 06:57.540
All right.

06:57.960 --> 07:02.100
And then five, six, seven digit it received acknowledged.

07:05.090 --> 07:06.410
Talk about sliding window.

07:06.420 --> 07:11.000
So sliding window here is really the same concept.

07:12.020 --> 07:12.470
Right.

07:13.010 --> 07:14.990
But it's cinder.

07:16.260 --> 07:17.010
Property.

07:17.520 --> 07:19.920
But it's for the same thing for the receiver window.

07:20.010 --> 07:26.370
The major problem with this is like the client or this, and I can't really keep waiting for all the

07:26.370 --> 07:28.080
acknowledgement for all the segments.

07:28.090 --> 07:28.310
Right.

07:28.920 --> 07:33.060
So if I send 1 to 3 and I got a laundry for two, right.

07:33.060 --> 07:36.900
That should be enough for me to know how much I can send.

07:37.470 --> 07:37.870
More.

07:37.890 --> 07:38.180
Right.

07:38.190 --> 07:39.150
I can just like.

07:39.150 --> 07:39.510
Oh, right.

07:39.510 --> 07:41.730
Oh, I, I can't.

07:42.090 --> 07:43.810
Can I send more data or not?

07:43.830 --> 07:48.060
Or am I stuck with the am I stuck with three now or two?

07:48.420 --> 07:49.830
Well, how much can I send?

07:50.160 --> 07:50.540
All right.

07:50.910 --> 07:53.730
You can effectively just slide the window.

07:53.910 --> 07:54.240
Right.

07:54.420 --> 07:55.440
Let's take an example here.

07:57.420 --> 07:59.820
So if I am initially my window sizes three.

07:59.820 --> 08:05.210
Right, which is basically identical to the receiver, you say one, two, three, you send the 1 to

08:05.210 --> 08:05.430
3.

08:05.790 --> 08:14.400
But B for some reason or another does not because it three was lost necessarily.

08:14.490 --> 08:14.940
Right.

08:15.570 --> 08:16.800
Could be is the different process.

08:16.920 --> 08:18.150
But acknowledge only two.

08:18.270 --> 08:20.190
So acknowledge two and one are acknowledged.

08:20.520 --> 08:21.090
So you can.

08:22.100 --> 08:26.930
Keep the window size fixed but just slide it so that keep three.

08:27.260 --> 08:29.480
Because we might need to send three again.

08:29.890 --> 08:30.140
Right.

08:30.680 --> 08:32.240
And four and five.

08:34.130 --> 08:39.830
So now I can basically discard the one and two because I know they are acknowledged and I'm going to

08:39.830 --> 08:46.670
just slide my window one more and and I can choose to send three, four or five again if I want to if

08:46.670 --> 08:49.850
I want to decide the transmission or I can decide to wait a little bit more.

08:50.480 --> 08:54.950
So here I'm going to send four and five because this way for a little bit more for three.

08:55.280 --> 08:59.300
So I send four and five and now I get the acknowledgement of three.

08:59.570 --> 09:05.060
So the more I can only three, I can I can still shift my I slide my window a little bit to the right.

09:05.780 --> 09:06.080
Right.

09:06.260 --> 09:10.760
And now I acknowledge I can basically drop these three my buffer a little bit.

09:11.210 --> 09:16.640
Four, five, six now and I now here I can send the six right or I can send four or five.

09:16.640 --> 09:17.050
Six.

09:17.120 --> 09:17.330
Right.

09:17.480 --> 09:18.800
So we were sliding.

09:18.800 --> 09:21.140
That's called a sliding window, if you ever heard about this.

09:21.380 --> 09:22.490
So we're sliding.

09:22.790 --> 09:26.720
The more the more acknowledgement we get, the more we slight to the right.

09:27.240 --> 09:27.450
Right.

09:27.470 --> 09:29.960
While the window sizes remain the same effect.

09:30.530 --> 09:32.320
Okay, let's talk about window scaling.

09:32.330 --> 09:36.860
So we talked about the receiver window being 64 kilowatt is ridiculous, right?

09:36.860 --> 09:39.130
It's just too low these days.

09:39.140 --> 09:44.660
Imagine like I want to send a one gigabyte, a file or an apple or something.

09:44.870 --> 09:47.270
64 kilobyte is not is not going to finish at all.

09:47.810 --> 09:49.580
So and guess what?

09:49.640 --> 09:52.070
We're stuck with the segment being 16 bit.

09:52.370 --> 09:53.820
We can't really increase the segments.

09:53.820 --> 09:55.040
I kind of play with that header.

09:55.040 --> 09:55.490
It's done.

09:55.490 --> 09:57.050
It's written in stone, right.

09:57.230 --> 09:59.120
What was all those guys thinking?

09:59.120 --> 09:59.390
All right.

09:59.930 --> 10:05.180
16 but only store to a small but no, they actually solve this problem elegantly.

10:05.180 --> 10:10.940
They introduce a little with scaling factor, which is just basically a power factor.

10:11.840 --> 10:19.280
You there is another option in the TCP segments that you can enable and this is called the window scaling

10:19.490 --> 10:25.130
and this is negotiated during the exchange and we'll say, hey, my scaling is 14.

10:25.670 --> 10:32.120
So what you do is basically multiply to the board 16 which is the window size times, whatever the value

10:32.120 --> 10:38.000
currently and the window size multiplied by to table 14, that is huge as more than enough.

10:38.600 --> 10:42.170
So now you can go up to one gbps and window size.

10:42.530 --> 10:44.270
That is more than enough I think.

10:44.270 --> 10:44.570
Right.

10:45.020 --> 10:46.250
And you can play with this.

10:46.460 --> 10:49.850
The the scaling factor is negotiated only once.

10:49.860 --> 10:53.350
Remember during the handshake and that's it, right?

10:53.360 --> 10:53.660
That's why I.

10:53.660 --> 11:01.160
Wireshark when you do a wireshark all right if you miss the handshake, you the Wireshark cannot guess,

11:01.160 --> 11:07.310
unfortunately, the actual accurate window size because there is an accurate actual window size.

11:07.520 --> 11:12.500
And there is the estimated one, which is a window size in the in the bit, the 16 bit, that's not

11:12.500 --> 11:12.860
enough.

11:12.950 --> 11:14.300
That's definitely not enough.

11:15.050 --> 11:18.230
So window scaling is always almost used, right?

11:18.230 --> 11:19.610
So that option is always enabled.

11:19.970 --> 11:20.570
Right.

11:20.570 --> 11:26.900
Summary So we don't know why the receiver has a host has a limit like anything else, there is all limit

11:26.900 --> 11:32.990
because we have resources, we have RAM and CPU and we have the end of the day we can do everything

11:32.990 --> 11:33.560
infinitely.

11:34.190 --> 11:38.270
So we need to let the sender know how much I can handle.

11:38.450 --> 11:40.730
Right, and how much you should send.

11:41.210 --> 11:43.070
The receiver window is in the segment.

11:43.070 --> 11:43.460
Right?

11:44.060 --> 11:49.010
This can be controlled by the concept of the scaling factor, right?

11:49.010 --> 11:53.420
And the sliding window can be increased and slid in the moment.

11:53.540 --> 11:58.730
We have more acknowledgement so that we don't we're not stuck effectively in the same values right now.

11:58.730 --> 12:00.950
Sliding window will keep increasing and.

12:03.030 --> 12:05.850
And yeah, the scaling effectively controls all of that.

12:05.940 --> 12:08.910
Guys, flow control, very critical causes.

12:08.910 --> 12:12.470
So if you don't like TCP.

12:13.770 --> 12:20.850
You better include some sort of a simpler control at your end, in the back end, to build your own

12:20.850 --> 12:22.230
flow control if you want it.

12:22.290 --> 12:23.900
Otherwise you might.

12:23.910 --> 12:29.490
You might say, Hey, I know my servers is strong and are strong.

12:30.130 --> 12:30.990
I know my servers.

12:30.990 --> 12:31.610
Beefy.

12:31.620 --> 12:32.010
Right.

12:32.940 --> 12:33.840
Let's go with phase one.

12:34.310 --> 12:37.930
Yeah, I know my server as beefy and I know it's I will handle it.

12:37.950 --> 12:39.880
I don't need to implement any of that stuff.

12:39.900 --> 12:42.510
I know that my servers all is going to be beefy.

12:42.960 --> 12:49.470
You can skip all that and use UDP and don't it prevents or control a little bit of a slippery slope

12:49.470 --> 12:50.600
if you think about right.

12:50.820 --> 12:53.400
But yeah, it's like machines.

12:53.400 --> 12:55.800
These they are always can handle stuff.

12:55.800 --> 12:56.130
Right.

12:56.820 --> 12:57.270
But.

12:59.240 --> 13:05.300
The end of the day, if you have a lot of different clients connected to you, you're going to reach

13:05.300 --> 13:06.870
your limit really quick, right?

13:07.910 --> 13:14.040
But yeah, if you if you can do without flood control, maybe you you'll just you can ditch DCT, CBN,

13:14.060 --> 13:17.900
use UDP natively and then build anything you need.

13:17.900 --> 13:23.360
Flow control, maybe it's like, hey, I'm going to use for controlling the stateful manner and we'll

13:23.360 --> 13:26.580
get a negotiated once in in the UDP as data.

13:26.600 --> 13:28.220
So this is how much I can handle.

13:28.790 --> 13:29.390
Leave me alone.

13:29.600 --> 13:30.380
No need for this.

13:30.380 --> 13:34.460
Window sizes and all this sliding window mumbo jumbo.

13:34.490 --> 13:35.630
I don't need any of that stuff.

13:36.350 --> 13:39.680
But the next one is actually more critical, which is the congestion control.

13:39.680 --> 13:41.540
You want to stay tuned for that one.

13:41.750 --> 13:42.380
See you there.
