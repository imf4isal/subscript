WEBVTT

00:00.060 --> 00:07.650
All right, guys, just like we did with the UDP server, we did UDP with C, we did UDP with JavaScript.

00:07.830 --> 00:15.300
You seen how simple it is in JavaScript versus C, it just makes you appreciate what with this stuff,

00:15.300 --> 00:19.290
what is happening behind the scene, all the memory allocation, you have to do everything.

00:19.290 --> 00:25.980
You have to look at Instagram and really the work that did the server, the back into doing is a lot,

00:25.980 --> 00:31.800
you know, the appreciate every single memory allocation and this way we can see the both sides.

00:32.430 --> 00:39.330
We did the JavaScript version of the ECP server, now we do the C again, we took this from Nicole,

00:40.140 --> 00:41.880
so let's go ahead and look through this.

00:42.300 --> 00:48.990
So these are all the headers we need identical to the UDP server and this is the hard coded port 8801.

00:49.920 --> 00:52.500
We're going to need a socket file descriptor as usual.

00:52.740 --> 00:55.050
Going to need a server address and a new address.

00:55.230 --> 00:55.500
Right.

00:57.210 --> 00:58.320
This is me, my server.

00:58.320 --> 01:02.010
This is the destination server going to create a socket.

01:02.010 --> 01:03.090
Exactly the same thing.

01:03.100 --> 01:11.400
And remember with the UDP we did a socket socket object, another means IPV four and socket stream.

01:11.400 --> 01:16.320
That is different than the diagram because I need TCP now.

01:16.460 --> 01:16.690
All right.

01:17.070 --> 01:21.720
So that socket file descriptor is still a number when you put it.

01:21.720 --> 01:22.890
This is actually just a number.

01:23.970 --> 01:28.530
But if you look at the operating system table, the socket for the script at table is actually have

01:28.530 --> 01:29.520
more entries there.

01:30.360 --> 01:32.370
And this is what I want you to think about.

01:32.670 --> 01:37.440
The more socket file descriptors, the more memory you're going to need.

01:40.270 --> 01:46.870
I said the memory and I said the of that family, the server address, the port, the order identical

01:46.870 --> 01:47.200
everything.

01:47.200 --> 01:48.130
I didn't vote the 80 year.

01:48.280 --> 01:53.170
The only difference really is the as the this thing really so identical.

01:53.560 --> 02:00.190
We bite the socket we got the server address, we'll get the server address, the the size of it, and

02:00.190 --> 02:01.330
then we're going to print that.

02:01.330 --> 02:03.520
Hey, I successfully bind to that.

02:03.970 --> 02:09.250
And the only difference really now binding and listening is kind of different.

02:09.250 --> 02:09.830
Binding.

02:09.830 --> 02:14.230
That means any packet that is received, go ahead and.

02:15.860 --> 02:20.060
And and deliver the data grams or the segments to me.

02:20.480 --> 02:25.820
But binding that you really need in TCB, you need to bind and you'll have to listen.

02:26.480 --> 02:30.650
You have to listen for incoming connection requests because this is different.

02:30.650 --> 02:30.950
Right?

02:31.310 --> 02:34.730
And you have to also not only listen, you have to accept connections.

02:35.360 --> 02:39.710
This is where the it's a game changer when you understand all this stuff.

02:39.710 --> 02:39.920
Right.

02:40.250 --> 02:45.470
You're going to listen on the socket file descriptor for incoming connection request.

02:45.800 --> 02:49.640
And the moment you get a connection request, you have to accept.

02:49.850 --> 02:55.010
One thing to do here, guys, is listen is what performs the TCP handshake?

02:55.010 --> 02:57.530
And this is done by the TCP stack lower than us.

02:57.890 --> 03:02.450
And if you know, there's a there's a number parameter until the backlog.

03:02.510 --> 03:03.650
In this case, it's five.

03:04.010 --> 03:06.620
And this number is what is this?

03:06.710 --> 03:13.580
And this number is the queue, the maximum number of number of connections that can sit in your queue

03:13.790 --> 03:14.990
without getting accepted.

03:15.350 --> 03:22.280
Now, when you accept the connection, it comes to your application and now you can consume, you know,

03:22.280 --> 03:23.990
your queue is minus one, right?

03:25.010 --> 03:26.480
So this way there is a limit.

03:26.750 --> 03:30.500
If you accused useful and you didn't accept these connections fast enough.

03:30.890 --> 03:33.140
A problem proxies face.

03:33.140 --> 03:36.110
By the way, how can I accept connections as fast as possible?

03:36.740 --> 03:42.200
As how will you do threading and multithreading too, just to accept as fast as possible and make the

03:42.200 --> 03:43.250
queue obviously bigger.

03:43.640 --> 03:45.950
They won't accept these connections fast enough.

03:46.130 --> 03:49.040
You queuing before and if your queue is full, this what?

03:49.340 --> 03:52.040
The connections won't be handshake.

03:52.430 --> 03:58.070
So if someone tried to establish a connection for you and your application queue is full, they won't

03:58.070 --> 03:59.870
get it's an act back.

04:00.410 --> 04:01.520
Very interesting thing.

04:02.150 --> 04:04.410
This is compared to Node.js, right.

04:04.470 --> 04:09.740
Which does everything for us just makes it makes us appreciate this work in Node.js.

04:09.740 --> 04:16.550
If you remember, it was literally I didn't do anything I just at a function and then, hey, it's doing

04:16.550 --> 04:17.120
it by default.

04:17.120 --> 04:18.440
It accepts all the time.

04:19.160 --> 04:23.180
Here you have to call a function to accept a connection request.

04:23.480 --> 04:31.070
And only when you do accept that you're going to get a socket, an actual socket that you can start

04:31.070 --> 04:33.080
using to send this information.

04:33.340 --> 04:37.460
And so that is kind of the difference between TCP and would be.

04:37.910 --> 04:45.110
So when we accept the connection we're going to get, then you address that from the remote address

04:45.350 --> 04:48.860
which has the source port and a distant source point in the source address.

04:49.320 --> 04:49.580
Mm hmm.

04:49.940 --> 04:51.820
And then we're going to get a new socket, and that's it.

04:51.830 --> 04:55.520
You can use this new socket to send data to that.

04:55.520 --> 04:55.790
Right?

04:56.210 --> 05:01.460
So this program immediately prints, uh, it copies a string.

05:01.460 --> 05:04.970
Hello to the buffer, you know, because this is how we need to do it.

05:04.970 --> 05:11.360
And see, you have to copy the string to the buffer and then send that buffer object, you know, and

05:11.370 --> 05:16.010
they have to tell how much, how much data you are sending as well and that you're specifying which

05:16.010 --> 05:16.940
socket to send to.

05:17.360 --> 05:22.070
And the operating system will say, okay, this socket belongs to this file descriptor and it connection

05:22.070 --> 05:22.730
is accepted.

05:22.730 --> 05:30.560
Yeah, it is full at full full connection, you know, and that and after y after all we'll get it just

05:30.560 --> 05:32.060
immediately send and close the connections.

05:32.060 --> 05:33.080
It's very simple program.

05:33.230 --> 05:37.790
This program only accepts one disabling connection and immediately quits.

05:38.210 --> 05:43.820
So if you want to accept a lot, if you want to build a lot of sockets, right, you have to build an

05:43.820 --> 05:47.510
array of new sockets of this new sockets.

05:48.570 --> 05:53.490
And then you have to knew and you have to every time you have to loop and then accept.

05:53.670 --> 06:00.150
And every time you accept, you have to add it to this list of array and then you play with these sockets

06:00.150 --> 06:00.720
effectively.

06:01.050 --> 06:07.590
We didn't have to do that in JavaScript because JavaScript had the concept of closures and it beautifully

06:08.040 --> 06:08.700
treated.

06:08.700 --> 06:14.760
It created two object for us and each object is is in a different scope.

06:15.030 --> 06:18.210
So the first connection was in the first one and the second version was the second one.

06:18.840 --> 06:25.230
And every time we send, we triggered the right object here and see, sorry you had to do it yourself.

06:25.410 --> 06:27.510
So go ahead and run this program.

06:30.190 --> 06:32.200
And JCC may not see.

06:33.790 --> 06:35.200
And then eight out.

06:36.890 --> 06:38.810
We're binding and we're listening.

06:39.380 --> 06:41.810
And again, you get only one connection.

06:41.810 --> 06:42.380
So let's do it.

06:42.620 --> 06:43.190
Let's do it right.

06:43.760 --> 06:44.750
It is.

06:44.750 --> 06:45.110
You don't want.

06:45.110 --> 06:47.990
I believe then it's on you to be.

06:47.990 --> 06:49.040
It's you to be.

06:49.730 --> 06:53.060
So immediately we could the connection who they send us.

06:53.060 --> 06:53.510
Hello.

06:53.810 --> 06:54.380
And we're done.

06:56.120 --> 06:57.530
Immediately closing the connection.

06:58.430 --> 07:03.740
So this is a very simple program, but I thought it would be good to explain what exactly happening.

07:03.740 --> 07:07.550
And I think I believe always makes us appreciate this very this.

07:08.030 --> 07:16.130
You have no idea what people do to make this performant that accept no accepting is the most important

07:16.130 --> 07:28.340
concept here in TCP servers or proxies they so some the way they do it is if you do a loop and you do

07:28.340 --> 07:30.050
accept sure that works.

07:30.050 --> 07:31.790
But there is a limit, right?

07:31.790 --> 07:38.000
Because now your main threads now is looping and accepting and you don't have time to do the work.

07:38.450 --> 07:48.770
So what they what people do is they do the they make the threads except they made the main thread except

07:48.770 --> 07:49.400
the connection.

07:49.400 --> 07:54.980
And they create a thread, they create a new thread and send that socket to their thread to do the work.

07:55.280 --> 07:58.580
And because they cannot do everything and want to thread at the end of the day, right.

07:59.390 --> 08:02.390
So people invented a lot of stuff.

08:02.450 --> 08:06.230
And again, you were talking about 20 even more than that, right?

08:06.680 --> 08:10.310
Work of people just doing stuff and innovating.

08:10.310 --> 08:13.730
And we're looking at a simple C program here, but just makes you appreciate.

08:13.730 --> 08:15.350
I thought it would be a good idea to share.

08:15.710 --> 08:16.730
Hope you enjoyed this, guys.

08:16.910 --> 08:17.630
See you in the next one.
